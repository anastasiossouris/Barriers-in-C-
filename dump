
intel_i7_benchmark_suite:     file format elf64-x86-64


Disassembly of section .init:

00000000004015e0 <_init>:
  4015e0:	48 83 ec 08          	sub    $0x8,%rsp
  4015e4:	48 8b 05 0d 2a 21 00 	mov    0x212a0d(%rip),%rax        # 613ff8 <_DYNAMIC+0x220>
  4015eb:	48 85 c0             	test   %rax,%rax
  4015ee:	74 05                	je     4015f5 <_init+0x15>
  4015f0:	e8 4b 00 00 00       	callq  401640 <__gmon_start__@plt>
  4015f5:	48 83 c4 08          	add    $0x8,%rsp
  4015f9:	c3                   	retq   

Disassembly of section .plt:

0000000000401600 <_ZSt20__throw_length_errorPKc@plt-0x10>:
  401600:	ff 35 02 2a 21 00    	pushq  0x212a02(%rip)        # 614008 <_GLOBAL_OFFSET_TABLE_+0x8>
  401606:	ff 25 04 2a 21 00    	jmpq   *0x212a04(%rip)        # 614010 <_GLOBAL_OFFSET_TABLE_+0x10>
  40160c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401610 <_ZSt20__throw_length_errorPKc@plt>:
  401610:	ff 25 02 2a 21 00    	jmpq   *0x212a02(%rip)        # 614018 <_GLOBAL_OFFSET_TABLE_+0x18>
  401616:	68 00 00 00 00       	pushq  $0x0
  40161b:	e9 e0 ff ff ff       	jmpq   401600 <_init+0x20>

0000000000401620 <_ZNSolsEd@plt>:
  401620:	ff 25 fa 29 21 00    	jmpq   *0x2129fa(%rip)        # 614020 <_GLOBAL_OFFSET_TABLE_+0x20>
  401626:	68 01 00 00 00       	pushq  $0x1
  40162b:	e9 d0 ff ff ff       	jmpq   401600 <_init+0x20>

0000000000401630 <_ZNSolsEi@plt>:
  401630:	ff 25 f2 29 21 00    	jmpq   *0x2129f2(%rip)        # 614028 <_GLOBAL_OFFSET_TABLE_+0x28>
  401636:	68 02 00 00 00       	pushq  $0x2
  40163b:	e9 c0 ff ff ff       	jmpq   401600 <_init+0x20>

0000000000401640 <__gmon_start__@plt>:
  401640:	ff 25 ea 29 21 00    	jmpq   *0x2129ea(%rip)        # 614030 <_GLOBAL_OFFSET_TABLE_+0x30>
  401646:	68 03 00 00 00       	pushq  $0x3
  40164b:	e9 b0 ff ff ff       	jmpq   401600 <_init+0x20>

0000000000401650 <_Znam@plt>:
  401650:	ff 25 e2 29 21 00    	jmpq   *0x2129e2(%rip)        # 614038 <_GLOBAL_OFFSET_TABLE_+0x38>
  401656:	68 04 00 00 00       	pushq  $0x4
  40165b:	e9 a0 ff ff ff       	jmpq   401600 <_init+0x20>

0000000000401660 <_ZdlPv@plt>:
  401660:	ff 25 da 29 21 00    	jmpq   *0x2129da(%rip)        # 614040 <_GLOBAL_OFFSET_TABLE_+0x40>
  401666:	68 05 00 00 00       	pushq  $0x5
  40166b:	e9 90 ff ff ff       	jmpq   401600 <_init+0x20>

0000000000401670 <__assert_fail@plt>:
  401670:	ff 25 d2 29 21 00    	jmpq   *0x2129d2(%rip)        # 614048 <_GLOBAL_OFFSET_TABLE_+0x48>
  401676:	68 06 00 00 00       	pushq  $0x6
  40167b:	e9 80 ff ff ff       	jmpq   401600 <_init+0x20>

0000000000401680 <__cxa_rethrow@plt>:
  401680:	ff 25 ca 29 21 00    	jmpq   *0x2129ca(%rip)        # 614050 <_GLOBAL_OFFSET_TABLE_+0x50>
  401686:	68 07 00 00 00       	pushq  $0x7
  40168b:	e9 70 ff ff ff       	jmpq   401600 <_init+0x20>

0000000000401690 <_ZNSt8ios_base4InitC1Ev@plt>:
  401690:	ff 25 c2 29 21 00    	jmpq   *0x2129c2(%rip)        # 614058 <_GLOBAL_OFFSET_TABLE_+0x58>
  401696:	68 08 00 00 00       	pushq  $0x8
  40169b:	e9 60 ff ff ff       	jmpq   401600 <_init+0x20>

00000000004016a0 <__libc_start_main@plt>:
  4016a0:	ff 25 ba 29 21 00    	jmpq   *0x2129ba(%rip)        # 614060 <_GLOBAL_OFFSET_TABLE_+0x60>
  4016a6:	68 09 00 00 00       	pushq  $0x9
  4016ab:	e9 50 ff ff ff       	jmpq   401600 <_init+0x20>

00000000004016b0 <_ZNSt14basic_ofstreamIcSt11char_traitsIcEE4openERKSsSt13_Ios_Openmode@plt>:
  4016b0:	ff 25 b2 29 21 00    	jmpq   *0x2129b2(%rip)        # 614068 <_GLOBAL_OFFSET_TABLE_+0x68>
  4016b6:	68 0a 00 00 00       	pushq  $0xa
  4016bb:	e9 40 ff ff ff       	jmpq   401600 <_init+0x20>

00000000004016c0 <_ZNSsC1ERKSs@plt>:
  4016c0:	ff 25 aa 29 21 00    	jmpq   *0x2129aa(%rip)        # 614070 <_GLOBAL_OFFSET_TABLE_+0x70>
  4016c6:	68 0b 00 00 00       	pushq  $0xb
  4016cb:	e9 30 ff ff ff       	jmpq   401600 <_init+0x20>

00000000004016d0 <__cxa_atexit@plt>:
  4016d0:	ff 25 a2 29 21 00    	jmpq   *0x2129a2(%rip)        # 614078 <_GLOBAL_OFFSET_TABLE_+0x78>
  4016d6:	68 0c 00 00 00       	pushq  $0xc
  4016db:	e9 20 ff ff ff       	jmpq   401600 <_init+0x20>

00000000004016e0 <_ZNSt13runtime_errorC1ERKSs@plt>:
  4016e0:	ff 25 9a 29 21 00    	jmpq   *0x21299a(%rip)        # 614080 <_GLOBAL_OFFSET_TABLE_+0x80>
  4016e6:	68 0d 00 00 00       	pushq  $0xd
  4016eb:	e9 10 ff ff ff       	jmpq   401600 <_init+0x20>

00000000004016f0 <_ZNSt6thread15_M_start_threadESt10shared_ptrINS_10_Impl_baseEE@plt>:
  4016f0:	ff 25 92 29 21 00    	jmpq   *0x212992(%rip)        # 614088 <_GLOBAL_OFFSET_TABLE_+0x88>
  4016f6:	68 0e 00 00 00       	pushq  $0xe
  4016fb:	e9 00 ff ff ff       	jmpq   401600 <_init+0x20>

0000000000401700 <_ZNSt6thread20hardware_concurrencyEv@plt>:
  401700:	ff 25 8a 29 21 00    	jmpq   *0x21298a(%rip)        # 614090 <_GLOBAL_OFFSET_TABLE_+0x90>
  401706:	68 0f 00 00 00       	pushq  $0xf
  40170b:	e9 f0 fe ff ff       	jmpq   401600 <_init+0x20>

0000000000401710 <_ZNSt8ios_base4InitD1Ev@plt>:
  401710:	ff 25 82 29 21 00    	jmpq   *0x212982(%rip)        # 614098 <_GLOBAL_OFFSET_TABLE_+0x98>
  401716:	68 10 00 00 00       	pushq  $0x10
  40171b:	e9 e0 fe ff ff       	jmpq   401600 <_init+0x20>

0000000000401720 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>:
  401720:	ff 25 7a 29 21 00    	jmpq   *0x21297a(%rip)        # 6140a0 <_GLOBAL_OFFSET_TABLE_+0xa0>
  401726:	68 11 00 00 00       	pushq  $0x11
  40172b:	e9 d0 fe ff ff       	jmpq   401600 <_init+0x20>

0000000000401730 <_ZNSsD1Ev@plt>:
  401730:	ff 25 72 29 21 00    	jmpq   *0x212972(%rip)        # 6140a8 <_GLOBAL_OFFSET_TABLE_+0xa8>
  401736:	68 12 00 00 00       	pushq  $0x12
  40173b:	e9 c0 fe ff ff       	jmpq   401600 <_init+0x20>

0000000000401740 <_ZNSolsEm@plt>:
  401740:	ff 25 6a 29 21 00    	jmpq   *0x21296a(%rip)        # 6140b0 <_GLOBAL_OFFSET_TABLE_+0xb0>
  401746:	68 13 00 00 00       	pushq  $0x13
  40174b:	e9 b0 fe ff ff       	jmpq   401600 <_init+0x20>

0000000000401750 <pthread_self@plt>:
  401750:	ff 25 62 29 21 00    	jmpq   *0x212962(%rip)        # 6140b8 <_GLOBAL_OFFSET_TABLE_+0xb8>
  401756:	68 14 00 00 00       	pushq  $0x14
  40175b:	e9 a0 fe ff ff       	jmpq   401600 <_init+0x20>

0000000000401760 <_ZNSsC1EPKcRKSaIcE@plt>:
  401760:	ff 25 5a 29 21 00    	jmpq   *0x21295a(%rip)        # 6140c0 <_GLOBAL_OFFSET_TABLE_+0xc0>
  401766:	68 15 00 00 00       	pushq  $0x15
  40176b:	e9 90 fe ff ff       	jmpq   401600 <_init+0x20>

0000000000401770 <_ZNSt6thread4joinEv@plt>:
  401770:	ff 25 52 29 21 00    	jmpq   *0x212952(%rip)        # 6140c8 <_GLOBAL_OFFSET_TABLE_+0xc8>
  401776:	68 16 00 00 00       	pushq  $0x16
  40177b:	e9 80 fe ff ff       	jmpq   401600 <_init+0x20>

0000000000401780 <_ZSt9terminatev@plt>:
  401780:	ff 25 4a 29 21 00    	jmpq   *0x21294a(%rip)        # 6140d0 <_GLOBAL_OFFSET_TABLE_+0xd0>
  401786:	68 17 00 00 00       	pushq  $0x17
  40178b:	e9 70 fe ff ff       	jmpq   401600 <_init+0x20>

0000000000401790 <_ZNSt14basic_ofstreamIcSt11char_traitsIcEED1Ev@plt>:
  401790:	ff 25 42 29 21 00    	jmpq   *0x212942(%rip)        # 6140d8 <_GLOBAL_OFFSET_TABLE_+0xd8>
  401796:	68 18 00 00 00       	pushq  $0x18
  40179b:	e9 60 fe ff ff       	jmpq   401600 <_init+0x20>

00000000004017a0 <__cxa_pure_virtual@plt>:
  4017a0:	ff 25 3a 29 21 00    	jmpq   *0x21293a(%rip)        # 6140e0 <_GLOBAL_OFFSET_TABLE_+0xe0>
  4017a6:	68 19 00 00 00       	pushq  $0x19
  4017ab:	e9 50 fe ff ff       	jmpq   401600 <_init+0x20>

00000000004017b0 <_ZNSt14basic_ofstreamIcSt11char_traitsIcEE5closeEv@plt>:
  4017b0:	ff 25 32 29 21 00    	jmpq   *0x212932(%rip)        # 6140e8 <_GLOBAL_OFFSET_TABLE_+0xe8>
  4017b6:	68 1a 00 00 00       	pushq  $0x1a
  4017bb:	e9 40 fe ff ff       	jmpq   401600 <_init+0x20>

00000000004017c0 <memmove@plt>:
  4017c0:	ff 25 2a 29 21 00    	jmpq   *0x21292a(%rip)        # 6140f0 <_GLOBAL_OFFSET_TABLE_+0xf0>
  4017c6:	68 1b 00 00 00       	pushq  $0x1b
  4017cb:	e9 30 fe ff ff       	jmpq   401600 <_init+0x20>

00000000004017d0 <pthread_equal@plt>:
  4017d0:	ff 25 22 29 21 00    	jmpq   *0x212922(%rip)        # 6140f8 <_GLOBAL_OFFSET_TABLE_+0xf8>
  4017d6:	68 1c 00 00 00       	pushq  $0x1c
  4017db:	e9 20 fe ff ff       	jmpq   401600 <_init+0x20>

00000000004017e0 <_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKSbIS4_S5_T1_E@plt>:
  4017e0:	ff 25 1a 29 21 00    	jmpq   *0x21291a(%rip)        # 614100 <_GLOBAL_OFFSET_TABLE_+0x100>
  4017e6:	68 1d 00 00 00       	pushq  $0x1d
  4017eb:	e9 10 fe ff ff       	jmpq   401600 <_init+0x20>

00000000004017f0 <__stack_chk_fail@plt>:
  4017f0:	ff 25 12 29 21 00    	jmpq   *0x212912(%rip)        # 614108 <_GLOBAL_OFFSET_TABLE_+0x108>
  4017f6:	68 1e 00 00 00       	pushq  $0x1e
  4017fb:	e9 00 fe ff ff       	jmpq   401600 <_init+0x20>

0000000000401800 <strcmp@plt>:
  401800:	ff 25 0a 29 21 00    	jmpq   *0x21290a(%rip)        # 614110 <_GLOBAL_OFFSET_TABLE_+0x110>
  401806:	68 1f 00 00 00       	pushq  $0x1f
  40180b:	e9 f0 fd ff ff       	jmpq   401600 <_init+0x20>

0000000000401810 <__cxa_allocate_exception@plt>:
  401810:	ff 25 02 29 21 00    	jmpq   *0x212902(%rip)        # 614118 <_GLOBAL_OFFSET_TABLE_+0x118>
  401816:	68 20 00 00 00       	pushq  $0x20
  40181b:	e9 e0 fd ff ff       	jmpq   401600 <_init+0x20>

0000000000401820 <_ZNSaIcED1Ev@plt>:
  401820:	ff 25 fa 28 21 00    	jmpq   *0x2128fa(%rip)        # 614120 <_GLOBAL_OFFSET_TABLE_+0x120>
  401826:	68 21 00 00 00       	pushq  $0x21
  40182b:	e9 d0 fd ff ff       	jmpq   401600 <_init+0x20>

0000000000401830 <__cxa_free_exception@plt>:
  401830:	ff 25 f2 28 21 00    	jmpq   *0x2128f2(%rip)        # 614128 <_GLOBAL_OFFSET_TABLE_+0x128>
  401836:	68 22 00 00 00       	pushq  $0x22
  40183b:	e9 c0 fd ff ff       	jmpq   401600 <_init+0x20>

0000000000401840 <_ZNSt13runtime_errorD1Ev@plt>:
  401840:	ff 25 ea 28 21 00    	jmpq   *0x2128ea(%rip)        # 614130 <_GLOBAL_OFFSET_TABLE_+0x130>
  401846:	68 23 00 00 00       	pushq  $0x23
  40184b:	e9 b0 fd ff ff       	jmpq   401600 <_init+0x20>

0000000000401850 <_ZdaPv@plt>:
  401850:	ff 25 e2 28 21 00    	jmpq   *0x2128e2(%rip)        # 614138 <_GLOBAL_OFFSET_TABLE_+0x138>
  401856:	68 24 00 00 00       	pushq  $0x24
  40185b:	e9 a0 fd ff ff       	jmpq   401600 <_init+0x20>

0000000000401860 <__cxa_throw@plt>:
  401860:	ff 25 da 28 21 00    	jmpq   *0x2128da(%rip)        # 614140 <_GLOBAL_OFFSET_TABLE_+0x140>
  401866:	68 25 00 00 00       	pushq  $0x25
  40186b:	e9 90 fd ff ff       	jmpq   401600 <_init+0x20>

0000000000401870 <_ZNSolsEPFRSoS_E@plt>:
  401870:	ff 25 d2 28 21 00    	jmpq   *0x2128d2(%rip)        # 614148 <_GLOBAL_OFFSET_TABLE_+0x148>
  401876:	68 26 00 00 00       	pushq  $0x26
  40187b:	e9 80 fd ff ff       	jmpq   401600 <_init+0x20>

0000000000401880 <_ZNSt14basic_ofstreamIcSt11char_traitsIcEEC1Ev@plt>:
  401880:	ff 25 ca 28 21 00    	jmpq   *0x2128ca(%rip)        # 614150 <_GLOBAL_OFFSET_TABLE_+0x150>
  401886:	68 27 00 00 00       	pushq  $0x27
  40188b:	e9 70 fd ff ff       	jmpq   401600 <_init+0x20>

0000000000401890 <__cxa_end_catch@plt>:
  401890:	ff 25 c2 28 21 00    	jmpq   *0x2128c2(%rip)        # 614158 <_GLOBAL_OFFSET_TABLE_+0x158>
  401896:	68 28 00 00 00       	pushq  $0x28
  40189b:	e9 60 fd ff ff       	jmpq   401600 <_init+0x20>

00000000004018a0 <_ZSt17__throw_bad_allocv@plt>:
  4018a0:	ff 25 ba 28 21 00    	jmpq   *0x2128ba(%rip)        # 614160 <_GLOBAL_OFFSET_TABLE_+0x160>
  4018a6:	68 29 00 00 00       	pushq  $0x29
  4018ab:	e9 50 fd ff ff       	jmpq   401600 <_init+0x20>

00000000004018b0 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@plt>:
  4018b0:	ff 25 b2 28 21 00    	jmpq   *0x2128b2(%rip)        # 614168 <_GLOBAL_OFFSET_TABLE_+0x168>
  4018b6:	68 2a 00 00 00       	pushq  $0x2a
  4018bb:	e9 40 fd ff ff       	jmpq   401600 <_init+0x20>

00000000004018c0 <__pthread_key_create@plt>:
  4018c0:	ff 25 aa 28 21 00    	jmpq   *0x2128aa(%rip)        # 614170 <_GLOBAL_OFFSET_TABLE_+0x170>
  4018c6:	68 2b 00 00 00       	pushq  $0x2b
  4018cb:	e9 30 fd ff ff       	jmpq   401600 <_init+0x20>

00000000004018d0 <__cxa_begin_catch@plt>:
  4018d0:	ff 25 a2 28 21 00    	jmpq   *0x2128a2(%rip)        # 614178 <_GLOBAL_OFFSET_TABLE_+0x178>
  4018d6:	68 2c 00 00 00       	pushq  $0x2c
  4018db:	e9 20 fd ff ff       	jmpq   401600 <_init+0x20>

00000000004018e0 <_ZNSt6chrono3_V212steady_clock3nowEv@plt>:
  4018e0:	ff 25 9a 28 21 00    	jmpq   *0x21289a(%rip)        # 614180 <_GLOBAL_OFFSET_TABLE_+0x180>
  4018e6:	68 2d 00 00 00       	pushq  $0x2d
  4018eb:	e9 10 fd ff ff       	jmpq   401600 <_init+0x20>

00000000004018f0 <_ZNSaIcEC1Ev@plt>:
  4018f0:	ff 25 92 28 21 00    	jmpq   *0x212892(%rip)        # 614188 <_GLOBAL_OFFSET_TABLE_+0x188>
  4018f6:	68 2e 00 00 00       	pushq  $0x2e
  4018fb:	e9 00 fd ff ff       	jmpq   401600 <_init+0x20>

0000000000401900 <__gxx_personality_v0@plt>:
  401900:	ff 25 8a 28 21 00    	jmpq   *0x21288a(%rip)        # 614190 <_GLOBAL_OFFSET_TABLE_+0x190>
  401906:	68 2f 00 00 00       	pushq  $0x2f
  40190b:	e9 f0 fc ff ff       	jmpq   401600 <_init+0x20>

0000000000401910 <_Znwm@plt>:
  401910:	ff 25 82 28 21 00    	jmpq   *0x212882(%rip)        # 614198 <_GLOBAL_OFFSET_TABLE_+0x198>
  401916:	68 30 00 00 00       	pushq  $0x30
  40191b:	e9 e0 fc ff ff       	jmpq   401600 <_init+0x20>

0000000000401920 <_Unwind_Resume@plt>:
  401920:	ff 25 7a 28 21 00    	jmpq   *0x21287a(%rip)        # 6141a0 <_GLOBAL_OFFSET_TABLE_+0x1a0>
  401926:	68 31 00 00 00       	pushq  $0x31
  40192b:	e9 d0 fc ff ff       	jmpq   401600 <_init+0x20>

0000000000401930 <sqrt@plt>:
  401930:	ff 25 72 28 21 00    	jmpq   *0x212872(%rip)        # 6141a8 <_GLOBAL_OFFSET_TABLE_+0x1a8>
  401936:	68 32 00 00 00       	pushq  $0x32
  40193b:	e9 c0 fc ff ff       	jmpq   401600 <_init+0x20>

0000000000401940 <pthread_setaffinity_np@plt>:
  401940:	ff 25 6a 28 21 00    	jmpq   *0x21286a(%rip)        # 6141b0 <_GLOBAL_OFFSET_TABLE_+0x1b0>
  401946:	68 33 00 00 00       	pushq  $0x33
  40194b:	e9 b0 fc ff ff       	jmpq   401600 <_init+0x20>

Disassembly of section .text:

0000000000401950 <_start>:
  401950:	31 ed                	xor    %ebp,%ebp
  401952:	49 89 d1             	mov    %rdx,%r9
  401955:	5e                   	pop    %rsi
  401956:	48 89 e2             	mov    %rsp,%rdx
  401959:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  40195d:	50                   	push   %rax
  40195e:	54                   	push   %rsp
  40195f:	49 c7 c0 60 bb 40 00 	mov    $0x40bb60,%r8
  401966:	48 c7 c1 f0 ba 40 00 	mov    $0x40baf0,%rcx
  40196d:	48 c7 c7 f3 27 40 00 	mov    $0x4027f3,%rdi
  401974:	e8 27 fd ff ff       	callq  4016a0 <__libc_start_main@plt>
  401979:	f4                   	hlt    
  40197a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000401980 <deregister_tm_clones>:
  401980:	b8 cf 41 61 00       	mov    $0x6141cf,%eax
  401985:	55                   	push   %rbp
  401986:	48 2d c8 41 61 00    	sub    $0x6141c8,%rax
  40198c:	48 83 f8 0e          	cmp    $0xe,%rax
  401990:	48 89 e5             	mov    %rsp,%rbp
  401993:	77 02                	ja     401997 <deregister_tm_clones+0x17>
  401995:	5d                   	pop    %rbp
  401996:	c3                   	retq   
  401997:	b8 00 00 00 00       	mov    $0x0,%eax
  40199c:	48 85 c0             	test   %rax,%rax
  40199f:	74 f4                	je     401995 <deregister_tm_clones+0x15>
  4019a1:	5d                   	pop    %rbp
  4019a2:	bf c8 41 61 00       	mov    $0x6141c8,%edi
  4019a7:	ff e0                	jmpq   *%rax
  4019a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000004019b0 <register_tm_clones>:
  4019b0:	b8 c8 41 61 00       	mov    $0x6141c8,%eax
  4019b5:	55                   	push   %rbp
  4019b6:	48 2d c8 41 61 00    	sub    $0x6141c8,%rax
  4019bc:	48 c1 f8 03          	sar    $0x3,%rax
  4019c0:	48 89 e5             	mov    %rsp,%rbp
  4019c3:	48 89 c2             	mov    %rax,%rdx
  4019c6:	48 c1 ea 3f          	shr    $0x3f,%rdx
  4019ca:	48 01 d0             	add    %rdx,%rax
  4019cd:	48 d1 f8             	sar    %rax
  4019d0:	75 02                	jne    4019d4 <register_tm_clones+0x24>
  4019d2:	5d                   	pop    %rbp
  4019d3:	c3                   	retq   
  4019d4:	ba 00 00 00 00       	mov    $0x0,%edx
  4019d9:	48 85 d2             	test   %rdx,%rdx
  4019dc:	74 f4                	je     4019d2 <register_tm_clones+0x22>
  4019de:	5d                   	pop    %rbp
  4019df:	48 89 c6             	mov    %rax,%rsi
  4019e2:	bf c8 41 61 00       	mov    $0x6141c8,%edi
  4019e7:	ff e2                	jmpq   *%rdx
  4019e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000004019f0 <__do_global_dtors_aux>:
  4019f0:	80 3d e1 29 21 00 00 	cmpb   $0x0,0x2129e1(%rip)        # 6143d8 <completed.6972>
  4019f7:	75 11                	jne    401a0a <__do_global_dtors_aux+0x1a>
  4019f9:	55                   	push   %rbp
  4019fa:	48 89 e5             	mov    %rsp,%rbp
  4019fd:	e8 7e ff ff ff       	callq  401980 <deregister_tm_clones>
  401a02:	5d                   	pop    %rbp
  401a03:	c6 05 ce 29 21 00 01 	movb   $0x1,0x2129ce(%rip)        # 6143d8 <completed.6972>
  401a0a:	f3 c3                	repz retq 
  401a0c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401a10 <frame_dummy>:
  401a10:	48 83 3d b8 23 21 00 	cmpq   $0x0,0x2123b8(%rip)        # 613dd0 <__JCR_END__>
  401a17:	00 
  401a18:	74 1e                	je     401a38 <frame_dummy+0x28>
  401a1a:	b8 00 00 00 00       	mov    $0x0,%eax
  401a1f:	48 85 c0             	test   %rax,%rax
  401a22:	74 14                	je     401a38 <frame_dummy+0x28>
  401a24:	55                   	push   %rbp
  401a25:	bf d0 3d 61 00       	mov    $0x613dd0,%edi
  401a2a:	48 89 e5             	mov    %rsp,%rbp
  401a2d:	ff d0                	callq  *%rax
  401a2f:	5d                   	pop    %rbp
  401a30:	e9 7b ff ff ff       	jmpq   4019b0 <register_tm_clones>
  401a35:	0f 1f 00             	nopl   (%rax)
  401a38:	e9 73 ff ff ff       	jmpq   4019b0 <register_tm_clones>
  401a3d:	90                   	nop

0000000000401a3e <_ZN7barrier8internal8xorshiftC1Ev>:

	static const xorshift::state_type s_default_seed = {
		123456789, 362436069, 521288629, 88675123
	};

	xorshift::xorshift(void)
  401a3e:	55                   	push   %rbp
  401a3f:	48 89 e5             	mov    %rsp,%rbp
  401a42:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		: state_(s_default_seed)
  401a46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401a4a:	c7 00 15 cd 5b 07    	movl   $0x75bcd15,(%rax)
  401a50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401a54:	c7 40 04 e5 55 9a 15 	movl   $0x159a55e5,0x4(%rax)
  401a5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401a5f:	c7 40 08 b5 3b 12 1f 	movl   $0x1f123bb5,0x8(%rax)
  401a66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401a6a:	c7 40 0c 33 13 49 05 	movl   $0x5491333,0xc(%rax)
	{}
  401a71:	5d                   	pop    %rbp
  401a72:	c3                   	retq   
  401a73:	90                   	nop

0000000000401a74 <_ZN7barrier8internal8xorshiftC1ERKNS1_10state_typeE>:

	xorshift::xorshift(const state_type &seed)
  401a74:	55                   	push   %rbp
  401a75:	48 89 e5             	mov    %rsp,%rbp
  401a78:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401a7c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
		: state_(seed)
  401a80:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  401a84:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401a88:	48 8b 50 08          	mov    0x8(%rax),%rdx
  401a8c:	48 8b 00             	mov    (%rax),%rax
  401a8f:	48 89 01             	mov    %rax,(%rcx)
  401a92:	48 89 51 08          	mov    %rdx,0x8(%rcx)
	{}
  401a96:	5d                   	pop    %rbp
  401a97:	c3                   	retq   

0000000000401a98 <_ZN7barrier8internal8xorshiftC1Ej>:

	xorshift::xorshift(result_type r)
  401a98:	55                   	push   %rbp
  401a99:	48 89 e5             	mov    %rsp,%rbp
  401a9c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401aa0:	89 75 f4             	mov    %esi,-0xc(%rbp)
		: state_({s_default_seed.x, s_default_seed.y, s_default_seed.z, r})
  401aa3:	ba 15 cd 5b 07       	mov    $0x75bcd15,%edx
  401aa8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401aac:	89 10                	mov    %edx,(%rax)
  401aae:	ba e5 55 9a 15       	mov    $0x159a55e5,%edx
  401ab3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401ab7:	89 50 04             	mov    %edx,0x4(%rax)
  401aba:	ba b5 3b 12 1f       	mov    $0x1f123bb5,%edx
  401abf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401ac3:	89 50 08             	mov    %edx,0x8(%rax)
  401ac6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401aca:	8b 55 f4             	mov    -0xc(%rbp),%edx
  401acd:	89 50 0c             	mov    %edx,0xc(%rax)
	{}
  401ad0:	5d                   	pop    %rbp
  401ad1:	c3                   	retq   

0000000000401ad2 <_ZN7barrier8internal8xorshift4seedERKNS1_10state_typeE>:

	void xorshift::seed(const state_type &seed) {
  401ad2:	55                   	push   %rbp
  401ad3:	48 89 e5             	mov    %rsp,%rbp
  401ad6:	48 83 ec 10          	sub    $0x10,%rsp
  401ada:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401ade:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
		state(seed);
  401ae2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  401ae6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401aea:	48 89 d6             	mov    %rdx,%rsi
  401aed:	48 89 c7             	mov    %rax,%rdi
  401af0:	e8 ad 00 00 00       	callq  401ba2 <_ZN7barrier8internal8xorshift5stateERKNS1_10state_typeE>
	}
  401af5:	c9                   	leaveq 
  401af6:	c3                   	retq   
  401af7:	90                   	nop

0000000000401af8 <_ZN7barrier8internal8xorshift4seedEv>:

	void xorshift::seed(void) {
  401af8:	55                   	push   %rbp
  401af9:	48 89 e5             	mov    %rsp,%rbp
  401afc:	48 83 ec 10          	sub    $0x10,%rsp
  401b00:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		state(s_default_seed);
  401b04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401b08:	be b0 bc 40 00       	mov    $0x40bcb0,%esi
  401b0d:	48 89 c7             	mov    %rax,%rdi
  401b10:	e8 8d 00 00 00       	callq  401ba2 <_ZN7barrier8internal8xorshift5stateERKNS1_10state_typeE>
	}
  401b15:	c9                   	leaveq 
  401b16:	c3                   	retq   
  401b17:	90                   	nop

0000000000401b18 <_ZN7barrier8internal8xorshift4seedEj>:

	void xorshift::seed(result_type r) {
  401b18:	55                   	push   %rbp
  401b19:	48 89 e5             	mov    %rsp,%rbp
  401b1c:	48 83 ec 20          	sub    $0x20,%rsp
  401b20:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  401b24:	89 75 e4             	mov    %esi,-0x1c(%rbp)
		auto seed = s_default_seed;
  401b27:	c7 45 f0 15 cd 5b 07 	movl   $0x75bcd15,-0x10(%rbp)
  401b2e:	c7 45 f4 e5 55 9a 15 	movl   $0x159a55e5,-0xc(%rbp)
  401b35:	c7 45 f8 b5 3b 12 1f 	movl   $0x1f123bb5,-0x8(%rbp)
  401b3c:	c7 45 fc 33 13 49 05 	movl   $0x5491333,-0x4(%rbp)
		seed.w = r;
  401b43:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  401b46:	89 45 fc             	mov    %eax,-0x4(%rbp)
		state(seed);
  401b49:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  401b4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401b51:	48 89 d6             	mov    %rdx,%rsi
  401b54:	48 89 c7             	mov    %rax,%rdi
  401b57:	e8 46 00 00 00       	callq  401ba2 <_ZN7barrier8internal8xorshift5stateERKNS1_10state_typeE>
	}
  401b5c:	c9                   	leaveq 
  401b5d:	c3                   	retq   

0000000000401b5e <_ZN7barrier8internal8xorshift7discardEy>:

	void xorshift::discard(unsigned long long z) {
  401b5e:	55                   	push   %rbp
  401b5f:	48 89 e5             	mov    %rsp,%rbp
  401b62:	48 83 ec 10          	sub    $0x10,%rsp
  401b66:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401b6a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
		while (z--)
  401b6e:	eb 0c                	jmp    401b7c <_ZN7barrier8internal8xorshift7discardEy+0x1e>
			(*this)();
  401b70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401b74:	48 89 c7             	mov    %rax,%rdi
  401b77:	e8 62 00 00 00       	callq  401bde <_ZN7barrier8internal8xorshiftclEv>
		seed.w = r;
		state(seed);
	}

	void xorshift::discard(unsigned long long z) {
		while (z--)
  401b7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401b80:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  401b84:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  401b88:	48 85 c0             	test   %rax,%rax
  401b8b:	0f 95 c0             	setne  %al
  401b8e:	84 c0                	test   %al,%al
  401b90:	75 de                	jne    401b70 <_ZN7barrier8internal8xorshift7discardEy+0x12>
			(*this)();
	}
  401b92:	c9                   	leaveq 
  401b93:	c3                   	retq   

0000000000401b94 <_ZNK7barrier8internal8xorshift5stateEv>:

	const xorshift::state_type &xorshift::state(void) const {
  401b94:	55                   	push   %rbp
  401b95:	48 89 e5             	mov    %rsp,%rbp
  401b98:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		return state_;
  401b9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
	}
  401ba0:	5d                   	pop    %rbp
  401ba1:	c3                   	retq   

0000000000401ba2 <_ZN7barrier8internal8xorshift5stateERKNS1_10state_typeE>:

	void xorshift::state(const state_type &state) {
  401ba2:	55                   	push   %rbp
  401ba3:	48 89 e5             	mov    %rsp,%rbp
  401ba6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401baa:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
		state_ = state;
  401bae:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  401bb2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401bb6:	48 8b 50 08          	mov    0x8(%rax),%rdx
  401bba:	48 8b 00             	mov    (%rax),%rax
  401bbd:	48 89 01             	mov    %rax,(%rcx)
  401bc0:	48 89 51 08          	mov    %rdx,0x8(%rcx)
	}
  401bc4:	5d                   	pop    %rbp
  401bc5:	c3                   	retq   

0000000000401bc6 <_ZN7barrier8internal8xorshift3minEv>:

	xorshift::result_type xorshift::min(void) {
  401bc6:	55                   	push   %rbp
  401bc7:	48 89 e5             	mov    %rsp,%rbp
		return std::numeric_limits<result_type>::min();
  401bca:	e8 be 01 00 00       	callq  401d8d <_ZNSt14numeric_limitsIjE3minEv>
	}
  401bcf:	5d                   	pop    %rbp
  401bd0:	c3                   	retq   
  401bd1:	90                   	nop

0000000000401bd2 <_ZN7barrier8internal8xorshift3maxEv>:

	xorshift::result_type xorshift::max(void) {
  401bd2:	55                   	push   %rbp
  401bd3:	48 89 e5             	mov    %rsp,%rbp
		return std::numeric_limits<result_type>::max();
  401bd6:	e8 bd 01 00 00       	callq  401d98 <_ZNSt14numeric_limitsIjE3maxEv>
	}
  401bdb:	5d                   	pop    %rbp
  401bdc:	c3                   	retq   
  401bdd:	90                   	nop

0000000000401bde <_ZN7barrier8internal8xorshiftclEv>:

	xorshift::result_type xorshift::operator()(void) {
  401bde:	55                   	push   %rbp
  401bdf:	48 89 e5             	mov    %rsp,%rbp
  401be2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
		result_type t = state_.x ^ (state_.x << 15);
  401be6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401bea:	8b 10                	mov    (%rax),%edx
  401bec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401bf0:	8b 00                	mov    (%rax),%eax
  401bf2:	c1 e0 0f             	shl    $0xf,%eax
  401bf5:	31 d0                	xor    %edx,%eax
  401bf7:	89 45 fc             	mov    %eax,-0x4(%rbp)
		state_.x = state_.y; state_.y = state_.z; state_.z = state_.w;
  401bfa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401bfe:	8b 50 04             	mov    0x4(%rax),%edx
  401c01:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401c05:	89 10                	mov    %edx,(%rax)
  401c07:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401c0b:	8b 50 08             	mov    0x8(%rax),%edx
  401c0e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401c12:	89 50 04             	mov    %edx,0x4(%rax)
  401c15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401c19:	8b 50 0c             	mov    0xc(%rax),%edx
  401c1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401c20:	89 50 08             	mov    %edx,0x8(%rax)
		return state_.w = state_.w ^ (state_.w >> 21) ^ (t ^ (t >> 4));
  401c23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401c27:	8b 50 0c             	mov    0xc(%rax),%edx
  401c2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401c2e:	8b 40 0c             	mov    0xc(%rax),%eax
  401c31:	c1 e8 15             	shr    $0x15,%eax
  401c34:	31 c2                	xor    %eax,%edx
  401c36:	8b 45 fc             	mov    -0x4(%rbp),%eax
  401c39:	c1 e8 04             	shr    $0x4,%eax
  401c3c:	33 45 fc             	xor    -0x4(%rbp),%eax
  401c3f:	31 c2                	xor    %eax,%edx
  401c41:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401c45:	89 50 0c             	mov    %edx,0xc(%rax)
  401c48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401c4c:	8b 40 0c             	mov    0xc(%rax),%eax
	}
  401c4f:	5d                   	pop    %rbp
  401c50:	c3                   	retq   

0000000000401c51 <_ZN7barrier8internaleqERKNS0_8xorshift10state_typeES4_>:

	static bool operator==(
		const xorshift::state_type &lhs, const xorshift::state_type &rhs)
	{
  401c51:	55                   	push   %rbp
  401c52:	48 89 e5             	mov    %rsp,%rbp
  401c55:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401c59:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
		return lhs.x == rhs.x
  401c5d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401c61:	8b 10                	mov    (%rax),%edx
  401c63:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401c67:	8b 00                	mov    (%rax),%eax
			&& lhs.y == rhs.y
			&& lhs.z == rhs.z
			&& lhs.w == rhs.w;
  401c69:	39 c2                	cmp    %eax,%edx
  401c6b:	75 3d                	jne    401caa <_ZN7barrier8internaleqERKNS0_8xorshift10state_typeES4_+0x59>

	static bool operator==(
		const xorshift::state_type &lhs, const xorshift::state_type &rhs)
	{
		return lhs.x == rhs.x
			&& lhs.y == rhs.y
  401c6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401c71:	8b 50 04             	mov    0x4(%rax),%edx
  401c74:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401c78:	8b 40 04             	mov    0x4(%rax),%eax
  401c7b:	39 c2                	cmp    %eax,%edx
  401c7d:	75 2b                	jne    401caa <_ZN7barrier8internaleqERKNS0_8xorshift10state_typeES4_+0x59>
			&& lhs.z == rhs.z
  401c7f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401c83:	8b 50 08             	mov    0x8(%rax),%edx
  401c86:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401c8a:	8b 40 08             	mov    0x8(%rax),%eax
  401c8d:	39 c2                	cmp    %eax,%edx
  401c8f:	75 19                	jne    401caa <_ZN7barrier8internaleqERKNS0_8xorshift10state_typeES4_+0x59>
			&& lhs.w == rhs.w;
  401c91:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401c95:	8b 50 0c             	mov    0xc(%rax),%edx
  401c98:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401c9c:	8b 40 0c             	mov    0xc(%rax),%eax
  401c9f:	39 c2                	cmp    %eax,%edx
  401ca1:	75 07                	jne    401caa <_ZN7barrier8internaleqERKNS0_8xorshift10state_typeES4_+0x59>
  401ca3:	b8 01 00 00 00       	mov    $0x1,%eax
  401ca8:	eb 05                	jmp    401caf <_ZN7barrier8internaleqERKNS0_8xorshift10state_typeES4_+0x5e>
  401caa:	b8 00 00 00 00       	mov    $0x0,%eax
	}
  401caf:	5d                   	pop    %rbp
  401cb0:	c3                   	retq   

0000000000401cb1 <_ZN7barrier8internalneERKNS0_8xorshift10state_typeES4_>:

	static bool operator!=(
		const xorshift::state_type &lhs, const xorshift::state_type &rhs)
	{
  401cb1:	55                   	push   %rbp
  401cb2:	48 89 e5             	mov    %rsp,%rbp
  401cb5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401cb9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
		return lhs.x != rhs.x
  401cbd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401cc1:	8b 10                	mov    (%rax),%edx
  401cc3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401cc7:	8b 00                	mov    (%rax),%eax
			|| lhs.y != rhs.y
			|| lhs.z != rhs.z
			|| lhs.w != rhs.w;
  401cc9:	39 c2                	cmp    %eax,%edx
  401ccb:	75 36                	jne    401d03 <_ZN7barrier8internalneERKNS0_8xorshift10state_typeES4_+0x52>

	static bool operator!=(
		const xorshift::state_type &lhs, const xorshift::state_type &rhs)
	{
		return lhs.x != rhs.x
			|| lhs.y != rhs.y
  401ccd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401cd1:	8b 50 04             	mov    0x4(%rax),%edx
  401cd4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401cd8:	8b 40 04             	mov    0x4(%rax),%eax
  401cdb:	39 c2                	cmp    %eax,%edx
  401cdd:	75 24                	jne    401d03 <_ZN7barrier8internalneERKNS0_8xorshift10state_typeES4_+0x52>
			|| lhs.z != rhs.z
  401cdf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401ce3:	8b 50 08             	mov    0x8(%rax),%edx
  401ce6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401cea:	8b 40 08             	mov    0x8(%rax),%eax
  401ced:	39 c2                	cmp    %eax,%edx
  401cef:	75 12                	jne    401d03 <_ZN7barrier8internalneERKNS0_8xorshift10state_typeES4_+0x52>
			|| lhs.w != rhs.w;
  401cf1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401cf5:	8b 50 0c             	mov    0xc(%rax),%edx
  401cf8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401cfc:	8b 40 0c             	mov    0xc(%rax),%eax
  401cff:	39 c2                	cmp    %eax,%edx
  401d01:	74 07                	je     401d0a <_ZN7barrier8internalneERKNS0_8xorshift10state_typeES4_+0x59>
  401d03:	b8 01 00 00 00       	mov    $0x1,%eax
  401d08:	eb 05                	jmp    401d0f <_ZN7barrier8internalneERKNS0_8xorshift10state_typeES4_+0x5e>
  401d0a:	b8 00 00 00 00       	mov    $0x0,%eax
	}
  401d0f:	5d                   	pop    %rbp
  401d10:	c3                   	retq   

0000000000401d11 <_ZN7barrier8internaleqERKNS0_8xorshiftES3_>:

	bool operator==(const xorshift &lhs, const xorshift &rhs) {
  401d11:	55                   	push   %rbp
  401d12:	48 89 e5             	mov    %rsp,%rbp
  401d15:	53                   	push   %rbx
  401d16:	48 83 ec 10          	sub    $0x10,%rsp
  401d1a:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  401d1e:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
		return lhs.state() == rhs.state();
  401d22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401d26:	48 89 c7             	mov    %rax,%rdi
  401d29:	e8 66 fe ff ff       	callq  401b94 <_ZNK7barrier8internal8xorshift5stateEv>
  401d2e:	48 89 c3             	mov    %rax,%rbx
  401d31:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401d35:	48 89 c7             	mov    %rax,%rdi
  401d38:	e8 57 fe ff ff       	callq  401b94 <_ZNK7barrier8internal8xorshift5stateEv>
  401d3d:	48 89 de             	mov    %rbx,%rsi
  401d40:	48 89 c7             	mov    %rax,%rdi
  401d43:	e8 09 ff ff ff       	callq  401c51 <_ZN7barrier8internaleqERKNS0_8xorshift10state_typeES4_>
	}
  401d48:	48 83 c4 10          	add    $0x10,%rsp
  401d4c:	5b                   	pop    %rbx
  401d4d:	5d                   	pop    %rbp
  401d4e:	c3                   	retq   

0000000000401d4f <_ZN7barrier8internalneERKNS0_8xorshiftES3_>:

	bool operator!=(const xorshift &lhs, const xorshift &rhs) {
  401d4f:	55                   	push   %rbp
  401d50:	48 89 e5             	mov    %rsp,%rbp
  401d53:	53                   	push   %rbx
  401d54:	48 83 ec 10          	sub    $0x10,%rsp
  401d58:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  401d5c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
		return lhs.state() != rhs.state();
  401d60:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401d64:	48 89 c7             	mov    %rax,%rdi
  401d67:	e8 28 fe ff ff       	callq  401b94 <_ZNK7barrier8internal8xorshift5stateEv>
  401d6c:	48 89 c3             	mov    %rax,%rbx
  401d6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401d73:	48 89 c7             	mov    %rax,%rdi
  401d76:	e8 19 fe ff ff       	callq  401b94 <_ZNK7barrier8internal8xorshift5stateEv>
  401d7b:	48 89 de             	mov    %rbx,%rsi
  401d7e:	48 89 c7             	mov    %rax,%rdi
  401d81:	e8 2b ff ff ff       	callq  401cb1 <_ZN7barrier8internalneERKNS0_8xorshift10state_typeES4_>
	}
  401d86:	48 83 c4 10          	add    $0x10,%rsp
  401d8a:	5b                   	pop    %rbx
  401d8b:	5d                   	pop    %rbp
  401d8c:	c3                   	retq   

0000000000401d8d <_ZNSt14numeric_limitsIjE3minEv>:
    struct numeric_limits<unsigned int>
    {
      static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;

      static _GLIBCXX_CONSTEXPR unsigned int 
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
  401d8d:	55                   	push   %rbp
  401d8e:	48 89 e5             	mov    %rsp,%rbp
  401d91:	b8 00 00 00 00       	mov    $0x0,%eax
  401d96:	5d                   	pop    %rbp
  401d97:	c3                   	retq   

0000000000401d98 <_ZNSt14numeric_limitsIjE3maxEv>:

      static _GLIBCXX_CONSTEXPR unsigned int 
      max() _GLIBCXX_USE_NOEXCEPT { return __INT_MAX__ * 2U + 1; }
  401d98:	55                   	push   %rbp
  401d99:	48 89 e5             	mov    %rsp,%rbp
  401d9c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  401da1:	5d                   	pop    %rbp
  401da2:	c3                   	retq   
  401da3:	90                   	nop

0000000000401da4 <_ZL18__gthread_active_pv>:
# define GTHR_ACTIVE_PROXY	__gthrw_(pthread_cancel)
#endif

static inline int
__gthread_active_p (void)
{
  401da4:	55                   	push   %rbp
  401da5:	48 89 e5             	mov    %rsp,%rbp
  static void *const __gthread_active_ptr
    = __extension__ (void *) &GTHR_ACTIVE_PROXY;
  return __gthread_active_ptr != 0;
  401da8:	b8 c0 18 40 00       	mov    $0x4018c0,%eax
  401dad:	48 85 c0             	test   %rax,%rax
  401db0:	0f 95 c0             	setne  %al
  401db3:	0f b6 c0             	movzbl %al,%eax
}
  401db6:	5d                   	pop    %rbp
  401db7:	c3                   	retq   

0000000000401db8 <_ZL15__gthread_equalmm>:
  return __gthrw_(pthread_detach) (__threadid);
}

static inline int
__gthread_equal (__gthread_t __t1, __gthread_t __t2)
{
  401db8:	55                   	push   %rbp
  401db9:	48 89 e5             	mov    %rsp,%rbp
  401dbc:	48 83 ec 10          	sub    $0x10,%rsp
  401dc0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401dc4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return __gthrw_(pthread_equal) (__t1, __t2);
  401dc8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  401dcc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401dd0:	48 89 d6             	mov    %rdx,%rsi
  401dd3:	48 89 c7             	mov    %rax,%rdi
  401dd6:	e8 f5 f9 ff ff       	callq  4017d0 <pthread_equal@plt>
}
  401ddb:	c9                   	leaveq 
  401ddc:	c3                   	retq   

0000000000401ddd <_ZN9__gnu_cxxL18__exchange_and_addEPVii>:
  // __exchange_and_add_dispatch
  // __atomic_add_dispatch
#ifdef _GLIBCXX_ATOMIC_BUILTINS
  static inline _Atomic_word 
  __exchange_and_add(volatile _Atomic_word* __mem, int __val)
  { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
  401ddd:	55                   	push   %rbp
  401dde:	48 89 e5             	mov    %rsp,%rbp
  401de1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401de5:	89 75 f4             	mov    %esi,-0xc(%rbp)
  401de8:	8b 55 f4             	mov    -0xc(%rbp),%edx
  401deb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401def:	f0 0f c1 10          	lock xadd %edx,(%rax)
  401df3:	89 d0                	mov    %edx,%eax
  401df5:	5d                   	pop    %rbp
  401df6:	c3                   	retq   

0000000000401df7 <_ZN9__gnu_cxxL25__exchange_and_add_singleEPii>:
  __atomic_add(volatile _Atomic_word*, int) throw ();
#endif

  static inline _Atomic_word
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
  401df7:	55                   	push   %rbp
  401df8:	48 89 e5             	mov    %rsp,%rbp
  401dfb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  401dff:	89 75 e4             	mov    %esi,-0x1c(%rbp)
    _Atomic_word __result = *__mem;
  401e02:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401e06:	8b 00                	mov    (%rax),%eax
  401e08:	89 45 fc             	mov    %eax,-0x4(%rbp)
    *__mem += __val;
  401e0b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401e0f:	8b 10                	mov    (%rax),%edx
  401e11:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  401e14:	01 c2                	add    %eax,%edx
  401e16:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401e1a:	89 10                	mov    %edx,(%rax)
    return __result;
  401e1c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  }
  401e1f:	5d                   	pop    %rbp
  401e20:	c3                   	retq   

0000000000401e21 <_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii>:
  { *__mem += __val; }

  static inline _Atomic_word
  __attribute__ ((__unused__))
  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
  {
  401e21:	55                   	push   %rbp
  401e22:	48 89 e5             	mov    %rsp,%rbp
  401e25:	48 83 ec 10          	sub    $0x10,%rsp
  401e29:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401e2d:	89 75 f4             	mov    %esi,-0xc(%rbp)
#ifdef __GTHREADS
    if (__gthread_active_p())
  401e30:	e8 6f ff ff ff       	callq  401da4 <_ZL18__gthread_active_pv>
  401e35:	85 c0                	test   %eax,%eax
  401e37:	0f 95 c0             	setne  %al
  401e3a:	84 c0                	test   %al,%al
  401e3c:	74 13                	je     401e51 <_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii+0x30>
      return __exchange_and_add(__mem, __val);
  401e3e:	8b 55 f4             	mov    -0xc(%rbp),%edx
  401e41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401e45:	89 d6                	mov    %edx,%esi
  401e47:	48 89 c7             	mov    %rax,%rdi
  401e4a:	e8 8e ff ff ff       	callq  401ddd <_ZN9__gnu_cxxL18__exchange_and_addEPVii>
  401e4f:	eb 11                	jmp    401e62 <_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii+0x41>
    else
      return __exchange_and_add_single(__mem, __val);
  401e51:	8b 55 f4             	mov    -0xc(%rbp),%edx
  401e54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401e58:	89 d6                	mov    %edx,%esi
  401e5a:	48 89 c7             	mov    %rax,%rdi
  401e5d:	e8 95 ff ff ff       	callq  401df7 <_ZN9__gnu_cxxL25__exchange_and_add_singleEPii>
#else
    return __exchange_and_add_single(__mem, __val);
#endif
  }
  401e62:	c9                   	leaveq 
  401e63:	c3                   	retq   

0000000000401e64 <_ZZ14run_experimentvENKUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_clES1_mmS4_>:
	
	for (std::size_t i = 0; i < data.size(); ++i){
		data[i].resize(workload_size);
	}

	auto thread_job = [](barrier::centralized_sense_reversing_barrier& barrier, std::size_t workload, std::mt19937::result_type seed, std::atomic<bool>& start_flag){	
  401e64:	55                   	push   %rbp
  401e65:	48 89 e5             	mov    %rsp,%rbp
  401e68:	48 81 ec e0 13 00 00 	sub    $0x13e0,%rsp
  401e6f:	48 89 bd 48 ec ff ff 	mov    %rdi,-0x13b8(%rbp)
  401e76:	48 89 b5 40 ec ff ff 	mov    %rsi,-0x13c0(%rbp)
  401e7d:	48 89 95 38 ec ff ff 	mov    %rdx,-0x13c8(%rbp)
  401e84:	48 89 8d 30 ec ff ff 	mov    %rcx,-0x13d0(%rbp)
  401e8b:	4c 89 85 28 ec ff ff 	mov    %r8,-0x13d8(%rbp)
		const std::size_t num_episodes = 10000;
  401e92:	48 c7 85 58 ec ff ff 	movq   $0x2710,-0x13a8(%rbp)
  401e99:	10 27 00 00 

		random_workload work{workload, seed};
  401e9d:	48 8b 95 30 ec ff ff 	mov    -0x13d0(%rbp),%rdx
  401ea4:	48 8b 8d 38 ec ff ff 	mov    -0x13c8(%rbp),%rcx
  401eab:	48 8d 85 60 ec ff ff 	lea    -0x13a0(%rbp),%rax
  401eb2:	48 89 ce             	mov    %rcx,%rsi
  401eb5:	48 89 c7             	mov    %rax,%rdi
  401eb8:	e8 0b 2c 00 00       	callq  404ac8 <_ZN15random_workloadC1Emm>

		// wait until we are told to start
		while (!start_flag.load()){}
  401ebd:	90                   	nop
  401ebe:	48 8b 85 28 ec ff ff 	mov    -0x13d8(%rbp),%rax
  401ec5:	be 05 00 00 00       	mov    $0x5,%esi
  401eca:	48 89 c7             	mov    %rax,%rdi
  401ecd:	e8 50 1f 00 00       	callq  403e22 <_ZNKSt11atomic_bool4loadESt12memory_order>
  401ed2:	83 f0 01             	xor    $0x1,%eax
  401ed5:	84 c0                	test   %al,%al
  401ed7:	75 e5                	jne    401ebe <_ZZ14run_experimentvENKUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_clES1_mmS4_+0x5a>

		for (std::size_t i = 0; i < num_episodes; ++i){
  401ed9:	48 c7 85 50 ec ff ff 	movq   $0x0,-0x13b0(%rbp)
  401ee0:	00 00 00 00 
  401ee4:	eb 26                	jmp    401f0c <_ZZ14run_experimentvENKUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_clES1_mmS4_+0xa8>
			work();
  401ee6:	48 8d 85 60 ec ff ff 	lea    -0x13a0(%rbp),%rax
  401eed:	48 89 c7             	mov    %rax,%rdi
  401ef0:	e8 2b 2c 00 00       	callq  404b20 <_ZN15random_workloadclEv>
			barrier.await();
  401ef5:	48 8b 85 40 ec ff ff 	mov    -0x13c0(%rbp),%rax
  401efc:	48 89 c7             	mov    %rax,%rdi
  401eff:	e8 06 2b 00 00       	callq  404a0a <_ZN7barrier35centralized_sense_reversing_barrier5awaitEv>
		random_workload work{workload, seed};

		// wait until we are told to start
		while (!start_flag.load()){}

		for (std::size_t i = 0; i < num_episodes; ++i){
  401f04:	48 83 85 50 ec ff ff 	addq   $0x1,-0x13b0(%rbp)
  401f0b:	01 
  401f0c:	48 81 bd 50 ec ff ff 	cmpq   $0x270f,-0x13b0(%rbp)
  401f13:	0f 27 00 00 
  401f17:	76 cd                	jbe    401ee6 <_ZZ14run_experimentvENKUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_clES1_mmS4_+0x82>
			work();
			barrier.await();
		}
	};
  401f19:	c9                   	leaveq 
  401f1a:	c3                   	retq   

0000000000401f1b <_Z14run_experimentv>:
	}
};

// The function returns a vector of vectors that contain the (lower,mean,upper) latencies. 
// The first vector denotes the number of threads and the inner vector the workload parameter
std::vector<std::vector<std::tuple<double,double,double> > > run_experiment(){
  401f1b:	55                   	push   %rbp
  401f1c:	48 89 e5             	mov    %rsp,%rbp
  401f1f:	41 57                	push   %r15
  401f21:	41 56                	push   %r14
  401f23:	41 55                	push   %r13
  401f25:	41 54                	push   %r12
  401f27:	53                   	push   %rbx
  401f28:	48 83 e4 c0          	and    $0xffffffffffffffc0,%rsp
  401f2c:	48 81 ec c0 15 00 00 	sub    $0x15c0,%rsp
  401f33:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  401f38:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  401f3f:	00 00 
  401f41:	48 89 84 24 b8 15 00 	mov    %rax,0x15b8(%rsp)
  401f48:	00 
  401f49:	31 c0                	xor    %eax,%eax
	std::vector<std::vector<std::tuple<double,double,double> > > data;
  401f4b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  401f50:	48 89 c7             	mov    %rax,%rdi
  401f53:	e8 12 36 00 00       	callq  40556a <_ZNSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EEC1Ev>

	const std::size_t workloads [] = {1,10,100};
  401f58:	48 c7 84 24 b0 00 00 	movq   $0x1,0xb0(%rsp)
  401f5f:	00 01 00 00 00 
  401f64:	48 c7 84 24 b8 00 00 	movq   $0xa,0xb8(%rsp)
  401f6b:	00 0a 00 00 00 
  401f70:	48 c7 84 24 c0 00 00 	movq   $0x64,0xc0(%rsp)
  401f77:	00 64 00 00 00 
	const std::size_t workload_size = sizeof(workloads)/sizeof(workloads[0]);
  401f7c:	48 c7 84 24 90 00 00 	movq   $0x3,0x90(%rsp)
  401f83:	00 03 00 00 00 

	data.resize(8);
  401f88:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  401f8d:	be 08 00 00 00       	mov    $0x8,%esi
  401f92:	48 89 c7             	mov    %rax,%rdi
  401f95:	e8 2e 36 00 00       	callq  4055c8 <_ZNSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EE6resizeEm>
	
	for (std::size_t i = 0; i < data.size(); ++i){
  401f9a:	48 c7 44 24 68 00 00 	movq   $0x0,0x68(%rsp)
  401fa1:	00 00 
  401fa3:	eb 28                	jmp    401fcd <_Z14run_experimentv+0xb2>
		data[i].resize(workload_size);
  401fa5:	48 8b 54 24 68       	mov    0x68(%rsp),%rdx
  401faa:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  401faf:	48 89 d6             	mov    %rdx,%rsi
  401fb2:	48 89 c7             	mov    %rax,%rdi
  401fb5:	e8 d6 36 00 00       	callq  405690 <_ZNSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EEixEm>
  401fba:	be 03 00 00 00       	mov    $0x3,%esi
  401fbf:	48 89 c7             	mov    %rax,%rdi
  401fc2:	e8 f3 36 00 00       	callq  4056ba <_ZNSt6vectorISt5tupleIIdddEESaIS1_EE6resizeEm>
	const std::size_t workloads [] = {1,10,100};
	const std::size_t workload_size = sizeof(workloads)/sizeof(workloads[0]);

	data.resize(8);
	
	for (std::size_t i = 0; i < data.size(); ++i){
  401fc7:	48 83 44 24 68 01    	addq   $0x1,0x68(%rsp)
  401fcd:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  401fd2:	48 89 c7             	mov    %rax,%rdi
  401fd5:	e8 7e 36 00 00       	callq  405658 <_ZNKSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EE4sizeEv>
  401fda:	48 3b 44 24 68       	cmp    0x68(%rsp),%rax
  401fdf:	0f 97 c0             	seta   %al
  401fe2:	84 c0                	test   %al,%al
  401fe4:	75 bf                	jne    401fa5 <_Z14run_experimentv+0x8a>
			work();
			barrier.await();
		}
	};

	std::cout << "Starting the experiment" << std::endl;
  401fe6:	be 28 bd 40 00       	mov    $0x40bd28,%esi
  401feb:	bf 60 42 61 00       	mov    $0x614260,%edi
  401ff0:	e8 2b f7 ff ff       	callq  401720 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
  401ff5:	be b0 18 40 00       	mov    $0x4018b0,%esi
  401ffa:	48 89 c7             	mov    %rax,%rdi
  401ffd:	e8 6e f8 ff ff       	callq  401870 <_ZNSolsEPFRSoS_E@plt>

	barrier::internal::affinity aff_setter;

	for (std::size_t num_threads = 1; num_threads <= 8; ++num_threads){
  402002:	48 c7 44 24 70 01 00 	movq   $0x1,0x70(%rsp)
  402009:	00 00 
  40200b:	e9 56 04 00 00       	jmpq   402466 <_Z14run_experimentv+0x54b>
		for (std::size_t workload_index = 0; workload_index < workload_size; ++workload_index){
  402010:	48 c7 44 24 78 00 00 	movq   $0x0,0x78(%rsp)
  402017:	00 00 
  402019:	e9 36 04 00 00       	jmpq   402454 <_Z14run_experimentv+0x539>
			const std::size_t workload = workloads[workload_index];
  40201e:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  402023:	48 8b 84 c4 b0 00 00 	mov    0xb0(%rsp,%rax,8),%rax
  40202a:	00 
  40202b:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
			std::cout << "Executing experiment with " << num_threads << " threads and " << workload << " workload parameter." << std::endl;
  402030:	48 8b 5c 24 60       	mov    0x60(%rsp),%rbx
  402035:	be 40 bd 40 00       	mov    $0x40bd40,%esi
  40203a:	bf 60 42 61 00       	mov    $0x614260,%edi
  40203f:	e8 dc f6 ff ff       	callq  401720 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
  402044:	48 8b 54 24 70       	mov    0x70(%rsp),%rdx
  402049:	48 89 d6             	mov    %rdx,%rsi
  40204c:	48 89 c7             	mov    %rax,%rdi
  40204f:	e8 ec f6 ff ff       	callq  401740 <_ZNSolsEm@plt>
  402054:	be 5b bd 40 00       	mov    $0x40bd5b,%esi
  402059:	48 89 c7             	mov    %rax,%rdi
  40205c:	e8 bf f6 ff ff       	callq  401720 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
  402061:	48 89 de             	mov    %rbx,%rsi
  402064:	48 89 c7             	mov    %rax,%rdi
  402067:	e8 d4 f6 ff ff       	callq  401740 <_ZNSolsEm@plt>
  40206c:	be 69 bd 40 00       	mov    $0x40bd69,%esi
  402071:	48 89 c7             	mov    %rax,%rdi
  402074:	e8 a7 f6 ff ff       	callq  401720 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
  402079:	be b0 18 40 00       	mov    $0x4018b0,%esi
  40207e:	48 89 c7             	mov    %rax,%rdi
  402081:	e8 ea f7 ff ff       	callq  401870 <_ZNSolsEPFRSoS_E@plt>

			// with a confidence interval
			const std::size_t num_times{30};
  402086:	48 c7 84 24 98 00 00 	movq   $0x1e,0x98(%rsp)
  40208d:	00 1e 00 00 00 

			barrier::internal::confidence_interval mean(num_times);
  402092:	48 8d 84 24 d0 00 00 	lea    0xd0(%rsp),%rax
  402099:	00 
  40209a:	be 1e 00 00 00       	mov    $0x1e,%esi
  40209f:	48 89 c7             	mov    %rax,%rdi
  4020a2:	e8 9d 1d 00 00       	callq  403e44 <_ZN7barrier8internal19confidence_intervalC1Em>


			// create the random seeds for the threads. Each of the num_times times each thread must start with the same seed!
			// this is a requirement for reproducability
			std::vector<std::mt19937::result_type> seeds;
  4020a7:	48 8d 84 24 f0 00 00 	lea    0xf0(%rsp),%rax
  4020ae:	00 
  4020af:	48 89 c7             	mov    %rax,%rdi
  4020b2:	e8 93 36 00 00       	callq  40574a <_ZNSt6vectorImSaImEEC1Ev>
			 			
			std::mt19937 rnd(1337);
  4020b7:	48 8d 84 24 30 01 00 	lea    0x130(%rsp),%rax
  4020be:	00 
  4020bf:	be 39 05 00 00       	mov    $0x539,%esi
  4020c4:	48 89 c7             	mov    %rax,%rdi
  4020c7:	e8 4e 34 00 00       	callq  40551a <_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEC1Em>

			for (std::size_t i = 0; i < num_threads; ++i){
  4020cc:	48 c7 84 24 80 00 00 	movq   $0x0,0x80(%rsp)
  4020d3:	00 00 00 00 00 
  4020d8:	eb 3c                	jmp    402116 <_Z14run_experimentv+0x1fb>
				seeds.push_back(rnd());
  4020da:	48 8d 84 24 30 01 00 	lea    0x130(%rsp),%rax
  4020e1:	00 
  4020e2:	48 89 c7             	mov    %rax,%rdi
  4020e5:	e8 be 36 00 00       	callq  4057a8 <_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv>
  4020ea:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  4020f1:	00 
  4020f2:	48 8d 94 24 10 01 00 	lea    0x110(%rsp),%rdx
  4020f9:	00 
  4020fa:	48 8d 84 24 f0 00 00 	lea    0xf0(%rsp),%rax
  402101:	00 
  402102:	48 89 d6             	mov    %rdx,%rsi
  402105:	48 89 c7             	mov    %rax,%rdi
  402108:	e8 3d 37 00 00       	callq  40584a <_ZNSt6vectorImSaImEE9push_backEOm>
			// this is a requirement for reproducability
			std::vector<std::mt19937::result_type> seeds;
			 			
			std::mt19937 rnd(1337);

			for (std::size_t i = 0; i < num_threads; ++i){
  40210d:	48 83 84 24 80 00 00 	addq   $0x1,0x80(%rsp)
  402114:	00 01 
  402116:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  40211d:	00 
  40211e:	48 3b 44 24 70       	cmp    0x70(%rsp),%rax
  402123:	72 b5                	jb     4020da <_Z14run_experimentv+0x1bf>
				seeds.push_back(rnd());
			}

			for (std::size_t i = 0; i < num_times; ++i){
  402125:	48 c7 84 24 88 00 00 	movq   $0x0,0x88(%rsp)
  40212c:	00 00 00 00 00 
  402131:	e9 92 02 00 00       	jmpq   4023c8 <_Z14run_experimentv+0x4ad>
				std::cout << "\t..." << i;
  402136:	be 7e bd 40 00       	mov    $0x40bd7e,%esi
  40213b:	bf 60 42 61 00       	mov    $0x614260,%edi
  402140:	e8 db f5 ff ff       	callq  401720 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
  402145:	48 8b 94 24 88 00 00 	mov    0x88(%rsp),%rdx
  40214c:	00 
  40214d:	48 89 d6             	mov    %rdx,%rsi
  402150:	48 89 c7             	mov    %rax,%rdi
  402153:	e8 e8 f5 ff ff       	callq  401740 <_ZNSolsEm@plt>


				// create the barrier instance
				std::aligned_storage<sizeof(barrier::centralized_sense_reversing_barrier),CACHE_LINE_SIZE>::type barrier;
				
				new(&barrier) barrier::centralized_sense_reversing_barrier(num_threads); 
  402158:	48 8d 84 24 c0 14 00 	lea    0x14c0(%rsp),%rax
  40215f:	00 
  402160:	48 89 c6             	mov    %rax,%rsi
  402163:	bf 84 00 00 00       	mov    $0x84,%edi
  402168:	e8 f0 19 00 00       	callq  403b5d <_ZnwmPv>
  40216d:	48 85 c0             	test   %rax,%rax
  402170:	74 0f                	je     402181 <_Z14run_experimentv+0x266>
  402172:	48 8b 54 24 70       	mov    0x70(%rsp),%rdx
  402177:	89 d6                	mov    %edx,%esi
  402179:	48 89 c7             	mov    %rax,%rdi
  40217c:	e8 5f 28 00 00       	callq  4049e0 <_ZN7barrier35centralized_sense_reversing_barrierC1Ej>

				// clear the caches
				{
					std::cout << "\tClearing caches" << std::endl;
  402181:	be 83 bd 40 00       	mov    $0x40bd83,%esi
  402186:	bf 60 42 61 00       	mov    $0x614260,%edi
  40218b:	e8 90 f5 ff ff       	callq  401720 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
  402190:	be b0 18 40 00       	mov    $0x4018b0,%esi
  402195:	48 89 c7             	mov    %rax,%rdi
  402198:	e8 d3 f6 ff ff       	callq  401870 <_ZNSolsEPFRSoS_E@plt>
					barrier::internal::cache_wiper cw;

					cw.clear_caches();
  40219d:	48 8d 84 24 10 01 00 	lea    0x110(%rsp),%rax
  4021a4:	00 
  4021a5:	48 89 c7             	mov    %rax,%rdi
  4021a8:	e8 3f 25 00 00       	callq  4046ec <_ZN7barrier8internal11cache_wiper12clear_cachesEv>
				}


				// create the threads
				std::vector<std::thread> threads;
  4021ad:	48 8d 84 24 10 01 00 	lea    0x110(%rsp),%rax
  4021b4:	00 
  4021b5:	48 89 c7             	mov    %rax,%rdi
  4021b8:	e8 1f 30 00 00       	callq  4051dc <_ZNSt6vectorISt6threadSaIS0_EEC1Ev>
				std::atomic<bool> start_flag{false};
  4021bd:	c6 44 24 1b 00       	movb   $0x0,0x1b(%rsp)

				for (int j = 0; j < num_threads; ++j){
  4021c2:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%rsp)
  4021c9:	00 
  4021ca:	e9 db 00 00 00       	jmpq   4022aa <_Z14run_experimentv+0x38f>
					std::thread t = std::thread{thread_job,std::ref(*static_cast<barrier::centralized_sense_reversing_barrier*>(
								static_cast<void*>(&barrier))), 
								workload, seeds[j], std::ref(start_flag)};
  4021cf:	48 8d 44 24 50       	lea    0x50(%rsp),%rax
  4021d4:	48 8d 54 24 1b       	lea    0x1b(%rsp),%rdx
  4021d9:	48 89 d6             	mov    %rdx,%rsi
  4021dc:	48 89 c7             	mov    %rax,%rdi
  4021df:	e8 e0 36 00 00       	callq  4058c4 <_ZSt3refISt6atomicIbEESt17reference_wrapperIT_ERS3_>
  4021e4:	8b 44 24 1c          	mov    0x1c(%rsp),%eax
  4021e8:	48 63 d0             	movslq %eax,%rdx
  4021eb:	48 8d 84 24 f0 00 00 	lea    0xf0(%rsp),%rax
  4021f2:	00 
  4021f3:	48 89 d6             	mov    %rdx,%rsi
  4021f6:	48 89 c7             	mov    %rax,%rdi
  4021f9:	e8 a6 36 00 00       	callq  4058a4 <_ZNSt6vectorImSaImEEixEm>
  4021fe:	48 89 c3             	mov    %rax,%rbx
  402201:	48 8d 44 24 40       	lea    0x40(%rsp),%rax
  402206:	48 8d 94 24 c0 14 00 	lea    0x14c0(%rsp),%rdx
  40220d:	00 
  40220e:	48 89 d6             	mov    %rdx,%rsi
  402211:	48 89 c7             	mov    %rax,%rdi
  402214:	e8 61 36 00 00       	callq  40587a <_ZSt3refIN7barrier35centralized_sense_reversing_barrierEESt17reference_wrapperIT_ERS3_>
  402219:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  40221e:	48 8d 4c 24 60       	lea    0x60(%rsp),%rcx
  402223:	48 8d 54 24 40       	lea    0x40(%rsp),%rdx
  402228:	48 8d 74 24 19       	lea    0x19(%rsp),%rsi
  40222d:	48 8d 44 24 30       	lea    0x30(%rsp),%rax
  402232:	49 89 f9             	mov    %rdi,%r9
  402235:	49 89 d8             	mov    %rbx,%r8
  402238:	48 89 c7             	mov    %rax,%rdi
  40223b:	e8 88 07 00 00       	callq  4029c8 <_ZNSt6threadC1IRZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_ISt17reference_wrapperIS2_ERKmRmS9_IS5_EEEEOT_DpOT0_>
					std::thread::native_handle_type t_handle = t.native_handle();
  402240:	48 8d 44 24 30       	lea    0x30(%rsp),%rax
  402245:	48 89 c7             	mov    %rax,%rdi
  402248:	e8 c1 1a 00 00       	callq  403d0e <_ZNSt6thread13native_handleEv>
  40224d:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  402254:	00 
					threads.push_back(std::move(t));
  402255:	48 8d 44 24 30       	lea    0x30(%rsp),%rax
  40225a:	48 89 c7             	mov    %rax,%rdi
  40225d:	e8 2a 29 00 00       	callq  404b8c <_ZSt4moveIRSt6threadEONSt16remove_referenceIT_E4typeEOS3_>
  402262:	48 89 c2             	mov    %rax,%rdx
  402265:	48 8d 84 24 10 01 00 	lea    0x110(%rsp),%rax
  40226c:	00 
  40226d:	48 89 d6             	mov    %rdx,%rsi
  402270:	48 89 c7             	mov    %rax,%rdi
  402273:	e8 ec 30 00 00       	callq  405364 <_ZNSt6vectorISt6threadSaIS0_EE9push_backEOS0_>

					aff_setter(num_threads, j, t_handle);
  402278:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  40227d:	89 c6                	mov    %eax,%esi
  40227f:	48 8b 8c 24 a0 00 00 	mov    0xa0(%rsp),%rcx
  402286:	00 
  402287:	8b 54 24 1c          	mov    0x1c(%rsp),%edx
  40228b:	48 8d 44 24 1a       	lea    0x1a(%rsp),%rax
  402290:	48 89 c7             	mov    %rax,%rdi
  402293:	e8 1a 27 00 00       	callq  4049b2 <_ZN7barrier8internal8affinityclEiim>
				}
  402298:	48 8d 44 24 30       	lea    0x30(%rsp),%rax
  40229d:	48 89 c7             	mov    %rax,%rdi
  4022a0:	e8 ef 19 00 00       	callq  403c94 <_ZNSt6threadD1Ev>

				// create the threads
				std::vector<std::thread> threads;
				std::atomic<bool> start_flag{false};

				for (int j = 0; j < num_threads; ++j){
  4022a5:	83 44 24 1c 01       	addl   $0x1,0x1c(%rsp)
  4022aa:	8b 44 24 1c          	mov    0x1c(%rsp),%eax
  4022ae:	48 98                	cltq   
  4022b0:	48 3b 44 24 70       	cmp    0x70(%rsp),%rax
  4022b5:	0f 82 14 ff ff ff    	jb     4021cf <_Z14run_experimentv+0x2b4>
					threads.push_back(std::move(t));

					aff_setter(num_threads, j, t_handle);
				}
					
				auto start_time = std::chrono::steady_clock::now();
  4022bb:	e8 20 f6 ff ff       	callq  4018e0 <_ZNSt6chrono3_V212steady_clock3nowEv@plt>
  4022c0:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
				start_flag = true;
  4022c5:	48 8d 44 24 1b       	lea    0x1b(%rsp),%rax
  4022ca:	be 01 00 00 00       	mov    $0x1,%esi
  4022cf:	48 89 c7             	mov    %rax,%rdi
  4022d2:	e8 f9 1a 00 00       	callq  403dd0 <_ZNSt11atomic_boolaSEb>
				// wait for the threads to finish
				std::for_each(threads.begin(), threads.end(), std::mem_fn(&std::thread::join));
  4022d7:	41 bc 70 17 40 00    	mov    $0x401770,%r12d
  4022dd:	41 bd 00 00 00 00    	mov    $0x0,%r13d
  4022e3:	4c 89 e1             	mov    %r12,%rcx
  4022e6:	4c 89 eb             	mov    %r13,%rbx
  4022e9:	4c 89 e0             	mov    %r12,%rax
  4022ec:	4c 89 ea             	mov    %r13,%rdx
  4022ef:	48 89 d0             	mov    %rdx,%rax
  4022f2:	48 89 cf             	mov    %rcx,%rdi
  4022f5:	48 89 c6             	mov    %rax,%rsi
  4022f8:	e8 e6 30 00 00       	callq  4053e3 <_ZSt6mem_fnIFvvESt6threadESt7_Mem_fnIMT0_T_ES5_>
  4022fd:	49 89 c6             	mov    %rax,%r14
  402300:	49 89 d7             	mov    %rdx,%r15
  402303:	48 8d 84 24 10 01 00 	lea    0x110(%rsp),%rax
  40230a:	00 
  40230b:	48 89 c7             	mov    %rax,%rdi
  40230e:	e8 a7 30 00 00       	callq  4053ba <_ZNSt6vectorISt6threadSaIS0_EE3endEv>
  402313:	48 89 c3             	mov    %rax,%rbx
  402316:	48 8d 84 24 10 01 00 	lea    0x110(%rsp),%rax
  40231d:	00 
  40231e:	48 89 c7             	mov    %rax,%rdi
  402321:	e8 6e 30 00 00       	callq  405394 <_ZNSt6vectorISt6threadSaIS0_EE5beginEv>
  402326:	4c 89 f2             	mov    %r14,%rdx
  402329:	4c 89 f9             	mov    %r15,%rcx
  40232c:	48 89 de             	mov    %rbx,%rsi
  40232f:	48 89 c7             	mov    %rax,%rdi
  402332:	e8 f4 30 00 00       	callq  40542b <_ZSt8for_eachIN9__gnu_cxx17__normal_iteratorIPSt6threadSt6vectorIS2_SaIS2_EEEESt7_Mem_fnIMS2_FvvEEET0_T_SD_SC_>
				auto end_time = std::chrono::steady_clock::now();
  402337:	e8 a4 f5 ff ff       	callq  4018e0 <_ZNSt6chrono3_V212steady_clock3nowEv@plt>
  40233c:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
				double elapsed_time = std::chrono::duration<double,std::nano>(end_time-start_time).count();
  402341:	48 8d 54 24 20       	lea    0x20(%rsp),%rdx
  402346:	48 8d 44 24 30       	lea    0x30(%rsp),%rax
  40234b:	48 89 d6             	mov    %rdx,%rsi
  40234e:	48 89 c7             	mov    %rax,%rdi
  402351:	e8 bf 28 00 00       	callq  404c15 <_ZNSt6chronomiINS_3_V212steady_clockENS_8durationIlSt5ratioILl1ELl1000000000EEEES6_EENSt11common_typeIIT0_T1_EE4typeERKNS_10time_pointIT_S8_EERKNSC_ISD_S9_EE>
  402356:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  40235b:	48 8d 54 24 40       	lea    0x40(%rsp),%rdx
  402360:	48 8d 44 24 50       	lea    0x50(%rsp),%rax
  402365:	48 89 d6             	mov    %rdx,%rsi
  402368:	48 89 c7             	mov    %rax,%rdi
  40236b:	e8 90 29 00 00       	callq  404d00 <_ZNSt6chrono8durationIdSt5ratioILl1ELl1000000000EEEC1IlS2_vEERKNS0_IT_T0_EE>
  402370:	48 8d 44 24 50       	lea    0x50(%rsp),%rax
  402375:	48 89 c7             	mov    %rax,%rdi
  402378:	e8 69 29 00 00       	callq  404ce6 <_ZNKSt6chrono8durationIdSt5ratioILl1ELl1000000000EEE5countEv>
  40237d:	f2 0f 11 04 24       	movsd  %xmm0,(%rsp)
  402382:	48 8b 04 24          	mov    (%rsp),%rax
  402386:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  40238d:	00 

				mean.add(elapsed_time);				
  40238e:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  402395:	00 
  402396:	48 8d 94 24 d0 00 00 	lea    0xd0(%rsp),%rdx
  40239d:	00 
  40239e:	48 89 04 24          	mov    %rax,(%rsp)
  4023a2:	f2 0f 10 04 24       	movsd  (%rsp),%xmm0
  4023a7:	48 89 d7             	mov    %rdx,%rdi
  4023aa:	e8 e9 1a 00 00       	callq  403e98 <_ZN7barrier8internal19confidence_interval3addEd>
			}
  4023af:	48 8d 84 24 10 01 00 	lea    0x110(%rsp),%rax
  4023b6:	00 
  4023b7:	48 89 c7             	mov    %rax,%rdi
  4023ba:	e8 37 2e 00 00       	callq  4051f6 <_ZNSt6vectorISt6threadSaIS0_EED1Ev>

			for (std::size_t i = 0; i < num_threads; ++i){
				seeds.push_back(rnd());
			}

			for (std::size_t i = 0; i < num_times; ++i){
  4023bf:	48 83 84 24 88 00 00 	addq   $0x1,0x88(%rsp)
  4023c6:	00 01 
  4023c8:	48 83 bc 24 88 00 00 	cmpq   $0x1d,0x88(%rsp)
  4023cf:	00 1d 
  4023d1:	0f 86 5f fd ff ff    	jbe    402136 <_Z14run_experimentv+0x21b>
				mean.add(elapsed_time);				
			}


			// now record the result
			data[num_threads-1][workload_index] = mean.mean();
  4023d7:	48 8d 84 24 10 01 00 	lea    0x110(%rsp),%rax
  4023de:	00 
  4023df:	48 8d 94 24 d0 00 00 	lea    0xd0(%rsp),%rdx
  4023e6:	00 
  4023e7:	48 89 d6             	mov    %rdx,%rsi
  4023ea:	48 89 c7             	mov    %rax,%rdi
  4023ed:	e8 62 1f 00 00       	callq  404354 <_ZN7barrier8internal19confidence_interval4meanEv>
  4023f2:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  4023f7:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  4023fb:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  402400:	48 89 d6             	mov    %rdx,%rsi
  402403:	48 89 c7             	mov    %rax,%rdi
  402406:	e8 85 32 00 00       	callq  405690 <_ZNSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EEixEm>
  40240b:	48 8b 54 24 78       	mov    0x78(%rsp),%rdx
  402410:	48 89 d6             	mov    %rdx,%rsi
  402413:	48 89 c7             	mov    %rax,%rdi
  402416:	e8 0b 35 00 00       	callq  405926 <_ZNSt6vectorISt5tupleIIdddEESaIS1_EEixEm>
  40241b:	48 8d 94 24 10 01 00 	lea    0x110(%rsp),%rdx
  402422:	00 
  402423:	48 89 d6             	mov    %rdx,%rsi
  402426:	48 89 c7             	mov    %rax,%rdi
  402429:	e8 30 35 00 00       	callq  40595e <_ZNSt5tupleIIdddEEaSEOS0_>
			barrier::internal::confidence_interval mean(num_times);


			// create the random seeds for the threads. Each of the num_times times each thread must start with the same seed!
			// this is a requirement for reproducability
			std::vector<std::mt19937::result_type> seeds;
  40242e:	48 8d 84 24 f0 00 00 	lea    0xf0(%rsp),%rax
  402435:	00 
  402436:	48 89 c7             	mov    %rax,%rdi
  402439:	e8 26 33 00 00       	callq  405764 <_ZNSt6vectorImSaImEED1Ev>
			}


			// now record the result
			data[num_threads-1][workload_index] = mean.mean();
		}
  40243e:	48 8d 84 24 d0 00 00 	lea    0xd0(%rsp),%rax
  402445:	00 
  402446:	48 89 c7             	mov    %rax,%rdi
  402449:	e8 24 27 00 00       	callq  404b72 <_ZN7barrier8internal19confidence_intervalD1Ev>
	std::cout << "Starting the experiment" << std::endl;

	barrier::internal::affinity aff_setter;

	for (std::size_t num_threads = 1; num_threads <= 8; ++num_threads){
		for (std::size_t workload_index = 0; workload_index < workload_size; ++workload_index){
  40244e:	48 83 44 24 78 01    	addq   $0x1,0x78(%rsp)
  402454:	48 83 7c 24 78 02    	cmpq   $0x2,0x78(%rsp)
  40245a:	0f 86 be fb ff ff    	jbe    40201e <_Z14run_experimentv+0x103>

	std::cout << "Starting the experiment" << std::endl;

	barrier::internal::affinity aff_setter;

	for (std::size_t num_threads = 1; num_threads <= 8; ++num_threads){
  402460:	48 83 44 24 70 01    	addq   $0x1,0x70(%rsp)
  402466:	48 83 7c 24 70 08    	cmpq   $0x8,0x70(%rsp)
  40246c:	0f 86 9e fb ff ff    	jbe    402010 <_Z14run_experimentv+0xf5>
			// now record the result
			data[num_threads-1][workload_index] = mean.mean();
		}
	}

	return data;
  402472:	90                   	nop
}
  402473:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  402478:	48 8b 8c 24 b8 15 00 	mov    0x15b8(%rsp),%rcx
  40247f:	00 
  402480:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  402487:	00 00 
  402489:	74 73                	je     4024fe <_Z14run_experimentv+0x5e3>
  40248b:	eb 6c                	jmp    4024f9 <_Z14run_experimentv+0x5de>
  40248d:	48 89 c3             	mov    %rax,%rbx
								workload, seeds[j], std::ref(start_flag)};
					std::thread::native_handle_type t_handle = t.native_handle();
					threads.push_back(std::move(t));

					aff_setter(num_threads, j, t_handle);
				}
  402490:	48 8d 44 24 30       	lea    0x30(%rsp),%rax
  402495:	48 89 c7             	mov    %rax,%rdi
  402498:	e8 f7 17 00 00       	callq  403c94 <_ZNSt6threadD1Ev>
  40249d:	eb 03                	jmp    4024a2 <_Z14run_experimentv+0x587>
  40249f:	48 89 c3             	mov    %rax,%rbx
				std::for_each(threads.begin(), threads.end(), std::mem_fn(&std::thread::join));
				auto end_time = std::chrono::steady_clock::now();
				double elapsed_time = std::chrono::duration<double,std::nano>(end_time-start_time).count();

				mean.add(elapsed_time);				
			}
  4024a2:	48 8d 84 24 10 01 00 	lea    0x110(%rsp),%rax
  4024a9:	00 
  4024aa:	48 89 c7             	mov    %rax,%rdi
  4024ad:	e8 44 2d 00 00       	callq  4051f6 <_ZNSt6vectorISt6threadSaIS0_EED1Ev>
  4024b2:	eb 03                	jmp    4024b7 <_Z14run_experimentv+0x59c>
  4024b4:	48 89 c3             	mov    %rax,%rbx
			barrier::internal::confidence_interval mean(num_times);


			// create the random seeds for the threads. Each of the num_times times each thread must start with the same seed!
			// this is a requirement for reproducability
			std::vector<std::mt19937::result_type> seeds;
  4024b7:	48 8d 84 24 f0 00 00 	lea    0xf0(%rsp),%rax
  4024be:	00 
  4024bf:	48 89 c7             	mov    %rax,%rdi
  4024c2:	e8 9d 32 00 00       	callq  405764 <_ZNSt6vectorImSaImEED1Ev>
  4024c7:	eb 03                	jmp    4024cc <_Z14run_experimentv+0x5b1>
  4024c9:	48 89 c3             	mov    %rax,%rbx
			}


			// now record the result
			data[num_threads-1][workload_index] = mean.mean();
		}
  4024cc:	48 8d 84 24 d0 00 00 	lea    0xd0(%rsp),%rax
  4024d3:	00 
  4024d4:	48 89 c7             	mov    %rax,%rdi
  4024d7:	e8 96 26 00 00       	callq  404b72 <_ZN7barrier8internal19confidence_intervalD1Ev>
  4024dc:	eb 03                	jmp    4024e1 <_Z14run_experimentv+0x5c6>
  4024de:	48 89 c3             	mov    %rax,%rbx
  4024e1:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  4024e6:	48 89 c7             	mov    %rax,%rdi
  4024e9:	e8 96 30 00 00       	callq  405584 <_ZNSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EED1Ev>
  4024ee:	48 89 d8             	mov    %rbx,%rax
  4024f1:	48 89 c7             	mov    %rax,%rdi
  4024f4:	e8 27 f4 ff ff       	callq  401920 <_Unwind_Resume@plt>
	}

	return data;
}
  4024f9:	e8 f2 f2 ff ff       	callq  4017f0 <__stack_chk_fail@plt>
  4024fe:	48 8d 65 d8          	lea    -0x28(%rbp),%rsp
  402502:	5b                   	pop    %rbx
  402503:	41 5c                	pop    %r12
  402505:	41 5d                	pop    %r13
  402507:	41 5e                	pop    %r14
  402509:	41 5f                	pop    %r15
  40250b:	5d                   	pop    %rbp
  40250c:	c3                   	retq   

000000000040250d <_Z18write_data_to_fileSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EESs>:


void write_data_to_file(std::vector<std::vector<std::tuple<double,double,double>>> data, std::string out_file){
  40250d:	55                   	push   %rbp
  40250e:	48 89 e5             	mov    %rsp,%rbp
  402511:	41 55                	push   %r13
  402513:	41 54                	push   %r12
  402515:	53                   	push   %rbx
  402516:	48 81 ec 78 02 00 00 	sub    $0x278,%rsp
  40251d:	48 89 bd 88 fd ff ff 	mov    %rdi,-0x278(%rbp)
  402524:	48 89 b5 80 fd ff ff 	mov    %rsi,-0x280(%rbp)
  40252b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  402532:	00 00 
  402534:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  402538:	31 c0                	xor    %eax,%eax
	std::cout << "Writing data to file " << out_file << std::endl;
  40253a:	be 94 bd 40 00       	mov    $0x40bd94,%esi
  40253f:	bf 60 42 61 00       	mov    $0x614260,%edi
  402544:	e8 d7 f1 ff ff       	callq  401720 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
  402549:	48 8b 95 80 fd ff ff 	mov    -0x280(%rbp),%rdx
  402550:	48 89 d6             	mov    %rdx,%rsi
  402553:	48 89 c7             	mov    %rax,%rdi
  402556:	e8 85 f2 ff ff       	callq  4017e0 <_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKSbIS4_S5_T1_E@plt>
  40255b:	be b0 18 40 00       	mov    $0x4018b0,%esi
  402560:	48 89 c7             	mov    %rax,%rdi
  402563:	e8 08 f3 ff ff       	callq  401870 <_ZNSolsEPFRSoS_E@plt>

	std::ofstream out;
  402568:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
  40256f:	48 89 c7             	mov    %rax,%rdi
  402572:	e8 09 f3 ff ff       	callq  401880 <_ZNSt14basic_ofstreamIcSt11char_traitsIcEEC1Ev@plt>

	out.open(out_file);
  402577:	be 20 00 00 00       	mov    $0x20,%esi
  40257c:	bf 10 00 00 00       	mov    $0x10,%edi
  402581:	e8 f7 15 00 00       	callq  403b7d <_ZStorSt13_Ios_OpenmodeS_>
  402586:	89 c2                	mov    %eax,%edx
  402588:	48 8b 8d 80 fd ff ff 	mov    -0x280(%rbp),%rcx
  40258f:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
  402596:	48 89 ce             	mov    %rcx,%rsi
  402599:	48 89 c7             	mov    %rax,%rdi
  40259c:	e8 0f f1 ff ff       	callq  4016b0 <_ZNSt14basic_ofstreamIcSt11char_traitsIcEE4openERKSsSt13_Ios_Openmode@plt>

	try{
		out << "NumberOfThreads\\Workload 1\t\t10\t\t100\t\t1000\t\t10000\t\t100000\t\t1000000\n";
  4025a1:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
  4025a8:	be b0 bd 40 00       	mov    $0x40bdb0,%esi
  4025ad:	48 89 c7             	mov    %rax,%rdi
  4025b0:	e8 6b f1 ff ff       	callq  401720 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>

		for (auto i = 0; i < data.size(); ++i){
  4025b5:	c7 85 9c fd ff ff 00 	movl   $0x0,-0x264(%rbp)
  4025bc:	00 00 00 
  4025bf:	e9 77 01 00 00       	jmpq   40273b <_Z18write_data_to_fileSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EESs+0x22e>
			out << i+1;
  4025c4:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
  4025ca:	8d 50 01             	lea    0x1(%rax),%edx
  4025cd:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
  4025d4:	89 d6                	mov    %edx,%esi
  4025d6:	48 89 c7             	mov    %rax,%rdi
  4025d9:	e8 52 f0 ff ff       	callq  401630 <_ZNSolsEi@plt>

			for (const auto& m : data[i]){
  4025de:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
  4025e4:	48 63 d0             	movslq %eax,%rdx
  4025e7:	48 8b 85 88 fd ff ff 	mov    -0x278(%rbp),%rax
  4025ee:	48 89 d6             	mov    %rdx,%rsi
  4025f1:	48 89 c7             	mov    %rax,%rdi
  4025f4:	e8 97 30 00 00       	callq  405690 <_ZNSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EEixEm>
  4025f9:	48 89 85 c0 fd ff ff 	mov    %rax,-0x240(%rbp)
  402600:	48 8b 85 c0 fd ff ff 	mov    -0x240(%rbp),%rax
  402607:	48 89 c7             	mov    %rax,%rdi
  40260a:	e8 83 33 00 00       	callq  405992 <_ZNSt6vectorISt5tupleIIdddEESaIS1_EE5beginEv>
  40260f:	48 89 85 a0 fd ff ff 	mov    %rax,-0x260(%rbp)
  402616:	48 8b 85 c0 fd ff ff 	mov    -0x240(%rbp),%rax
  40261d:	48 89 c7             	mov    %rax,%rdi
  402620:	e8 93 33 00 00       	callq  4059b8 <_ZNSt6vectorISt5tupleIIdddEESaIS1_EE3endEv>
  402625:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
  40262c:	e9 ce 00 00 00       	jmpq   4026ff <_Z18write_data_to_fileSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EESs+0x1f2>
  402631:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  402638:	48 89 c7             	mov    %rax,%rdi
  40263b:	e8 fe 33 00 00       	callq  405a3e <_ZNK9__gnu_cxx17__normal_iteratorIPSt5tupleIIdddEESt6vectorIS2_SaIS2_EEEdeEv>
  402640:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
				out << "\t" << std::get<0>(m) << " " << std::get<1>(m) << " " << std::get<2>(m);
  402647:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
  40264e:	48 89 c7             	mov    %rax,%rdi
  402651:	e8 f3 27 00 00       	callq  404e49 <_ZSt3getILm2EIdddEENSt11__add_c_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERKS5_>
  402656:	48 8b 18             	mov    (%rax),%rbx
  402659:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
  402660:	48 89 c7             	mov    %rax,%rdi
  402663:	e8 85 27 00 00       	callq  404ded <_ZSt3getILm1EIdddEENSt11__add_c_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERKS5_>
  402668:	4c 8b 20             	mov    (%rax),%r12
  40266b:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
  402672:	48 89 c7             	mov    %rax,%rdi
  402675:	e8 13 27 00 00       	callq  404d8d <_ZSt3getILm0EIdddEENSt11__add_c_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERKS5_>
  40267a:	4c 8b 28             	mov    (%rax),%r13
  40267d:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
  402684:	be f3 bd 40 00       	mov    $0x40bdf3,%esi
  402689:	48 89 c7             	mov    %rax,%rdi
  40268c:	e8 8f f0 ff ff       	callq  401720 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
  402691:	4c 89 ad 78 fd ff ff 	mov    %r13,-0x288(%rbp)
  402698:	f2 0f 10 85 78 fd ff 	movsd  -0x288(%rbp),%xmm0
  40269f:	ff 
  4026a0:	48 89 c7             	mov    %rax,%rdi
  4026a3:	e8 78 ef ff ff       	callq  401620 <_ZNSolsEd@plt>
  4026a8:	be f5 bd 40 00       	mov    $0x40bdf5,%esi
  4026ad:	48 89 c7             	mov    %rax,%rdi
  4026b0:	e8 6b f0 ff ff       	callq  401720 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
  4026b5:	4c 89 a5 78 fd ff ff 	mov    %r12,-0x288(%rbp)
  4026bc:	f2 0f 10 85 78 fd ff 	movsd  -0x288(%rbp),%xmm0
  4026c3:	ff 
  4026c4:	48 89 c7             	mov    %rax,%rdi
  4026c7:	e8 54 ef ff ff       	callq  401620 <_ZNSolsEd@plt>
  4026cc:	be f5 bd 40 00       	mov    $0x40bdf5,%esi
  4026d1:	48 89 c7             	mov    %rax,%rdi
  4026d4:	e8 47 f0 ff ff       	callq  401720 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
  4026d9:	48 89 9d 78 fd ff ff 	mov    %rbx,-0x288(%rbp)
  4026e0:	f2 0f 10 85 78 fd ff 	movsd  -0x288(%rbp),%xmm0
  4026e7:	ff 
  4026e8:	48 89 c7             	mov    %rax,%rdi
  4026eb:	e8 30 ef ff ff       	callq  401620 <_ZNSolsEd@plt>
		out << "NumberOfThreads\\Workload 1\t\t10\t\t100\t\t1000\t\t10000\t\t100000\t\t1000000\n";

		for (auto i = 0; i < data.size(); ++i){
			out << i+1;

			for (const auto& m : data[i]){
  4026f0:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  4026f7:	48 89 c7             	mov    %rax,%rdi
  4026fa:	e8 1f 33 00 00       	callq  405a1e <_ZN9__gnu_cxx17__normal_iteratorIPSt5tupleIIdddEESt6vectorIS2_SaIS2_EEEppEv>
  4026ff:	48 8d 95 b0 fd ff ff 	lea    -0x250(%rbp),%rdx
  402706:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  40270d:	48 89 d6             	mov    %rdx,%rsi
  402710:	48 89 c7             	mov    %rax,%rdi
  402713:	e8 c9 32 00 00       	callq  4059e1 <_ZN9__gnu_cxxneIPSt5tupleIIdddEESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
  402718:	84 c0                	test   %al,%al
  40271a:	0f 85 11 ff ff ff    	jne    402631 <_Z18write_data_to_fileSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EESs+0x124>
				out << "\t" << std::get<0>(m) << " " << std::get<1>(m) << " " << std::get<2>(m);
			}

			out << "\n";
  402720:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
  402727:	be f7 bd 40 00       	mov    $0x40bdf7,%esi
  40272c:	48 89 c7             	mov    %rax,%rdi
  40272f:	e8 ec ef ff ff       	callq  401720 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
	out.open(out_file);

	try{
		out << "NumberOfThreads\\Workload 1\t\t10\t\t100\t\t1000\t\t10000\t\t100000\t\t1000000\n";

		for (auto i = 0; i < data.size(); ++i){
  402734:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
  40273b:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
  402741:	48 63 d8             	movslq %eax,%rbx
  402744:	48 8b 85 88 fd ff ff 	mov    -0x278(%rbp),%rax
  40274b:	48 89 c7             	mov    %rax,%rdi
  40274e:	e8 05 2f 00 00       	callq  405658 <_ZNKSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EE4sizeEv>
  402753:	48 39 c3             	cmp    %rax,%rbx
  402756:	0f 92 c0             	setb   %al
  402759:	84 c0                	test   %al,%al
  40275b:	0f 85 63 fe ff ff    	jne    4025c4 <_Z18write_data_to_fileSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EESs+0xb7>
			}

			out << "\n";
		}

		std::cout << "Data file was written successfully!" << std::endl;
  402761:	be 00 be 40 00       	mov    $0x40be00,%esi
  402766:	bf 60 42 61 00       	mov    $0x614260,%edi
  40276b:	e8 b0 ef ff ff       	callq  401720 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
  402770:	be b0 18 40 00       	mov    $0x4018b0,%esi
  402775:	48 89 c7             	mov    %rax,%rdi
  402778:	e8 f3 f0 ff ff       	callq  401870 <_ZNSolsEPFRSoS_E@plt>
	}
	catch(...){
		out.close();
		throw;
	}	
  40277d:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
  402784:	48 89 c7             	mov    %rax,%rdi
  402787:	e8 04 f0 ff ff       	callq  401790 <_ZNSt14basic_ofstreamIcSt11char_traitsIcEED1Ev@plt>
}
  40278c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  402790:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  402797:	00 00 
  402799:	74 4a                	je     4027e5 <_Z18write_data_to_fileSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EESs+0x2d8>
  40279b:	eb 43                	jmp    4027e0 <_Z18write_data_to_fileSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EESs+0x2d3>
  40279d:	48 89 c3             	mov    %rax,%rbx
			out << "\n";
		}

		std::cout << "Data file was written successfully!" << std::endl;
	}
	catch(...){
  4027a0:	e8 eb f0 ff ff       	callq  401890 <__cxa_end_catch@plt>
  4027a5:	eb 1f                	jmp    4027c6 <_Z18write_data_to_fileSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EESs+0x2b9>
  4027a7:	48 89 c7             	mov    %rax,%rdi
  4027aa:	e8 21 f1 ff ff       	callq  4018d0 <__cxa_begin_catch@plt>
		out.close();
  4027af:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
  4027b6:	48 89 c7             	mov    %rax,%rdi
  4027b9:	e8 f2 ef ff ff       	callq  4017b0 <_ZNSt14basic_ofstreamIcSt11char_traitsIcEE5closeEv@plt>
		throw;
  4027be:	e8 bd ee ff ff       	callq  401680 <__cxa_rethrow@plt>
  4027c3:	48 89 c3             	mov    %rax,%rbx
	}	
  4027c6:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
  4027cd:	48 89 c7             	mov    %rax,%rdi
  4027d0:	e8 bb ef ff ff       	callq  401790 <_ZNSt14basic_ofstreamIcSt11char_traitsIcEED1Ev@plt>
  4027d5:	48 89 d8             	mov    %rbx,%rax
  4027d8:	48 89 c7             	mov    %rax,%rdi
  4027db:	e8 40 f1 ff ff       	callq  401920 <_Unwind_Resume@plt>
}
  4027e0:	e8 0b f0 ff ff       	callq  4017f0 <__stack_chk_fail@plt>
  4027e5:	48 81 c4 78 02 00 00 	add    $0x278,%rsp
  4027ec:	5b                   	pop    %rbx
  4027ed:	41 5c                	pop    %r12
  4027ef:	41 5d                	pop    %r13
  4027f1:	5d                   	pop    %rbp
  4027f2:	c3                   	retq   

00000000004027f3 <main>:
	}

	exit(1);
}*/

int main(int argc, const char* argv[]){
  4027f3:	55                   	push   %rbp
  4027f4:	48 89 e5             	mov    %rsp,%rbp
  4027f7:	53                   	push   %rbx
  4027f8:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  4027ff:	89 bd 7c ff ff ff    	mov    %edi,-0x84(%rbp)
  402805:	48 89 b5 70 ff ff ff 	mov    %rsi,-0x90(%rbp)
	const std::string centralized_sense_reversing_barrier = "CentralizedSenseReversingBarrier";
  40280c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  402810:	48 89 c7             	mov    %rax,%rdi
  402813:	e8 d8 f0 ff ff       	callq  4018f0 <_ZNSaIcEC1Ev@plt>
  402818:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  40281c:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  402820:	be 28 be 40 00       	mov    $0x40be28,%esi
  402825:	48 89 c7             	mov    %rax,%rdi
  402828:	e8 33 ef ff ff       	callq  401760 <_ZNSsC1EPKcRKSaIcE@plt>
  40282d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  402831:	48 89 c7             	mov    %rax,%rdi
  402834:	e8 e7 ef ff ff       	callq  401820 <_ZNSaIcED1Ev@plt>
	
	std::string out_file = "CentralizedSenseReversingBarrierRelaxed2WithHardwarePrefetching";
  402839:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40283d:	48 89 c7             	mov    %rax,%rdi
  402840:	e8 ab f0 ff ff       	callq  4018f0 <_ZNSaIcEC1Ev@plt>
  402845:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  402849:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  40284d:	be 50 be 40 00       	mov    $0x40be50,%esi
  402852:	48 89 c7             	mov    %rax,%rdi
  402855:	e8 06 ef ff ff       	callq  401760 <_ZNSsC1EPKcRKSaIcE@plt>
  40285a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40285e:	48 89 c7             	mov    %rax,%rdi
  402861:	e8 ba ef ff ff       	callq  401820 <_ZNSaIcED1Ev@plt>

	auto data = run_experiment();
  402866:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40286a:	48 89 c7             	mov    %rax,%rdi
  40286d:	e8 a9 f6 ff ff       	callq  401f1b <_Z14run_experimentv>
	
	write_data_to_file(data, out_file);
  402872:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
  402876:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  40287a:	48 89 d6             	mov    %rdx,%rsi
  40287d:	48 89 c7             	mov    %rax,%rdi
  402880:	e8 3b ee ff ff       	callq  4016c0 <_ZNSsC1ERKSs@plt>
  402885:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
  402889:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40288d:	48 89 d6             	mov    %rdx,%rsi
  402890:	48 89 c7             	mov    %rax,%rdi
  402893:	e8 b8 31 00 00       	callq  405a50 <_ZNSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EEC1ERKS5_>
  402898:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  40289c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4028a0:	48 89 d6             	mov    %rdx,%rsi
  4028a3:	48 89 c7             	mov    %rax,%rdi
  4028a6:	e8 62 fc ff ff       	callq  40250d <_Z18write_data_to_fileSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EESs>
  4028ab:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4028af:	48 89 c7             	mov    %rax,%rdi
  4028b2:	e8 cd 2c 00 00       	callq  405584 <_ZNSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EED1Ev>
  4028b7:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  4028bb:	48 89 c7             	mov    %rax,%rdi
  4028be:	e8 6d ee ff ff       	callq  401730 <_ZNSsD1Ev@plt>
	
	return (0);
  4028c3:	bb 00 00 00 00       	mov    $0x0,%ebx
int main(int argc, const char* argv[]){
	const std::string centralized_sense_reversing_barrier = "CentralizedSenseReversingBarrier";
	
	std::string out_file = "CentralizedSenseReversingBarrierRelaxed2WithHardwarePrefetching";

	auto data = run_experiment();
  4028c8:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  4028cc:	48 89 c7             	mov    %rax,%rdi
  4028cf:	e8 b0 2c 00 00       	callq  405584 <_ZNSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EED1Ev>
}*/

int main(int argc, const char* argv[]){
	const std::string centralized_sense_reversing_barrier = "CentralizedSenseReversingBarrier";
	
	std::string out_file = "CentralizedSenseReversingBarrierRelaxed2WithHardwarePrefetching";
  4028d4:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  4028d8:	48 89 c7             	mov    %rax,%rdi
  4028db:	e8 50 ee ff ff       	callq  401730 <_ZNSsD1Ev@plt>

	auto data = run_experiment();
	
	write_data_to_file(data, out_file);
	
	return (0);
  4028e0:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  4028e4:	48 89 c7             	mov    %rax,%rdi
  4028e7:	e8 44 ee ff ff       	callq  401730 <_ZNSsD1Ev@plt>
  4028ec:	89 d8                	mov    %ebx,%eax
  4028ee:	e9 84 00 00 00       	jmpq   402977 <main+0x184>
  4028f3:	48 89 c3             	mov    %rax,%rbx
  4028f6:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4028fa:	48 89 c7             	mov    %rax,%rdi
  4028fd:	e8 1e ef ff ff       	callq  401820 <_ZNSaIcED1Ev@plt>
  402902:	48 89 d8             	mov    %rbx,%rax
  402905:	48 89 c7             	mov    %rax,%rdi
  402908:	e8 13 f0 ff ff       	callq  401920 <_Unwind_Resume@plt>
  40290d:	48 89 c3             	mov    %rax,%rbx
  402910:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  402914:	48 89 c7             	mov    %rax,%rdi
  402917:	e8 04 ef ff ff       	callq  401820 <_ZNSaIcED1Ev@plt>
  40291c:	eb 42                	jmp    402960 <main+0x16d>
  40291e:	48 89 c3             	mov    %rax,%rbx
	
	std::string out_file = "CentralizedSenseReversingBarrierRelaxed2WithHardwarePrefetching";

	auto data = run_experiment();
	
	write_data_to_file(data, out_file);
  402921:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  402925:	48 89 c7             	mov    %rax,%rdi
  402928:	e8 57 2c 00 00       	callq  405584 <_ZNSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EED1Ev>
  40292d:	eb 03                	jmp    402932 <main+0x13f>
  40292f:	48 89 c3             	mov    %rax,%rbx
  402932:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  402936:	48 89 c7             	mov    %rax,%rdi
  402939:	e8 f2 ed ff ff       	callq  401730 <_ZNSsD1Ev@plt>
  40293e:	eb 03                	jmp    402943 <main+0x150>
  402940:	48 89 c3             	mov    %rax,%rbx
int main(int argc, const char* argv[]){
	const std::string centralized_sense_reversing_barrier = "CentralizedSenseReversingBarrier";
	
	std::string out_file = "CentralizedSenseReversingBarrierRelaxed2WithHardwarePrefetching";

	auto data = run_experiment();
  402943:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  402947:	48 89 c7             	mov    %rax,%rdi
  40294a:	e8 35 2c 00 00       	callq  405584 <_ZNSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EED1Ev>
  40294f:	eb 03                	jmp    402954 <main+0x161>
  402951:	48 89 c3             	mov    %rax,%rbx
}*/

int main(int argc, const char* argv[]){
	const std::string centralized_sense_reversing_barrier = "CentralizedSenseReversingBarrier";
	
	std::string out_file = "CentralizedSenseReversingBarrierRelaxed2WithHardwarePrefetching";
  402954:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  402958:	48 89 c7             	mov    %rax,%rdi
  40295b:	e8 d0 ed ff ff       	callq  401730 <_ZNSsD1Ev@plt>

	auto data = run_experiment();
	
	write_data_to_file(data, out_file);
	
	return (0);
  402960:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  402964:	48 89 c7             	mov    %rax,%rdi
  402967:	e8 c4 ed ff ff       	callq  401730 <_ZNSsD1Ev@plt>
  40296c:	48 89 d8             	mov    %rbx,%rax
  40296f:	48 89 c7             	mov    %rax,%rdi
  402972:	e8 a9 ef ff ff       	callq  401920 <_Unwind_Resume@plt>
}
  402977:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  40297e:	5b                   	pop    %rbx
  40297f:	5d                   	pop    %rbp
  402980:	c3                   	retq   

0000000000402981 <_ZSt7forwardIRZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_EOT_RNSt16remove_referenceIS8_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  402981:	55                   	push   %rbp
  402982:	48 89 e5             	mov    %rsp,%rbp
  402985:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  402989:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40298d:	5d                   	pop    %rbp
  40298e:	c3                   	retq   
  40298f:	90                   	nop

0000000000402990 <_ZNSt12__shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEELN9__gnu_cxx12_Lock_policyE2EED2Ev>:
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
  402990:	55                   	push   %rbp
  402991:	48 89 e5             	mov    %rsp,%rbp
  402994:	48 83 ec 10          	sub    $0x10,%rsp
  402998:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40299c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4029a0:	48 83 c0 08          	add    $0x8,%rax
  4029a4:	48 89 c7             	mov    %rax,%rdi
  4029a7:	e8 16 25 00 00       	callq  404ec2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EED1Ev>
  4029ac:	c9                   	leaveq 
  4029ad:	c3                   	retq   

00000000004029ae <_ZNSt10shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEEED1Ev>:
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
  4029ae:	55                   	push   %rbp
  4029af:	48 89 e5             	mov    %rsp,%rbp
  4029b2:	48 83 ec 10          	sub    $0x10,%rsp
  4029b6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4029ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4029be:	48 89 c7             	mov    %rax,%rdi
  4029c1:	e8 ca ff ff ff       	callq  402990 <_ZNSt12__shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEELN9__gnu_cxx12_Lock_policyE2EED2Ev>
  4029c6:	c9                   	leaveq 
  4029c7:	c3                   	retq   

00000000004029c8 <_ZNSt6threadC1IRZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_ISt17reference_wrapperIS2_ERKmRmS9_IS5_EEEEOT_DpOT0_>:
    thread(thread&& __t) noexcept
    { swap(__t); }

    template<typename _Callable, typename... _Args>
      explicit 
      thread(_Callable&& __f, _Args&&... __args)
  4029c8:	55                   	push   %rbp
  4029c9:	48 89 e5             	mov    %rsp,%rbp
  4029cc:	41 56                	push   %r14
  4029ce:	41 55                	push   %r13
  4029d0:	41 54                	push   %r12
  4029d2:	53                   	push   %rbx
  4029d3:	48 83 ec 70          	sub    $0x70,%rsp
  4029d7:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  4029db:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  4029df:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  4029e3:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
  4029e7:	4c 89 85 78 ff ff ff 	mov    %r8,-0x88(%rbp)
  4029ee:	4c 89 8d 70 ff ff ff 	mov    %r9,-0x90(%rbp)
      {
  4029f5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4029f9:	48 89 c7             	mov    %rax,%rdi
  4029fc:	e8 21 12 00 00       	callq  403c22 <_ZNSt6thread2idC1Ev>
        _M_start_thread(_M_make_routine(std::__bind_simple(
                std::forward<_Callable>(__f),
                std::forward<_Args>(__args)...)));
  402a01:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  402a08:	48 89 c7             	mov    %rax,%rdi
  402a0b:	e8 07 2f 00 00       	callq  405917 <_ZSt7forwardISt17reference_wrapperISt6atomicIbEEEOT_RNSt16remove_referenceIS4_E4typeE>
  402a10:	49 89 c6             	mov    %rax,%r14
  402a13:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  402a1a:	48 89 c7             	mov    %rax,%rdi
  402a1d:	e8 e7 2e 00 00       	callq  405909 <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
  402a22:	49 89 c5             	mov    %rax,%r13
  402a25:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  402a29:	48 89 c7             	mov    %rax,%rdi
  402a2c:	e8 ca 2e 00 00       	callq  4058fb <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
  402a31:	49 89 c4             	mov    %rax,%r12
  402a34:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  402a38:	48 89 c7             	mov    %rax,%rdi
  402a3b:	e8 ad 2e 00 00       	callq  4058ed <_ZSt7forwardISt17reference_wrapperIN7barrier35centralized_sense_reversing_barrierEEEOT_RNSt16remove_referenceIS4_E4typeE>
  402a40:	48 89 c3             	mov    %rax,%rbx
    template<typename _Callable, typename... _Args>
      explicit 
      thread(_Callable&& __f, _Args&&... __args)
      {
        _M_start_thread(_M_make_routine(std::__bind_simple(
                std::forward<_Callable>(__f),
  402a43:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  402a47:	48 89 c7             	mov    %rax,%rdi
  402a4a:	e8 32 ff ff ff       	callq  402981 <_ZSt7forwardIRZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_EOT_RNSt16remove_referenceIS8_E4typeE>
  402a4f:	48 89 c6             	mov    %rax,%rsi

    template<typename _Callable, typename... _Args>
      explicit 
      thread(_Callable&& __f, _Args&&... __args)
      {
        _M_start_thread(_M_make_routine(std::__bind_simple(
  402a52:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  402a56:	4d 89 f1             	mov    %r14,%r9
  402a59:	4d 89 e8             	mov    %r13,%r8
  402a5c:	4c 89 e1             	mov    %r12,%rcx
  402a5f:	48 89 da             	mov    %rbx,%rdx
  402a62:	48 89 c7             	mov    %rax,%rdi
  402a65:	e8 95 01 00 00       	callq  402bff <_ZSt13__bind_simpleIRZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_ISt17reference_wrapperIS1_ERKmRmS8_IS4_EEENSt19_Bind_simple_helperIT_IDpT0_EE6__typeEOSF_DpOSG_>
  402a6a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  402a6e:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  402a72:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
  402a76:	48 89 ce             	mov    %rcx,%rsi
  402a79:	48 89 c7             	mov    %rax,%rdi
  402a7c:	e8 2f 02 00 00       	callq  402cb0 <_ZNSt6thread15_M_make_routineISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS3_EmmS9_IS6_EEEEESt10shared_ptrINS_5_ImplIT_EEEOSG_>
  402a81:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
  402a85:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  402a89:	48 89 d6             	mov    %rdx,%rsi
  402a8c:	48 89 c7             	mov    %rax,%rdi
  402a8f:	e8 62 02 00 00       	callq  402cf6 <_ZNSt10shared_ptrINSt6thread10_Impl_baseEEC1INS0_5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS7_EmmSD_ISA_EEEEEvEEOS_IT_E>
  402a94:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  402a98:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  402a9c:	48 89 d6             	mov    %rdx,%rsi
  402a9f:	48 89 c7             	mov    %rax,%rdi
  402aa2:	e8 49 ec ff ff       	callq  4016f0 <_ZNSt6thread15_M_start_threadESt10shared_ptrINS_10_Impl_baseEE@plt>
  402aa7:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  402aab:	48 89 c7             	mov    %rax,%rdi
  402aae:	e8 8b 12 00 00       	callq  403d3e <_ZNSt10shared_ptrINSt6thread10_Impl_baseEED1Ev>
  402ab3:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  402ab7:	48 89 c7             	mov    %rax,%rdi
  402aba:	e8 ef fe ff ff       	callq  4029ae <_ZNSt10shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEEED1Ev>
  402abf:	eb 26                	jmp    402ae7 <_ZNSt6threadC1IRZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_ISt17reference_wrapperIS2_ERKmRmS9_IS5_EEEEOT_DpOT0_+0x11f>
  402ac1:	48 89 c3             	mov    %rax,%rbx
  402ac4:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  402ac8:	48 89 c7             	mov    %rax,%rdi
  402acb:	e8 6e 12 00 00       	callq  403d3e <_ZNSt10shared_ptrINSt6thread10_Impl_baseEED1Ev>
  402ad0:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  402ad4:	48 89 c7             	mov    %rax,%rdi
  402ad7:	e8 d2 fe ff ff       	callq  4029ae <_ZNSt10shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEEED1Ev>
  402adc:	48 89 d8             	mov    %rbx,%rax
  402adf:	48 89 c7             	mov    %rax,%rdi
  402ae2:	e8 39 ee ff ff       	callq  401920 <_Unwind_Resume@plt>
                std::forward<_Callable>(__f),
                std::forward<_Args>(__args)...)));
      }
  402ae7:	48 83 c4 70          	add    $0x70,%rsp
  402aeb:	5b                   	pop    %rbx
  402aec:	41 5c                	pop    %r12
  402aee:	41 5d                	pop    %r13
  402af0:	41 5e                	pop    %r14
  402af2:	5d                   	pop    %rbp
  402af3:	c3                   	retq   

0000000000402af4 <_ZNSt11_Tuple_implILm0EIZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS1_EmmS7_IS4_EEE7_M_tailERSA_>:

      static constexpr const _Head&
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr _Inherited&
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
  402af4:	55                   	push   %rbp
  402af5:	48 89 e5             	mov    %rsp,%rbp
  402af8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402afc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402b00:	5d                   	pop    %rbp
  402b01:	c3                   	retq   

0000000000402b02 <_ZNSt10_Head_baseILm0EZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_Lb1EE7_M_headERS7_>:
      template<typename _Alloc, typename _UHead>
	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
	: _Head(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b; }
  402b02:	55                   	push   %rbp
  402b03:	48 89 e5             	mov    %rsp,%rbp
  402b06:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402b0a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402b0e:	5d                   	pop    %rbp
  402b0f:	c3                   	retq   

0000000000402b10 <_ZNSt11_Tuple_implILm0EIZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS1_EmmS7_IS4_EEE7_M_headERSA_>:

      typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
      typedef _Head_base<_Idx, _Head, __empty_not_final<_Head>::value> _Base;

      static constexpr _Head&  
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
  402b10:	55                   	push   %rbp
  402b11:	48 89 e5             	mov    %rsp,%rbp
  402b14:	48 83 ec 08          	sub    $0x8,%rsp
  402b18:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402b1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402b20:	48 89 c7             	mov    %rax,%rdi
  402b23:	e8 da ff ff ff       	callq  402b02 <_ZNSt10_Head_baseILm0EZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_Lb1EE7_M_headERS7_>
  402b28:	c9                   	leaveq 
  402b29:	c3                   	retq   

0000000000402b2a <_ZSt7forwardIZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_EOT_RNSt16remove_referenceIS7_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  402b2a:	55                   	push   %rbp
  402b2b:	48 89 e5             	mov    %rsp,%rbp
  402b2e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  402b32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402b36:	5d                   	pop    %rbp
  402b37:	c3                   	retq   

0000000000402b38 <_ZNSt10_Head_baseILm0EZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_Lb1EEC2IS6_vEEOT_>:
      : _Head(__h) { }

      template<typename _UHead, typename = typename
	       enable_if<!is_convertible<_UHead,
	                                 __uses_alloc_base>::value>::type>
        constexpr _Head_base(_UHead&& __h)
  402b38:	55                   	push   %rbp
  402b39:	48 89 e5             	mov    %rsp,%rbp
  402b3c:	48 83 ec 10          	sub    $0x10,%rsp
  402b40:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402b44:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Head(std::forward<_UHead>(__h)) { }
  402b48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  402b4c:	48 89 c7             	mov    %rax,%rdi
  402b4f:	e8 d6 ff ff ff       	callq  402b2a <_ZSt7forwardIZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_EOT_RNSt16remove_referenceIS7_E4typeE>
  402b54:	c9                   	leaveq 
  402b55:	c3                   	retq   

0000000000402b56 <_ZNSt11_Tuple_implILm0EIZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS1_EmmS7_IS4_EEEC2EOSA_>:
	  _Base(std::forward<_UHead>(__head)) { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;

      constexpr
      _Tuple_impl(_Tuple_impl&& __in)
  402b56:	55                   	push   %rbp
  402b57:	48 89 e5             	mov    %rsp,%rbp
  402b5a:	48 83 ec 10          	sub    $0x10,%rsp
  402b5e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402b62:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      noexcept(__and_<is_nothrow_move_constructible<_Head>,
	              is_nothrow_move_constructible<_Inherited>>::value)
      : _Inherited(std::move(_M_tail(__in))), 
  402b66:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  402b6a:	48 89 c7             	mov    %rax,%rdi
  402b6d:	e8 82 ff ff ff       	callq  402af4 <_ZNSt11_Tuple_implILm0EIZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS1_EmmS7_IS4_EEE7_M_tailERSA_>
  402b72:	48 89 c7             	mov    %rax,%rdi
  402b75:	e8 1d 4a 00 00       	callq  407597 <_ZSt4moveIRSt11_Tuple_implILm1EISt17reference_wrapperIN7barrier35centralized_sense_reversing_barrierEEmmS1_ISt6atomicIbEEEEEONSt16remove_referenceIT_E4typeEOSB_>
  402b7a:	48 89 c2             	mov    %rax,%rdx
	_Base(std::forward<_Head>(_M_head(__in))) { }
  402b7d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402b81:	48 89 d6             	mov    %rdx,%rsi
  402b84:	48 89 c7             	mov    %rax,%rdi
  402b87:	e8 ac 49 00 00       	callq  407538 <_ZNSt11_Tuple_implILm1EISt17reference_wrapperIN7barrier35centralized_sense_reversing_barrierEEmmS0_ISt6atomicIbEEEEC1EOS7_>
  402b8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  402b90:	48 89 c7             	mov    %rax,%rdi
  402b93:	e8 78 ff ff ff       	callq  402b10 <_ZNSt11_Tuple_implILm0EIZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS1_EmmS7_IS4_EEE7_M_headERSA_>
  402b98:	48 89 c7             	mov    %rax,%rdi
  402b9b:	e8 8a ff ff ff       	callq  402b2a <_ZSt7forwardIZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_EOT_RNSt16remove_referenceIS7_E4typeE>
  402ba0:	48 89 c2             	mov    %rax,%rdx
  402ba3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402ba7:	48 89 d6             	mov    %rdx,%rsi
  402baa:	48 89 c7             	mov    %rax,%rdi
  402bad:	e8 86 ff ff ff       	callq  402b38 <_ZNSt10_Head_baseILm0EZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_Lb1EEC2IS6_vEEOT_>
  402bb2:	c9                   	leaveq 
  402bb3:	c3                   	retq   

0000000000402bb4 <_ZNSt5tupleIIZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS1_EmmS7_IS4_EEEC1EOSA_>:
        constexpr tuple(_UElements&&... __elements)
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default; 
  402bb4:	55                   	push   %rbp
  402bb5:	48 89 e5             	mov    %rsp,%rbp
  402bb8:	48 83 ec 10          	sub    $0x10,%rsp
  402bbc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402bc0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  402bc4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  402bc8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402bcc:	48 89 d6             	mov    %rdx,%rsi
  402bcf:	48 89 c7             	mov    %rax,%rdi
  402bd2:	e8 7f ff ff ff       	callq  402b56 <_ZNSt11_Tuple_implILm0EIZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS1_EmmS7_IS4_EEEC2EOSA_>
  402bd7:	c9                   	leaveq 
  402bd8:	c3                   	retq   
  402bd9:	90                   	nop

0000000000402bda <_ZNSt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS1_EmmS7_IS4_EEEC1EOSB_>:
        _Bind_simple(_Callable&& __callable, _Args2&&... __args)
        : _M_bound(std::move(__callable), std::forward<_Args2>(__args)...)
        { }

      _Bind_simple(const _Bind_simple&) = default;
      _Bind_simple(_Bind_simple&&) = default;
  402bda:	55                   	push   %rbp
  402bdb:	48 89 e5             	mov    %rsp,%rbp
  402bde:	48 83 ec 10          	sub    $0x10,%rsp
  402be2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402be6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  402bea:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  402bee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402bf2:	48 89 d6             	mov    %rdx,%rsi
  402bf5:	48 89 c7             	mov    %rax,%rdi
  402bf8:	e8 b7 ff ff ff       	callq  402bb4 <_ZNSt5tupleIIZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS1_EmmS7_IS4_EEEC1EOSA_>
  402bfd:	c9                   	leaveq 
  402bfe:	c3                   	retq   

0000000000402bff <_ZSt13__bind_simpleIRZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_ISt17reference_wrapperIS1_ERKmRmS8_IS4_EEENSt19_Bind_simple_helperIT_IDpT0_EE6__typeEOSF_DpOSG_>:

  // Simplified version of std::bind for internal use, without support for
  // unbound arguments, placeholders or nested bind expressions.
  template<typename _Callable, typename... _Args>
    typename _Bind_simple_helper<_Callable, _Args...>::__type
    __bind_simple(_Callable&& __callable, _Args&&... __args)
  402bff:	55                   	push   %rbp
  402c00:	48 89 e5             	mov    %rsp,%rbp
  402c03:	41 56                	push   %r14
  402c05:	41 55                	push   %r13
  402c07:	41 54                	push   %r12
  402c09:	53                   	push   %rbx
  402c0a:	48 83 ec 30          	sub    $0x30,%rsp
  402c0e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  402c12:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  402c16:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  402c1a:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  402c1e:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
  402c22:	4c 89 4d b0          	mov    %r9,-0x50(%rbp)
      typedef _Bind_simple_helper<_Callable, _Args...> __helper_type;
      typedef typename __helper_type::__maybe_type __maybe_type;
      typedef typename __helper_type::__type __result_type;
      return __result_type(
          __maybe_type::__do_wrap( std::forward<_Callable>(__callable)),
          std::forward<_Args>(__args)...);
  402c26:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  402c2a:	48 89 c7             	mov    %rax,%rdi
  402c2d:	e8 e5 2c 00 00       	callq  405917 <_ZSt7forwardISt17reference_wrapperISt6atomicIbEEEOT_RNSt16remove_referenceIS4_E4typeE>
  402c32:	49 89 c6             	mov    %rax,%r14
  402c35:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  402c39:	48 89 c7             	mov    %rax,%rdi
  402c3c:	e8 c8 2c 00 00       	callq  405909 <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
  402c41:	49 89 c5             	mov    %rax,%r13
  402c44:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  402c48:	48 89 c7             	mov    %rax,%rdi
  402c4b:	e8 ab 2c 00 00       	callq  4058fb <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
  402c50:	49 89 c4             	mov    %rax,%r12
  402c53:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  402c57:	48 89 c7             	mov    %rax,%rdi
  402c5a:	e8 8e 2c 00 00       	callq  4058ed <_ZSt7forwardISt17reference_wrapperIN7barrier35centralized_sense_reversing_barrierEEEOT_RNSt16remove_referenceIS4_E4typeE>
  402c5f:	48 89 c3             	mov    %rax,%rbx
    {
      typedef _Bind_simple_helper<_Callable, _Args...> __helper_type;
      typedef typename __helper_type::__maybe_type __maybe_type;
      typedef typename __helper_type::__type __result_type;
      return __result_type(
          __maybe_type::__do_wrap( std::forward<_Callable>(__callable)),
  402c62:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  402c66:	48 89 c7             	mov    %rax,%rdi
  402c69:	e8 13 fd ff ff       	callq  402981 <_ZSt7forwardIRZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_EOT_RNSt16remove_referenceIS8_E4typeE>
  402c6e:	48 89 c7             	mov    %rax,%rdi
  402c71:	e8 b0 00 00 00       	callq  402d26 <_ZNSt26_Maybe_wrap_member_pointerIZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_E9__do_wrapERKS6_>
  402c76:	48 89 c6             	mov    %rax,%rsi
          std::forward<_Args>(__args)...);
  402c79:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  402c7d:	4d 89 f1             	mov    %r14,%r9
  402c80:	4d 89 e8             	mov    %r13,%r8
  402c83:	4c 89 e1             	mov    %r12,%rcx
  402c86:	48 89 da             	mov    %rbx,%rdx
  402c89:	48 89 c7             	mov    %rax,%rdi
  402c8c:	e8 f7 01 00 00       	callq  402e88 <_ZNSt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS1_EmmS7_IS4_EEEC1IIS8_RKmRmS9_EvEERKS6_DpOT_>
    }
  402c91:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  402c95:	48 83 c4 30          	add    $0x30,%rsp
  402c99:	5b                   	pop    %rbx
  402c9a:	41 5c                	pop    %r12
  402c9c:	41 5d                	pop    %r13
  402c9e:	41 5e                	pop    %r14
  402ca0:	5d                   	pop    %rbp
  402ca1:	c3                   	retq   

0000000000402ca2 <_ZSt7forwardISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS2_EmmS8_IS5_EEEEOT_RNSt16remove_referenceISD_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  402ca2:	55                   	push   %rbp
  402ca3:	48 89 e5             	mov    %rsp,%rbp
  402ca6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  402caa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402cae:	5d                   	pop    %rbp
  402caf:	c3                   	retq   

0000000000402cb0 <_ZNSt6thread15_M_make_routineISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS3_EmmS9_IS6_EEEEESt10shared_ptrINS_5_ImplIT_EEEOSG_>:
    void
    _M_start_thread(__shared_base_type);

    template<typename _Callable>
      shared_ptr<_Impl<_Callable>>
      _M_make_routine(_Callable&& __f)
  402cb0:	55                   	push   %rbp
  402cb1:	48 89 e5             	mov    %rsp,%rbp
  402cb4:	48 83 ec 20          	sub    $0x20,%rsp
  402cb8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402cbc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  402cc0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      {
	// Create and allocate full data structure, not base.
	return std::make_shared<_Impl<_Callable>>(std::forward<_Callable>(__f));
  402cc4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402cc8:	48 89 c7             	mov    %rax,%rdi
  402ccb:	e8 d2 ff ff ff       	callq  402ca2 <_ZSt7forwardISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS2_EmmS8_IS5_EEEEOT_RNSt16remove_referenceISD_E4typeE>
  402cd0:	48 89 c2             	mov    %rax,%rdx
  402cd3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402cd7:	48 89 d6             	mov    %rdx,%rsi
  402cda:	48 89 c7             	mov    %rax,%rdi
  402cdd:	e8 2b 02 00 00       	callq  402f0d <_ZSt11make_sharedINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEEISE_EESt10shared_ptrIT_EDpOT0_>
      }
  402ce2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402ce6:	c9                   	leaveq 
  402ce7:	c3                   	retq   

0000000000402ce8 <_ZSt4moveIRSt10shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS5_EmmSB_IS8_EEEEEEEONSt16remove_referenceIT_E4typeEOSK_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
  402ce8:	55                   	push   %rbp
  402ce9:	48 89 e5             	mov    %rsp,%rbp
  402cec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  402cf0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402cf4:	5d                   	pop    %rbp
  402cf5:	c3                   	retq   

0000000000402cf6 <_ZNSt10shared_ptrINSt6thread10_Impl_baseEEC1INS0_5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS7_EmmSD_ISA_EEEEEvEEOS_IT_E>:
       *  @param  __r  A %shared_ptr rvalue.
       *  @post   *this contains the old value of @a __r, @a __r is empty.
       */
      template<typename _Tp1, typename = typename
	       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>
	shared_ptr(shared_ptr<_Tp1>&& __r) noexcept
  402cf6:	55                   	push   %rbp
  402cf7:	48 89 e5             	mov    %rsp,%rbp
  402cfa:	48 83 ec 10          	sub    $0x10,%rsp
  402cfe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402d02:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: __shared_ptr<_Tp>(std::move(__r)) { }
  402d06:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  402d0a:	48 89 c7             	mov    %rax,%rdi
  402d0d:	e8 d6 ff ff ff       	callq  402ce8 <_ZSt4moveIRSt10shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS5_EmmSB_IS8_EEEEEEEONSt16remove_referenceIT_E4typeEOSK_>
  402d12:	48 89 c2             	mov    %rax,%rdx
  402d15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402d19:	48 89 d6             	mov    %rdx,%rsi
  402d1c:	48 89 c7             	mov    %rax,%rdi
  402d1f:	e8 5e 02 00 00       	callq  402f82 <_ZNSt12__shared_ptrINSt6thread10_Impl_baseELN9__gnu_cxx12_Lock_policyE2EEC2INS0_5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS9_EmmSF_ISC_EEEEEvEEOS_IT_LS3_2EE>
  402d24:	c9                   	leaveq 
  402d25:	c3                   	retq   

0000000000402d26 <_ZNSt26_Maybe_wrap_member_pointerIZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_E9__do_wrapERKS6_>:
    struct _Maybe_wrap_member_pointer
    {
      typedef _Tp type;

      static const _Tp&
      __do_wrap(const _Tp& __x)
  402d26:	55                   	push   %rbp
  402d27:	48 89 e5             	mov    %rsp,%rbp
  402d2a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return __x; }
  402d2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402d32:	5d                   	pop    %rbp
  402d33:	c3                   	retq   

0000000000402d34 <_ZSt7forwardIRKZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_EOT_RNSt16remove_referenceIS9_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  402d34:	55                   	push   %rbp
  402d35:	48 89 e5             	mov    %rsp,%rbp
  402d38:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  402d3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402d40:	5d                   	pop    %rbp
  402d41:	c3                   	retq   

0000000000402d42 <_ZNSt10_Head_baseILm0EZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_Lb1EEC2ERKS6_>:
    : public _Head
    {
      constexpr _Head_base()
      : _Head() { }

      constexpr _Head_base(const _Head& __h)
  402d42:	55                   	push   %rbp
  402d43:	48 89 e5             	mov    %rsp,%rbp
  402d46:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402d4a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _Head(__h) { }
  402d4e:	5d                   	pop    %rbp
  402d4f:	c3                   	retq   

0000000000402d50 <_ZNSt11_Tuple_implILm0EIZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS1_EmmS7_IS4_EEEC2IRKS6_IS8_RKmRmS9_EvEEOT_DpOT0_>:
      : _Inherited(__tail...), _Base(__head) { }

      template<typename _UHead, typename... _UTail, typename = typename
               enable_if<sizeof...(_Tail) == sizeof...(_UTail)>::type> 
        explicit
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
  402d50:	55                   	push   %rbp
  402d51:	48 89 e5             	mov    %rsp,%rbp
  402d54:	41 55                	push   %r13
  402d56:	41 54                	push   %r12
  402d58:	53                   	push   %rbx
  402d59:	48 83 ec 38          	sub    $0x38,%rsp
  402d5d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  402d61:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  402d65:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  402d69:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  402d6d:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
  402d71:	4c 89 4d b0          	mov    %r9,-0x50(%rbp)
	: _Inherited(std::forward<_UTail>(__tail)...),
  402d75:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  402d79:	48 89 c7             	mov    %rax,%rdi
  402d7c:	e8 96 2b 00 00       	callq  405917 <_ZSt7forwardISt17reference_wrapperISt6atomicIbEEEOT_RNSt16remove_referenceIS4_E4typeE>
  402d81:	49 89 c5             	mov    %rax,%r13
  402d84:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  402d88:	48 89 c7             	mov    %rax,%rdi
  402d8b:	e8 79 2b 00 00       	callq  405909 <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
  402d90:	49 89 c4             	mov    %rax,%r12
  402d93:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  402d97:	48 89 c7             	mov    %rax,%rdi
  402d9a:	e8 5c 2b 00 00       	callq  4058fb <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
  402d9f:	48 89 c3             	mov    %rax,%rbx
  402da2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  402da6:	48 89 c7             	mov    %rax,%rdi
  402da9:	e8 3f 2b 00 00       	callq  4058ed <_ZSt7forwardISt17reference_wrapperIN7barrier35centralized_sense_reversing_barrierEEEOT_RNSt16remove_referenceIS4_E4typeE>
  402dae:	48 89 c6             	mov    %rax,%rsi
	  _Base(std::forward<_UHead>(__head)) { }
  402db1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  402db5:	4d 89 e8             	mov    %r13,%r8
  402db8:	4c 89 e1             	mov    %r12,%rcx
  402dbb:	48 89 da             	mov    %rbx,%rdx
  402dbe:	48 89 c7             	mov    %rax,%rdi
  402dc1:	e8 7c 5a 00 00       	callq  408842 <_ZNSt11_Tuple_implILm1EISt17reference_wrapperIN7barrier35centralized_sense_reversing_barrierEEmmS0_ISt6atomicIbEEEEC1IS3_IRKmRmS6_EvEEOT_DpOT0_>
  402dc6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  402dca:	48 89 c7             	mov    %rax,%rdi
  402dcd:	e8 62 ff ff ff       	callq  402d34 <_ZSt7forwardIRKZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_EOT_RNSt16remove_referenceIS9_E4typeE>
  402dd2:	48 89 c2             	mov    %rax,%rdx
  402dd5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  402dd9:	48 89 d6             	mov    %rdx,%rsi
  402ddc:	48 89 c7             	mov    %rax,%rdi
  402ddf:	e8 5e ff ff ff       	callq  402d42 <_ZNSt10_Head_baseILm0EZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_Lb1EEC2ERKS6_>
  402de4:	48 83 c4 38          	add    $0x38,%rsp
  402de8:	5b                   	pop    %rbx
  402de9:	41 5c                	pop    %r12
  402deb:	41 5d                	pop    %r13
  402ded:	5d                   	pop    %rbp
  402dee:	c3                   	retq   
  402def:	90                   	nop

0000000000402df0 <_ZNSt5tupleIIZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS1_EmmS7_IS4_EEEC1IIRKS6_S8_RKmRmS9_EvEEDpOT_>:

      template<typename... _UElements, typename = typename
        enable_if<__and_<is_convertible<_UElements,
					_Elements>...>::value>::type>
	explicit
        constexpr tuple(_UElements&&... __elements)
  402df0:	55                   	push   %rbp
  402df1:	48 89 e5             	mov    %rsp,%rbp
  402df4:	41 56                	push   %r14
  402df6:	41 55                	push   %r13
  402df8:	41 54                	push   %r12
  402dfa:	53                   	push   %rbx
  402dfb:	48 83 ec 30          	sub    $0x30,%rsp
  402dff:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  402e03:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  402e07:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  402e0b:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  402e0f:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
  402e13:	4c 89 4d b0          	mov    %r9,-0x50(%rbp)
	: _Inherited(std::forward<_UElements>(__elements)...) {	}
  402e17:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  402e1b:	48 89 c7             	mov    %rax,%rdi
  402e1e:	e8 f4 2a 00 00       	callq  405917 <_ZSt7forwardISt17reference_wrapperISt6atomicIbEEEOT_RNSt16remove_referenceIS4_E4typeE>
  402e23:	49 89 c6             	mov    %rax,%r14
  402e26:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  402e2a:	48 89 c7             	mov    %rax,%rdi
  402e2d:	e8 d7 2a 00 00       	callq  405909 <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
  402e32:	49 89 c5             	mov    %rax,%r13
  402e35:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  402e39:	48 89 c7             	mov    %rax,%rdi
  402e3c:	e8 ba 2a 00 00       	callq  4058fb <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
  402e41:	49 89 c4             	mov    %rax,%r12
  402e44:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  402e48:	48 89 c7             	mov    %rax,%rdi
  402e4b:	e8 9d 2a 00 00       	callq  4058ed <_ZSt7forwardISt17reference_wrapperIN7barrier35centralized_sense_reversing_barrierEEEOT_RNSt16remove_referenceIS4_E4typeE>
  402e50:	48 89 c3             	mov    %rax,%rbx
  402e53:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  402e57:	48 89 c7             	mov    %rax,%rdi
  402e5a:	e8 d5 fe ff ff       	callq  402d34 <_ZSt7forwardIRKZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_EOT_RNSt16remove_referenceIS9_E4typeE>
  402e5f:	48 89 c6             	mov    %rax,%rsi
  402e62:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  402e66:	4d 89 f1             	mov    %r14,%r9
  402e69:	4d 89 e8             	mov    %r13,%r8
  402e6c:	4c 89 e1             	mov    %r12,%rcx
  402e6f:	48 89 da             	mov    %rbx,%rdx
  402e72:	48 89 c7             	mov    %rax,%rdi
  402e75:	e8 d6 fe ff ff       	callq  402d50 <_ZNSt11_Tuple_implILm0EIZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS1_EmmS7_IS4_EEEC2IRKS6_IS8_RKmRmS9_EvEEOT_DpOT0_>
  402e7a:	48 83 c4 30          	add    $0x30,%rsp
  402e7e:	5b                   	pop    %rbx
  402e7f:	41 5c                	pop    %r12
  402e81:	41 5d                	pop    %r13
  402e83:	41 5e                	pop    %r14
  402e85:	5d                   	pop    %rbp
  402e86:	c3                   	retq   
  402e87:	90                   	nop

0000000000402e88 <_ZNSt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS1_EmmS7_IS4_EEEC1IIS8_RKmRmS9_EvEERKS6_DpOT_>:
      typedef typename result_of<_Callable(_Args...)>::type result_type;

      template<typename... _Args2, typename = typename
               enable_if< sizeof...(_Args) == sizeof...(_Args2)>::type>
        explicit
        _Bind_simple(const _Callable& __callable, _Args2&&... __args)
  402e88:	55                   	push   %rbp
  402e89:	48 89 e5             	mov    %rsp,%rbp
  402e8c:	41 55                	push   %r13
  402e8e:	41 54                	push   %r12
  402e90:	53                   	push   %rbx
  402e91:	48 83 ec 38          	sub    $0x38,%rsp
  402e95:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  402e99:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  402e9d:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  402ea1:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  402ea5:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
  402ea9:	4c 89 4d b0          	mov    %r9,-0x50(%rbp)
        : _M_bound(__callable, std::forward<_Args2>(__args)...)
  402ead:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  402eb1:	48 89 c7             	mov    %rax,%rdi
  402eb4:	e8 5e 2a 00 00       	callq  405917 <_ZSt7forwardISt17reference_wrapperISt6atomicIbEEEOT_RNSt16remove_referenceIS4_E4typeE>
  402eb9:	49 89 c5             	mov    %rax,%r13
  402ebc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  402ec0:	48 89 c7             	mov    %rax,%rdi
  402ec3:	e8 41 2a 00 00       	callq  405909 <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
  402ec8:	49 89 c4             	mov    %rax,%r12
  402ecb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  402ecf:	48 89 c7             	mov    %rax,%rdi
  402ed2:	e8 24 2a 00 00       	callq  4058fb <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
  402ed7:	48 89 c3             	mov    %rax,%rbx
  402eda:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  402ede:	48 89 c7             	mov    %rax,%rdi
  402ee1:	e8 07 2a 00 00       	callq  4058ed <_ZSt7forwardISt17reference_wrapperIN7barrier35centralized_sense_reversing_barrierEEEOT_RNSt16remove_referenceIS4_E4typeE>
  402ee6:	48 89 c2             	mov    %rax,%rdx
  402ee9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  402eed:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  402ef1:	4d 89 e9             	mov    %r13,%r9
  402ef4:	4d 89 e0             	mov    %r12,%r8
  402ef7:	48 89 d9             	mov    %rbx,%rcx
  402efa:	48 89 c7             	mov    %rax,%rdi
  402efd:	e8 ee fe ff ff       	callq  402df0 <_ZNSt5tupleIIZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS1_EmmS7_IS4_EEEC1IIRKS6_S8_RKmRmS9_EvEEDpOT_>
        { }
  402f02:	48 83 c4 38          	add    $0x38,%rsp
  402f06:	5b                   	pop    %rbx
  402f07:	41 5c                	pop    %r12
  402f09:	41 5d                	pop    %r13
  402f0b:	5d                   	pop    %rbp
  402f0c:	c3                   	retq   

0000000000402f0d <_ZSt11make_sharedINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEEISE_EESt10shared_ptrIT_EDpOT0_>:
   *  @throw  std::bad_alloc, or an exception thrown from the
   *          constructor of @a _Tp.
   */
  template<typename _Tp, typename... _Args>
    inline shared_ptr<_Tp>
    make_shared(_Args&&... __args)
  402f0d:	55                   	push   %rbp
  402f0e:	48 89 e5             	mov    %rsp,%rbp
  402f11:	53                   	push   %rbx
  402f12:	48 83 ec 28          	sub    $0x28,%rsp
  402f16:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  402f1a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    {
      typedef typename std::remove_const<_Tp>::type _Tp_nc;
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
				       std::forward<_Args>(__args)...);
  402f1e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  402f22:	48 89 c7             	mov    %rax,%rdi
  402f25:	e8 78 fd ff ff       	callq  402ca2 <_ZSt7forwardISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS2_EmmS8_IS5_EEEEOT_RNSt16remove_referenceISD_E4typeE>
  402f2a:	48 89 c3             	mov    %rax,%rbx
  402f2d:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
  402f31:	48 89 c7             	mov    %rax,%rdi
  402f34:	e8 9f 00 00 00       	callq  402fd8 <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS3_EmmS9_IS6_EEEEEEC1Ev>
  402f39:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  402f3d:	48 8d 4d ef          	lea    -0x11(%rbp),%rcx
  402f41:	48 89 da             	mov    %rbx,%rdx
  402f44:	48 89 ce             	mov    %rcx,%rsi
  402f47:	48 89 c7             	mov    %rax,%rdi
  402f4a:	e8 bd 00 00 00       	callq  40300c <_ZSt15allocate_sharedINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEESaISF_EISE_EESt10shared_ptrIT_ERKT0_DpOT1_>
  402f4f:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
  402f53:	48 89 c7             	mov    %rax,%rdi
  402f56:	e8 97 00 00 00       	callq  402ff2 <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS3_EmmS9_IS6_EEEEEED1Ev>
  402f5b:	eb 1a                	jmp    402f77 <_ZSt11make_sharedINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEEISE_EESt10shared_ptrIT_EDpOT0_+0x6a>
  402f5d:	48 89 c3             	mov    %rax,%rbx
  402f60:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
  402f64:	48 89 c7             	mov    %rax,%rdi
  402f67:	e8 86 00 00 00       	callq  402ff2 <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS3_EmmS9_IS6_EEEEEED1Ev>
  402f6c:	48 89 d8             	mov    %rbx,%rax
  402f6f:	48 89 c7             	mov    %rax,%rdi
  402f72:	e8 a9 e9 ff ff       	callq  401920 <_Unwind_Resume@plt>
    }
  402f77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  402f7b:	48 83 c4 28          	add    $0x28,%rsp
  402f7f:	5b                   	pop    %rbx
  402f80:	5d                   	pop    %rbp
  402f81:	c3                   	retq   

0000000000402f82 <_ZNSt12__shared_ptrINSt6thread10_Impl_baseELN9__gnu_cxx12_Lock_policyE2EEC2INS0_5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS9_EmmSF_ISC_EEEEEvEEOS_IT_LS3_2EE>:
	__r._M_ptr = 0;
      }

      template<typename _Tp1, typename = typename
	       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>
	__shared_ptr(__shared_ptr<_Tp1, _Lp>&& __r) noexcept
  402f82:	55                   	push   %rbp
  402f83:	48 89 e5             	mov    %rsp,%rbp
  402f86:	48 83 ec 10          	sub    $0x10,%rsp
  402f8a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402f8e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_ptr(__r._M_ptr), _M_refcount()
  402f92:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  402f96:	48 8b 10             	mov    (%rax),%rdx
  402f99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402f9d:	48 89 10             	mov    %rdx,(%rax)
  402fa0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402fa4:	48 83 c0 08          	add    $0x8,%rax
  402fa8:	48 89 c7             	mov    %rax,%rdi
  402fab:	e8 6a 4d 00 00       	callq  407d1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1Ev>
	{
	  _M_refcount._M_swap(__r._M_refcount);
  402fb0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  402fb4:	48 8d 50 08          	lea    0x8(%rax),%rdx
  402fb8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402fbc:	48 83 c0 08          	add    $0x8,%rax
  402fc0:	48 89 d6             	mov    %rdx,%rsi
  402fc3:	48 89 c7             	mov    %rax,%rdi
  402fc6:	e8 57 5d 00 00       	callq  408d22 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EE7_M_swapERS2_>
	  __r._M_ptr = 0;
  402fcb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  402fcf:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	}
  402fd6:	c9                   	leaveq 
  402fd7:	c3                   	retq   

0000000000402fd8 <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS3_EmmS9_IS6_EEEEEEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. std::allocator propagate_on_container_move_assignment
      typedef true_type propagate_on_container_move_assignment;
#endif

      allocator() throw() { }
  402fd8:	55                   	push   %rbp
  402fd9:	48 89 e5             	mov    %rsp,%rbp
  402fdc:	48 83 ec 10          	sub    $0x10,%rsp
  402fe0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402fe4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402fe8:	48 89 c7             	mov    %rax,%rdi
  402feb:	e8 62 00 00 00       	callq  403052 <_ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS5_EmmSB_IS8_EEEEEEC2Ev>
  402ff0:	c9                   	leaveq 
  402ff1:	c3                   	retq   

0000000000402ff2 <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS3_EmmS9_IS6_EEEEEED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
  402ff2:	55                   	push   %rbp
  402ff3:	48 89 e5             	mov    %rsp,%rbp
  402ff6:	48 83 ec 10          	sub    $0x10,%rsp
  402ffa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402ffe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403002:	48 89 c7             	mov    %rax,%rdi
  403005:	e8 52 00 00 00       	callq  40305c <_ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS5_EmmSB_IS8_EEEEEED2Ev>
  40300a:	c9                   	leaveq 
  40300b:	c3                   	retq   

000000000040300c <_ZSt15allocate_sharedINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEESaISF_EISE_EESt10shared_ptrIT_ERKT0_DpOT1_>:
   *  A copy of @a __a will be used to allocate memory for the shared_ptr
   *  and the new object.
   */
  template<typename _Tp, typename _Alloc, typename... _Args>
    inline shared_ptr<_Tp>
    allocate_shared(const _Alloc& __a, _Args&&... __args)
  40300c:	55                   	push   %rbp
  40300d:	48 89 e5             	mov    %rsp,%rbp
  403010:	53                   	push   %rbx
  403011:	48 83 ec 38          	sub    $0x38,%rsp
  403015:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  403019:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40301d:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    {
      return shared_ptr<_Tp>(_Sp_make_shared_tag(), __a,
			     std::forward<_Args>(__args)...);
  403021:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  403025:	48 89 c7             	mov    %rax,%rdi
  403028:	e8 75 fc ff ff       	callq  402ca2 <_ZSt7forwardISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS2_EmmS8_IS5_EEEEOT_RNSt16remove_referenceISD_E4typeE>
  40302d:	48 89 c2             	mov    %rax,%rdx
  403030:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  403034:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  403038:	88 1c 24             	mov    %bl,(%rsp)
  40303b:	48 89 ce             	mov    %rcx,%rsi
  40303e:	48 89 c7             	mov    %rax,%rdi
  403041:	e8 20 00 00 00       	callq  403066 <_ZNSt10shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEEEC1ISaISF_EISE_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
  403046:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40304a:	48 83 c4 38          	add    $0x38,%rsp
  40304e:	5b                   	pop    %rbx
  40304f:	5d                   	pop    %rbp
  403050:	c3                   	retq   
  403051:	90                   	nop

0000000000403052 <_ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS5_EmmSB_IS8_EEEEEEC2Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  403052:	55                   	push   %rbp
  403053:	48 89 e5             	mov    %rsp,%rbp
  403056:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40305a:	5d                   	pop    %rbp
  40305b:	c3                   	retq   

000000000040305c <_ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS5_EmmSB_IS8_EEEEEED2Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  40305c:	55                   	push   %rbp
  40305d:	48 89 e5             	mov    %rsp,%rbp
  403060:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403064:	5d                   	pop    %rbp
  403065:	c3                   	retq   

0000000000403066 <_ZNSt10shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEEEC1ISaISF_EISE_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	}

    private:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
  403066:	55                   	push   %rbp
  403067:	48 89 e5             	mov    %rsp,%rbp
  40306a:	53                   	push   %rbx
  40306b:	48 83 ec 28          	sub    $0x28,%rsp
  40306f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  403073:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  403077:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
		   _Args&&... __args)
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
  40307b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40307f:	48 89 c7             	mov    %rax,%rdi
  403082:	e8 1b fc ff ff       	callq  402ca2 <_ZSt7forwardISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS2_EmmS8_IS5_EEEEOT_RNSt16remove_referenceISD_E4typeE>
  403087:	48 89 c2             	mov    %rax,%rdx
  40308a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40308e:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  403092:	88 1c 24             	mov    %bl,(%rsp)
  403095:	48 89 ce             	mov    %rcx,%rsi
  403098:	48 89 c7             	mov    %rax,%rdi
  40309b:	e8 08 00 00 00       	callq  4030a8 <_ZNSt12__shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEELN9__gnu_cxx12_Lock_policyE2EEC2ISaISF_EISE_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
  4030a0:	48 83 c4 28          	add    $0x28,%rsp
  4030a4:	5b                   	pop    %rbx
  4030a5:	5d                   	pop    %rbp
  4030a6:	c3                   	retq   
  4030a7:	90                   	nop

00000000004030a8 <_ZNSt12__shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEELN9__gnu_cxx12_Lock_policyE2EEC2ISaISF_EISE_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:

#ifdef __GXX_RTTI
    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
  4030a8:	55                   	push   %rbp
  4030a9:	48 89 e5             	mov    %rsp,%rbp
  4030ac:	53                   	push   %rbx
  4030ad:	48 83 ec 38          	sub    $0x38,%rsp
  4030b1:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  4030b5:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  4030b9:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
		     _Args&&... __args)
	: _M_ptr(), _M_refcount(__tag, (_Tp*)0, __a,
				std::forward<_Args>(__args)...)
  4030bd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4030c1:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  4030c8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4030cc:	48 89 c7             	mov    %rax,%rdi
  4030cf:	e8 ce fb ff ff       	callq  402ca2 <_ZSt7forwardISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS2_EmmS8_IS5_EEEEOT_RNSt16remove_referenceISD_E4typeE>
  4030d4:	48 89 c2             	mov    %rax,%rdx
  4030d7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4030db:	48 8d 78 08          	lea    0x8(%rax),%rdi
  4030df:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4030e3:	88 1c 24             	mov    %bl,(%rsp)
  4030e6:	48 89 d1             	mov    %rdx,%rcx
  4030e9:	48 89 c2             	mov    %rax,%rdx
  4030ec:	be 00 00 00 00       	mov    $0x0,%esi
  4030f1:	e8 6e 00 00 00       	callq  403164 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1INSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS8_EmmSE_ISB_EEEEESaISJ_EISI_EEESt19_Sp_make_shared_tagPT_RKT0_DpOT1_>
	{
	  // _M_ptr needs to point to the newly constructed object.
	  // This relies on _Sp_counted_ptr_inplace::_M_get_deleter.
	  void* __p = _M_refcount._M_get_deleter(typeid(__tag));
  4030f6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4030fa:	48 83 c0 08          	add    $0x8,%rax
  4030fe:	be d0 c3 40 00       	mov    $0x40c3d0,%esi
  403103:	48 89 c7             	mov    %rax,%rdi
  403106:	e8 59 72 00 00       	callq  40a364 <_ZNKSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info>
  40310b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  _M_ptr = static_cast<_Tp*>(__p);
  40310f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  403113:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  403117:	48 89 10             	mov    %rdx,(%rax)
	  __enable_shared_from_this_helper(_M_refcount, _M_ptr, _M_ptr);
  40311a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40311e:	48 8b 10             	mov    (%rax),%rdx
  403121:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  403125:	48 8b 00             	mov    (%rax),%rax
  403128:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  40312c:	48 83 c1 08          	add    $0x8,%rcx
  403130:	48 89 c6             	mov    %rax,%rsi
  403133:	48 89 cf             	mov    %rcx,%rdi
  403136:	b8 00 00 00 00       	mov    $0x0,%eax
  40313b:	e8 6d 72 00 00       	callq  40a3ad <_ZSt32__enable_shared_from_this_helperILN9__gnu_cxx12_Lock_policyE2EEvRKSt14__shared_countIXT_EEz>
	}
  403140:	48 83 c4 38          	add    $0x38,%rsp
  403144:	5b                   	pop    %rbx
  403145:	5d                   	pop    %rbp
  403146:	c3                   	retq   

0000000000403147 <_ZSt4moveIRKSaINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEEEEONSt16remove_referenceIT_E4typeEOSK_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
  403147:	55                   	push   %rbp
  403148:	48 89 e5             	mov    %rsp,%rbp
  40314b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  40314f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403153:	5d                   	pop    %rbp
  403154:	c3                   	retq   

0000000000403155 <_ZSt7forwardIKSaINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEEEEOT_RNSt16remove_referenceISI_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  403155:	55                   	push   %rbp
  403156:	48 89 e5             	mov    %rsp,%rbp
  403159:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  40315d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403161:	5d                   	pop    %rbp
  403162:	c3                   	retq   
  403163:	90                   	nop

0000000000403164 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1INSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS8_EmmSE_ISB_EEEEESaISJ_EISI_EEESt19_Sp_make_shared_tagPT_RKT0_DpOT1_>:
	      __throw_exception_again;
	    }
	}

      template<typename _Tp, typename _Alloc, typename... _Args>
	__shared_count(_Sp_make_shared_tag, _Tp*, const _Alloc& __a,
  403164:	55                   	push   %rbp
  403165:	48 89 e5             	mov    %rsp,%rbp
  403168:	53                   	push   %rbx
  403169:	48 83 ec 38          	sub    $0x38,%rsp
  40316d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  403171:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  403175:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  403179:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
		       _Args&&... __args)
	: _M_pi(0)
  40317d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  403181:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	{
	  typedef _Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp> _Sp_cp_type;
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<_Sp_cp_type> _Alloc_traits;
	  typename _Alloc_traits::allocator_type __a2(__a);
  403188:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40318c:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
  403190:	48 89 d6             	mov    %rdx,%rsi
  403193:	48 89 c7             	mov    %rax,%rdi
  403196:	e8 af 00 00 00       	callq  40324a <_ZNSaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEEC1ISF_EERKSaIT_E>
	  _Sp_cp_type* __mem = _Alloc_traits::allocate(__a2, 1);
  40319b:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
  40319f:	be 01 00 00 00       	mov    $0x1,%esi
  4031a4:	48 89 c7             	mov    %rax,%rdi
  4031a7:	e8 d6 00 00 00       	callq  403282 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS5_EmmSB_IS8_EEEEESaISG_ELN9__gnu_cxx12_Lock_policyE2EEEE8allocateERSL_m>
  4031ac:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __try
	    {
	      _Alloc_traits::construct(__a2, __mem, std::move(__a),
		    std::forward<_Args>(__args)...);
  4031b0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4031b4:	48 89 c7             	mov    %rax,%rdi
  4031b7:	e8 e6 fa ff ff       	callq  402ca2 <_ZSt7forwardISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS2_EmmS8_IS5_EEEEOT_RNSt16remove_referenceISD_E4typeE>
  4031bc:	48 89 c3             	mov    %rax,%rbx
	    rebind_traits<_Sp_cp_type> _Alloc_traits;
	  typename _Alloc_traits::allocator_type __a2(__a);
	  _Sp_cp_type* __mem = _Alloc_traits::allocate(__a2, 1);
	  __try
	    {
	      _Alloc_traits::construct(__a2, __mem, std::move(__a),
  4031bf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4031c3:	48 89 c7             	mov    %rax,%rdi
  4031c6:	e8 7c ff ff ff       	callq  403147 <_ZSt4moveIRKSaINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEEEEONSt16remove_referenceIT_E4typeEOSK_>
  4031cb:	48 89 c2             	mov    %rax,%rdx
  4031ce:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  4031d2:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
  4031d6:	48 89 d9             	mov    %rbx,%rcx
  4031d9:	48 89 c7             	mov    %rax,%rdi
  4031dc:	e8 cb 00 00 00       	callq  4032ac <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS5_EmmSB_IS8_EEEEESaISG_ELN9__gnu_cxx12_Lock_policyE2EEEE9constructISK_IKSH_SF_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSL_PT_DpOSP_>
		    std::forward<_Args>(__args)...);
	      _M_pi = __mem;
  4031e1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4031e5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4031e9:	48 89 10             	mov    %rdx,(%rax)
	    }
	  __catch(...)
	    {
	      _Alloc_traits::deallocate(__a2, __mem, 1);
	      __throw_exception_again;
	    }
  4031ec:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
  4031f0:	48 89 c7             	mov    %rax,%rdi
  4031f3:	e8 70 00 00 00       	callq  403268 <_ZNSaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEED1Ev>
  4031f8:	eb 49                	jmp    403243 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1INSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS8_EmmSE_ISB_EEEEESaISJ_EISI_EEESt19_Sp_make_shared_tagPT_RKT0_DpOT1_+0xdf>
  4031fa:	48 89 c3             	mov    %rax,%rbx
	    {
	      _Alloc_traits::construct(__a2, __mem, std::move(__a),
		    std::forward<_Args>(__args)...);
	      _M_pi = __mem;
	    }
	  __catch(...)
  4031fd:	e8 8e e6 ff ff       	callq  401890 <__cxa_end_catch@plt>
  403202:	eb 28                	jmp    40322c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1INSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS8_EmmSE_ISB_EEEEESaISJ_EISI_EEESt19_Sp_make_shared_tagPT_RKT0_DpOT1_+0xc8>
  403204:	48 89 c7             	mov    %rax,%rdi
  403207:	e8 c4 e6 ff ff       	callq  4018d0 <__cxa_begin_catch@plt>
	    {
	      _Alloc_traits::deallocate(__a2, __mem, 1);
  40320c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  403210:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
  403214:	ba 01 00 00 00       	mov    $0x1,%edx
  403219:	48 89 ce             	mov    %rcx,%rsi
  40321c:	48 89 c7             	mov    %rax,%rdi
  40321f:	e8 d9 00 00 00       	callq  4032fd <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS5_EmmSB_IS8_EEEEESaISG_ELN9__gnu_cxx12_Lock_policyE2EEEE10deallocateERSL_PSK_m>
	      __throw_exception_again;
  403224:	e8 57 e4 ff ff       	callq  401680 <__cxa_rethrow@plt>
  403229:	48 89 c3             	mov    %rax,%rbx
	    }
  40322c:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
  403230:	48 89 c7             	mov    %rax,%rdi
  403233:	e8 30 00 00 00       	callq  403268 <_ZNSaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEED1Ev>
  403238:	48 89 d8             	mov    %rbx,%rax
  40323b:	48 89 c7             	mov    %rax,%rdi
  40323e:	e8 dd e6 ff ff       	callq  401920 <_Unwind_Resume@plt>
	}
  403243:	48 83 c4 38          	add    $0x38,%rsp
  403247:	5b                   	pop    %rbx
  403248:	5d                   	pop    %rbp
  403249:	c3                   	retq   

000000000040324a <_ZNSaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEEC1ISF_EERKSaIT_E>:

      allocator(const allocator& __a) throw()
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }
  40324a:	55                   	push   %rbp
  40324b:	48 89 e5             	mov    %rsp,%rbp
  40324e:	48 83 ec 10          	sub    $0x10,%rsp
  403252:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403256:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40325a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40325e:	48 89 c7             	mov    %rax,%rdi
  403261:	e8 c4 00 00 00       	callq  40332a <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS6_EmmSC_IS9_EEEEESaISH_ELNS_12_Lock_policyE2EEEC2Ev>
  403266:	c9                   	leaveq 
  403267:	c3                   	retq   

0000000000403268 <_ZNSaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEED1Ev>:

      ~allocator() throw() { }
  403268:	55                   	push   %rbp
  403269:	48 89 e5             	mov    %rsp,%rbp
  40326c:	48 83 ec 10          	sub    $0x10,%rsp
  403270:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403274:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403278:	48 89 c7             	mov    %rax,%rdi
  40327b:	e8 b4 00 00 00       	callq  403334 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS6_EmmSC_IS9_EEEEESaISH_ELNS_12_Lock_policyE2EEED2Ev>
  403280:	c9                   	leaveq 
  403281:	c3                   	retq   

0000000000403282 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS5_EmmSB_IS8_EEEEESaISG_ELN9__gnu_cxx12_Lock_policyE2EEEE8allocateERSL_m>:
       *  @param  __n  The number of objects to allocate space for.
       *
       *  Calls @c a.allocate(n)
      */
      static pointer
      allocate(_Alloc& __a, size_type __n)
  403282:	55                   	push   %rbp
  403283:	48 89 e5             	mov    %rsp,%rbp
  403286:	48 83 ec 10          	sub    $0x10,%rsp
  40328a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40328e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
  403292:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  403296:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40329a:	ba 00 00 00 00       	mov    $0x0,%edx
  40329f:	48 89 ce             	mov    %rcx,%rsi
  4032a2:	48 89 c7             	mov    %rax,%rdi
  4032a5:	e8 94 00 00 00       	callq  40333e <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS6_EmmSC_IS9_EEEEESaISH_ELNS_12_Lock_policyE2EEE8allocateEmPKv>
  4032aa:	c9                   	leaveq 
  4032ab:	c3                   	retq   

00000000004032ac <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS5_EmmSB_IS8_EEEEESaISG_ELN9__gnu_cxx12_Lock_policyE2EEEE9constructISK_IKSH_SF_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSL_PT_DpOSP_>:
       *  if that expression is well-formed, otherwise uses placement-new
       *  to construct an object of type @a _Tp at location @a __p from the
       *  arguments @a __args...
      */
      template<typename _Tp, typename... _Args>
	static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
  4032ac:	55                   	push   %rbp
  4032ad:	48 89 e5             	mov    %rsp,%rbp
  4032b0:	53                   	push   %rbx
  4032b1:	48 83 ec 28          	sub    $0x28,%rsp
  4032b5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4032b9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4032bd:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4032c1:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	-> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
  4032c5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4032c9:	48 89 c7             	mov    %rax,%rdi
  4032cc:	e8 d1 f9 ff ff       	callq  402ca2 <_ZSt7forwardISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS2_EmmS8_IS5_EEEEOT_RNSt16remove_referenceISD_E4typeE>
  4032d1:	48 89 c3             	mov    %rax,%rbx
  4032d4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4032d8:	48 89 c7             	mov    %rax,%rdi
  4032db:	e8 75 fe ff ff       	callq  403155 <_ZSt7forwardIKSaINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEEEEOT_RNSt16remove_referenceISI_E4typeE>
  4032e0:	48 89 c2             	mov    %rax,%rdx
  4032e3:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  4032e7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4032eb:	48 89 d9             	mov    %rbx,%rcx
  4032ee:	48 89 c7             	mov    %rax,%rdi
  4032f1:	e8 94 00 00 00       	callq  40338a <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS5_EmmSB_IS8_EEEEESaISG_ELN9__gnu_cxx12_Lock_policyE2EEEE12_S_constructISK_IKSH_SF_EEENSt9enable_ifIXsrNSM_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERSL_PSR_DpOSS_>
  4032f6:	48 83 c4 28          	add    $0x28,%rsp
  4032fa:	5b                   	pop    %rbx
  4032fb:	5d                   	pop    %rbp
  4032fc:	c3                   	retq   

00000000004032fd <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS5_EmmSB_IS8_EEEEESaISG_ELN9__gnu_cxx12_Lock_policyE2EEEE10deallocateERSL_PSK_m>:
       *  @param  __p  Pointer to the memory to deallocate.
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void deallocate(_Alloc& __a, pointer __p, size_type __n)
  4032fd:	55                   	push   %rbp
  4032fe:	48 89 e5             	mov    %rsp,%rbp
  403301:	48 83 ec 20          	sub    $0x20,%rsp
  403305:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403309:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40330d:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
  403311:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  403315:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  403319:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40331d:	48 89 ce             	mov    %rcx,%rsi
  403320:	48 89 c7             	mov    %rax,%rdi
  403323:	e8 b4 00 00 00       	callq  4033dc <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS6_EmmSC_IS9_EEEEESaISH_ELNS_12_Lock_policyE2EEE10deallocateEPSK_m>
  403328:	c9                   	leaveq 
  403329:	c3                   	retq   

000000000040332a <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS6_EmmSC_IS9_EEEEESaISH_ELNS_12_Lock_policyE2EEEC2Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  40332a:	55                   	push   %rbp
  40332b:	48 89 e5             	mov    %rsp,%rbp
  40332e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403332:	5d                   	pop    %rbp
  403333:	c3                   	retq   

0000000000403334 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS6_EmmSC_IS9_EEEEESaISH_ELNS_12_Lock_policyE2EEED2Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  403334:	55                   	push   %rbp
  403335:	48 89 e5             	mov    %rsp,%rbp
  403338:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40333c:	5d                   	pop    %rbp
  40333d:	c3                   	retq   

000000000040333e <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS6_EmmSC_IS9_EEEEESaISH_ELNS_12_Lock_policyE2EEE8allocateEmPKv>:
      { return std::__addressof(__x); }

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
  40333e:	55                   	push   %rbp
  40333f:	48 89 e5             	mov    %rsp,%rbp
  403342:	48 83 ec 20          	sub    $0x20,%rsp
  403346:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40334a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40334e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { 
	if (__n > this->max_size())
  403352:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403356:	48 89 c7             	mov    %rax,%rdi
  403359:	e8 a0 00 00 00       	callq  4033fe <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS6_EmmSC_IS9_EEEEESaISH_ELNS_12_Lock_policyE2EEE8max_sizeEv>
  40335e:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  403362:	0f 92 c0             	setb   %al
  403365:	84 c0                	test   %al,%al
  403367:	74 05                	je     40336e <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS6_EmmSC_IS9_EEEEESaISH_ELNS_12_Lock_policyE2EEE8allocateEmPKv+0x30>
	  std::__throw_bad_alloc();
  403369:	e8 32 e5 ff ff       	callq  4018a0 <_ZSt17__throw_bad_allocv@plt>

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  40336e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  403372:	48 89 d0             	mov    %rdx,%rax
  403375:	48 c1 e0 02          	shl    $0x2,%rax
  403379:	48 01 d0             	add    %rdx,%rax
  40337c:	48 c1 e0 04          	shl    $0x4,%rax
  403380:	48 89 c7             	mov    %rax,%rdi
  403383:	e8 88 e5 ff ff       	callq  401910 <_Znwm@plt>
      }
  403388:	c9                   	leaveq 
  403389:	c3                   	retq   

000000000040338a <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS5_EmmSB_IS8_EEEEESaISG_ELN9__gnu_cxx12_Lock_policyE2EEEE12_S_constructISK_IKSH_SF_EEENSt9enable_ifIXsrNSM_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERSL_PSR_DpOSS_>:
	};

      template<typename _Tp, typename... _Args>
	static typename
       	enable_if<__construct_helper<_Tp, _Args...>::value, void>::type
       	_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
  40338a:	55                   	push   %rbp
  40338b:	48 89 e5             	mov    %rsp,%rbp
  40338e:	53                   	push   %rbx
  40338f:	48 83 ec 28          	sub    $0x28,%rsp
  403393:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  403397:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40339b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40339f:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
  4033a3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4033a7:	48 89 c7             	mov    %rax,%rdi
  4033aa:	e8 f3 f8 ff ff       	callq  402ca2 <_ZSt7forwardISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS2_EmmS8_IS5_EEEEOT_RNSt16remove_referenceISD_E4typeE>
  4033af:	48 89 c3             	mov    %rax,%rbx
  4033b2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4033b6:	48 89 c7             	mov    %rax,%rdi
  4033b9:	e8 97 fd ff ff       	callq  403155 <_ZSt7forwardIKSaINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEEEEOT_RNSt16remove_referenceISI_E4typeE>
  4033be:	48 89 c2             	mov    %rax,%rdx
  4033c1:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  4033c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4033c9:	48 89 d9             	mov    %rbx,%rcx
  4033cc:	48 89 c7             	mov    %rax,%rdi
  4033cf:	e8 3e 00 00 00       	callq  403412 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS6_EmmSC_IS9_EEEEESaISH_ELNS_12_Lock_policyE2EEE9constructISK_IKSI_SG_EEEvPT_DpOT0_>
  4033d4:	48 83 c4 28          	add    $0x28,%rsp
  4033d8:	5b                   	pop    %rbx
  4033d9:	5d                   	pop    %rbp
  4033da:	c3                   	retq   
  4033db:	90                   	nop

00000000004033dc <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS6_EmmSC_IS9_EEEEESaISH_ELNS_12_Lock_policyE2EEE10deallocateEPSK_m>:

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
  4033dc:	55                   	push   %rbp
  4033dd:	48 89 e5             	mov    %rsp,%rbp
  4033e0:	48 83 ec 20          	sub    $0x20,%rsp
  4033e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4033e8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4033ec:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { ::operator delete(__p); }
  4033f0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4033f4:	48 89 c7             	mov    %rax,%rdi
  4033f7:	e8 64 e2 ff ff       	callq  401660 <_ZdlPv@plt>
  4033fc:	c9                   	leaveq 
  4033fd:	c3                   	retq   

00000000004033fe <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS6_EmmSC_IS9_EEEEESaISH_ELNS_12_Lock_policyE2EEE8max_sizeEv>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
  4033fe:	55                   	push   %rbp
  4033ff:	48 89 e5             	mov    %rsp,%rbp
  403402:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_t(-1) / sizeof(_Tp); }
  403406:	48 b8 33 33 33 33 33 	movabs $0x333333333333333,%rax
  40340d:	33 33 03 
  403410:	5d                   	pop    %rbp
  403411:	c3                   	retq   

0000000000403412 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS6_EmmSC_IS9_EEEEESaISH_ELNS_12_Lock_policyE2EEE9constructISK_IKSI_SG_EEEvPT_DpOT0_>:

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
  403412:	55                   	push   %rbp
  403413:	48 89 e5             	mov    %rsp,%rbp
  403416:	41 56                	push   %r14
  403418:	41 55                	push   %r13
  40341a:	41 54                	push   %r12
  40341c:	53                   	push   %rbx
  40341d:	48 83 ec 30          	sub    $0x30,%rsp
  403421:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  403425:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  403429:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  40342d:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  403431:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  403435:	48 89 c7             	mov    %rax,%rdi
  403438:	e8 18 fd ff ff       	callq  403155 <_ZSt7forwardIKSaINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEEEEOT_RNSt16remove_referenceISI_E4typeE>
  40343d:	48 89 c2             	mov    %rax,%rdx
  403440:	48 8d 45 df          	lea    -0x21(%rbp),%rax
  403444:	48 89 d6             	mov    %rdx,%rsi
  403447:	48 89 c7             	mov    %rax,%rdi
  40344a:	e8 7d 00 00 00       	callq  4034cc <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS3_EmmS9_IS6_EEEEEEC1ERKSF_>
  40344f:	4c 8d 6d df          	lea    -0x21(%rbp),%r13
  403453:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403457:	48 89 c7             	mov    %rax,%rdi
  40345a:	e8 43 f8 ff ff       	callq  402ca2 <_ZSt7forwardISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS2_EmmS8_IS5_EEEEOT_RNSt16remove_referenceISD_E4typeE>
  40345f:	49 89 c6             	mov    %rax,%r14
  403462:	4c 8b 65 c0          	mov    -0x40(%rbp),%r12
  403466:	4c 89 e6             	mov    %r12,%rsi
  403469:	bf 50 00 00 00       	mov    $0x50,%edi
  40346e:	e8 ea 06 00 00       	callq  403b5d <_ZnwmPv>
  403473:	48 89 c3             	mov    %rax,%rbx
  403476:	48 85 db             	test   %rbx,%rbx
  403479:	74 0e                	je     403489 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS6_EmmSC_IS9_EEEEESaISH_ELNS_12_Lock_policyE2EEE9constructISK_IKSI_SG_EEEvPT_DpOT0_+0x77>
  40347b:	4c 89 f2             	mov    %r14,%rdx
  40347e:	4c 89 ee             	mov    %r13,%rsi
  403481:	48 89 df             	mov    %rbx,%rdi
  403484:	e8 83 00 00 00       	callq  40350c <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEC1IISE_EEESG_DpOT_>
  403489:	48 8d 45 df          	lea    -0x21(%rbp),%rax
  40348d:	48 89 c7             	mov    %rax,%rdi
  403490:	e8 5d fb ff ff       	callq  402ff2 <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS3_EmmS9_IS6_EEEEEED1Ev>
  403495:	eb 28                	jmp    4034bf <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS6_EmmSC_IS9_EEEEESaISH_ELNS_12_Lock_policyE2EEE9constructISK_IKSI_SG_EEEvPT_DpOT0_+0xad>
  403497:	49 89 c5             	mov    %rax,%r13
  40349a:	4c 89 e6             	mov    %r12,%rsi
  40349d:	48 89 df             	mov    %rbx,%rdi
  4034a0:	e8 ca 06 00 00       	callq  403b6f <_ZdlPvS_>
  4034a5:	4c 89 eb             	mov    %r13,%rbx
  4034a8:	48 8d 45 df          	lea    -0x21(%rbp),%rax
  4034ac:	48 89 c7             	mov    %rax,%rdi
  4034af:	e8 3e fb ff ff       	callq  402ff2 <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS3_EmmS9_IS6_EEEEEED1Ev>
  4034b4:	48 89 d8             	mov    %rbx,%rax
  4034b7:	48 89 c7             	mov    %rax,%rdi
  4034ba:	e8 61 e4 ff ff       	callq  401920 <_Unwind_Resume@plt>
  4034bf:	48 83 c4 30          	add    $0x30,%rsp
  4034c3:	5b                   	pop    %rbx
  4034c4:	41 5c                	pop    %r12
  4034c6:	41 5d                	pop    %r13
  4034c8:	41 5e                	pop    %r14
  4034ca:	5d                   	pop    %rbp
  4034cb:	c3                   	retq   

00000000004034cc <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS3_EmmS9_IS6_EEEEEEC1ERKSF_>:
      typedef true_type propagate_on_container_move_assignment;
#endif

      allocator() throw() { }

      allocator(const allocator& __a) throw()
  4034cc:	55                   	push   %rbp
  4034cd:	48 89 e5             	mov    %rsp,%rbp
  4034d0:	48 83 ec 10          	sub    $0x10,%rsp
  4034d4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4034d8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
  4034dc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4034e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4034e4:	48 89 d6             	mov    %rdx,%rsi
  4034e7:	48 89 c7             	mov    %rax,%rdi
  4034ea:	e8 e9 00 00 00       	callq  4035d8 <_ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS5_EmmSB_IS8_EEEEEEC2ERKSH_>
  4034ef:	c9                   	leaveq 
  4034f0:	c3                   	retq   
  4034f1:	90                   	nop

00000000004034f2 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEESaISF_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplD1Ev>:
    class _Sp_counted_ptr_inplace final : public _Sp_counted_base<_Lp>
    {
      // Helper class that stores the pointer and also acts as an allocator.
      // Used to dispose of the owned pointer and the internal refcount
      // Requires that copies of _Alloc can free each other's memory.
      struct _Impl
  4034f2:	55                   	push   %rbp
  4034f3:	48 89 e5             	mov    %rsp,%rbp
  4034f6:	48 83 ec 10          	sub    $0x10,%rsp
  4034fa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4034fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403502:	48 89 c7             	mov    %rax,%rdi
  403505:	e8 e8 fa ff ff       	callq  402ff2 <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS3_EmmS9_IS6_EEEEEED1Ev>
  40350a:	c9                   	leaveq 
  40350b:	c3                   	retq   

000000000040350c <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEC1IISE_EEESG_DpOT_>:
	_Tp* _M_ptr;
      };

    public:
      template<typename... _Args>
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
  40350c:	55                   	push   %rbp
  40350d:	48 89 e5             	mov    %rsp,%rbp
  403510:	53                   	push   %rbx
  403511:	48 83 ec 38          	sub    $0x38,%rsp
  403515:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  403519:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40351d:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	: _M_impl(__a)
  403521:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  403525:	48 89 c7             	mov    %rax,%rdi
  403528:	e8 f1 7f 00 00       	callq  40b51e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EEC1Ev>
  40352d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  403531:	48 c7 00 f0 be 40 00 	movq   $0x40bef0,(%rax)
  403538:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40353c:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
  403540:	48 89 d6             	mov    %rdx,%rsi
  403543:	48 89 c7             	mov    %rax,%rdi
  403546:	e8 81 ff ff ff       	callq  4034cc <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS3_EmmS9_IS6_EEEEEEC1ERKSF_>
  40354b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40354f:	48 8d 50 10          	lea    0x10(%rax),%rdx
  403553:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
  403557:	48 89 c6             	mov    %rax,%rsi
  40355a:	48 89 d7             	mov    %rdx,%rdi
  40355d:	e8 84 00 00 00       	callq  4035e6 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEESaISF_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplC1ESG_>
  403562:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
  403566:	48 89 c7             	mov    %rax,%rdi
  403569:	e8 84 fa ff ff       	callq  402ff2 <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS3_EmmS9_IS6_EEEEEED1Ev>
	{
	  _M_impl._M_ptr = static_cast<_Tp*>(static_cast<void*>(&_M_storage));
  40356e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  403572:	48 8d 50 18          	lea    0x18(%rax),%rdx
  403576:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40357a:	48 89 50 10          	mov    %rdx,0x10(%rax)
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070.  allocate_shared should use allocator_traits<A>::construct
	  allocator_traits<_Alloc>::construct(__a, _M_impl._M_ptr,
	      std::forward<_Args>(__args)...); // might throw
  40357e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  403582:	48 89 c7             	mov    %rax,%rdi
  403585:	e8 18 f7 ff ff       	callq  402ca2 <_ZSt7forwardISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS2_EmmS8_IS5_EEEEOT_RNSt16remove_referenceISD_E4typeE>
  40358a:	48 89 c2             	mov    %rax,%rdx
  40358d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  403591:	48 8b 48 10          	mov    0x10(%rax),%rcx
	: _M_impl(__a)
	{
	  _M_impl._M_ptr = static_cast<_Tp*>(static_cast<void*>(&_M_storage));
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070.  allocate_shared should use allocator_traits<A>::construct
	  allocator_traits<_Alloc>::construct(__a, _M_impl._M_ptr,
  403595:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  403599:	48 89 ce             	mov    %rcx,%rsi
  40359c:	48 89 c7             	mov    %rax,%rdi
  40359f:	e8 72 00 00 00       	callq  403616 <_ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEEEE9constructISF_ISE_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSG_PT_DpOSJ_>
	      std::forward<_Args>(__args)...); // might throw
	}
  4035a4:	eb 2a                	jmp    4035d0 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEC1IISE_EEESG_DpOT_+0xc4>
  4035a6:	48 89 c3             	mov    %rax,%rbx
      };

    public:
      template<typename... _Args>
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
	: _M_impl(__a)
  4035a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4035ad:	48 83 c0 10          	add    $0x10,%rax
  4035b1:	48 89 c7             	mov    %rax,%rdi
  4035b4:	e8 39 ff ff ff       	callq  4034f2 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEESaISF_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplD1Ev>
  4035b9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4035bd:	48 89 c7             	mov    %rax,%rdi
  4035c0:	e8 c1 54 00 00       	callq  408a86 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED1Ev>
  4035c5:	48 89 d8             	mov    %rbx,%rax
  4035c8:	48 89 c7             	mov    %rax,%rdi
  4035cb:	e8 50 e3 ff ff       	callq  401920 <_Unwind_Resume@plt>
	  _M_impl._M_ptr = static_cast<_Tp*>(static_cast<void*>(&_M_storage));
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070.  allocate_shared should use allocator_traits<A>::construct
	  allocator_traits<_Alloc>::construct(__a, _M_impl._M_ptr,
	      std::forward<_Args>(__args)...); // might throw
	}
  4035d0:	48 83 c4 38          	add    $0x38,%rsp
  4035d4:	5b                   	pop    %rbx
  4035d5:	5d                   	pop    %rbp
  4035d6:	c3                   	retq   
  4035d7:	90                   	nop

00000000004035d8 <_ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS5_EmmSB_IS8_EEEEEEC2ERKSH_>:
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }

      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  4035d8:	55                   	push   %rbp
  4035d9:	48 89 e5             	mov    %rsp,%rbp
  4035dc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4035e0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4035e4:	5d                   	pop    %rbp
  4035e5:	c3                   	retq   

00000000004035e6 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEESaISF_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplC1ESG_>:
      // Used to dispose of the owned pointer and the internal refcount
      // Requires that copies of _Alloc can free each other's memory.
      struct _Impl
      : public _Alloc           // copy constructor must not throw
      {
	_Impl(_Alloc __a) : _Alloc(__a), _M_ptr() { }
  4035e6:	55                   	push   %rbp
  4035e7:	48 89 e5             	mov    %rsp,%rbp
  4035ea:	48 83 ec 10          	sub    $0x10,%rsp
  4035ee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4035f2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4035f6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4035fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4035fe:	48 89 d6             	mov    %rdx,%rsi
  403601:	48 89 c7             	mov    %rax,%rdi
  403604:	e8 c3 fe ff ff       	callq  4034cc <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS3_EmmS9_IS6_EEEEEEC1ERKSF_>
  403609:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40360d:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  403614:	c9                   	leaveq 
  403615:	c3                   	retq   

0000000000403616 <_ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEEEE9constructISF_ISE_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSG_PT_DpOSJ_>:
       *  if that expression is well-formed, otherwise uses placement-new
       *  to construct an object of type @a _Tp at location @a __p from the
       *  arguments @a __args...
      */
      template<typename _Tp, typename... _Args>
	static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
  403616:	55                   	push   %rbp
  403617:	48 89 e5             	mov    %rsp,%rbp
  40361a:	48 83 ec 20          	sub    $0x20,%rsp
  40361e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403622:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  403626:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	-> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
  40362a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40362e:	48 89 c7             	mov    %rax,%rdi
  403631:	e8 6c f6 ff ff       	callq  402ca2 <_ZSt7forwardISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS2_EmmS8_IS5_EEEEOT_RNSt16remove_referenceISD_E4typeE>
  403636:	48 89 c2             	mov    %rax,%rdx
  403639:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40363d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403641:	48 89 ce             	mov    %rcx,%rsi
  403644:	48 89 c7             	mov    %rax,%rdi
  403647:	e8 02 00 00 00       	callq  40364e <_ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEEEE12_S_constructISF_ISE_EEENSt9enable_ifIXsrNSH_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERSG_PSL_DpOSM_>
  40364c:	c9                   	leaveq 
  40364d:	c3                   	retq   

000000000040364e <_ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEEEE12_S_constructISF_ISE_EEENSt9enable_ifIXsrNSH_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERSG_PSL_DpOSM_>:
	};

      template<typename _Tp, typename... _Args>
	static typename
       	enable_if<__construct_helper<_Tp, _Args...>::value, void>::type
       	_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
  40364e:	55                   	push   %rbp
  40364f:	48 89 e5             	mov    %rsp,%rbp
  403652:	48 83 ec 20          	sub    $0x20,%rsp
  403656:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40365a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40365e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
  403662:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  403666:	48 89 c7             	mov    %rax,%rdi
  403669:	e8 34 f6 ff ff       	callq  402ca2 <_ZSt7forwardISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS2_EmmS8_IS5_EEEEOT_RNSt16remove_referenceISD_E4typeE>
  40366e:	48 89 c2             	mov    %rax,%rdx
  403671:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  403675:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403679:	48 89 ce             	mov    %rcx,%rsi
  40367c:	48 89 c7             	mov    %rax,%rdi
  40367f:	e8 02 00 00 00       	callq  403686 <_ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS5_EmmSB_IS8_EEEEEE9constructISG_ISF_EEEvPT_DpOT0_>
  403684:	c9                   	leaveq 
  403685:	c3                   	retq   

0000000000403686 <_ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS5_EmmSB_IS8_EEEEEE9constructISG_ISF_EEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
  403686:	55                   	push   %rbp
  403687:	48 89 e5             	mov    %rsp,%rbp
  40368a:	53                   	push   %rbx
  40368b:	48 83 ec 28          	sub    $0x28,%rsp
  40368f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  403693:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  403697:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  40369b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40369f:	48 89 c7             	mov    %rax,%rdi
  4036a2:	e8 fb f5 ff ff       	callq  402ca2 <_ZSt7forwardISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS2_EmmS8_IS5_EEEEOT_RNSt16remove_referenceISD_E4typeE>
  4036a7:	48 89 c3             	mov    %rax,%rbx
  4036aa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4036ae:	48 89 c6             	mov    %rax,%rsi
  4036b1:	bf 38 00 00 00       	mov    $0x38,%edi
  4036b6:	e8 a2 04 00 00       	callq  403b5d <_ZnwmPv>
  4036bb:	48 85 c0             	test   %rax,%rax
  4036be:	74 0b                	je     4036cb <_ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS5_EmmSB_IS8_EEEEEE9constructISG_ISF_EEEvPT_DpOT0_+0x45>
  4036c0:	48 89 de             	mov    %rbx,%rsi
  4036c3:	48 89 c7             	mov    %rax,%rdi
  4036c6:	e8 07 00 00 00       	callq  4036d2 <_ZNSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS3_EmmS9_IS6_EEEEC1EOSD_>
  4036cb:	48 83 c4 28          	add    $0x28,%rsp
  4036cf:	5b                   	pop    %rbx
  4036d0:	5d                   	pop    %rbp
  4036d1:	c3                   	retq   

00000000004036d2 <_ZNSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS3_EmmS9_IS6_EEEEC1EOSD_>:
    template<typename _Callable>
      struct _Impl : public _Impl_base
      {
	_Callable		_M_func;

	_Impl(_Callable&& __f) : _M_func(std::forward<_Callable>(__f))
  4036d2:	55                   	push   %rbp
  4036d3:	48 89 e5             	mov    %rsp,%rbp
  4036d6:	48 83 ec 10          	sub    $0x10,%rsp
  4036da:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4036de:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4036e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4036e6:	48 89 c7             	mov    %rax,%rdi
  4036e9:	e8 58 7f 00 00       	callq  40b646 <_ZNSt6thread10_Impl_baseC1Ev>
  4036ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4036f2:	48 c7 00 30 bf 40 00 	movq   $0x40bf30,(%rax)
  4036f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4036fd:	48 89 c7             	mov    %rax,%rdi
  403700:	e8 9d f5 ff ff       	callq  402ca2 <_ZSt7forwardISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS2_EmmS8_IS5_EEEEOT_RNSt16remove_referenceISD_E4typeE>
  403705:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  403709:	48 83 c2 18          	add    $0x18,%rdx
  40370d:	48 89 c6             	mov    %rax,%rsi
  403710:	48 89 d7             	mov    %rdx,%rdi
  403713:	e8 c2 f4 ff ff       	callq  402bda <_ZNSt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS1_EmmS7_IS4_EEEC1EOSB_>
	{ }
  403718:	c9                   	leaveq 
  403719:	c3                   	retq   

000000000040371a <_ZNSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS3_EmmS9_IS6_EEEED1Ev>:

      virtual void _M_run() = 0;
    };

    template<typename _Callable>
      struct _Impl : public _Impl_base
  40371a:	55                   	push   %rbp
  40371b:	48 89 e5             	mov    %rsp,%rbp
  40371e:	48 83 ec 10          	sub    $0x10,%rsp
  403722:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403726:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40372a:	48 c7 00 30 bf 40 00 	movq   $0x40bf30,(%rax)
  403731:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403735:	48 89 c7             	mov    %rax,%rdi
  403738:	e8 1b 06 00 00       	callq  403d58 <_ZNSt6thread10_Impl_baseD1Ev>
  40373d:	b8 00 00 00 00       	mov    $0x0,%eax
  403742:	85 c0                	test   %eax,%eax
  403744:	74 0c                	je     403752 <_ZNSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS3_EmmS9_IS6_EEEED1Ev+0x38>
  403746:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40374a:	48 89 c7             	mov    %rax,%rdi
  40374d:	e8 0e df ff ff       	callq  401660 <_ZdlPv@plt>
  403752:	c9                   	leaveq 
  403753:	c3                   	retq   

0000000000403754 <_ZNSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS3_EmmS9_IS6_EEEED0Ev>:
  403754:	55                   	push   %rbp
  403755:	48 89 e5             	mov    %rsp,%rbp
  403758:	48 83 ec 10          	sub    $0x10,%rsp
  40375c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403760:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403764:	48 89 c7             	mov    %rax,%rdi
  403767:	e8 ae ff ff ff       	callq  40371a <_ZNSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS3_EmmS9_IS6_EEEED1Ev>
  40376c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403770:	48 89 c7             	mov    %rax,%rdi
  403773:	e8 e8 de ff ff       	callq  401660 <_ZdlPv@plt>
  403778:	c9                   	leaveq 
  403779:	c3                   	retq   

000000000040377a <_Z41__static_initialization_and_destruction_0ii>:
  40377a:	55                   	push   %rbp
  40377b:	48 89 e5             	mov    %rsp,%rbp
  40377e:	48 83 ec 10          	sub    $0x10,%rsp
  403782:	89 7d fc             	mov    %edi,-0x4(%rbp)
  403785:	89 75 f8             	mov    %esi,-0x8(%rbp)
  403788:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
  40378c:	75 27                	jne    4037b5 <_Z41__static_initialization_and_destruction_0ii+0x3b>
  40378e:	81 7d f8 ff ff 00 00 	cmpl   $0xffff,-0x8(%rbp)
  403795:	75 1e                	jne    4037b5 <_Z41__static_initialization_and_destruction_0ii+0x3b>
  extern wostream wclog;	/// Linked to standard error (buffered)
#endif
  //@}

  // For construction of filebuffers for cout, cin, cerr, clog et. al.
  static ios_base::Init __ioinit;
  403797:	bf d9 43 61 00       	mov    $0x6143d9,%edi
  40379c:	e8 ef de ff ff       	callq  401690 <_ZNSt8ios_base4InitC1Ev@plt>
  4037a1:	ba c0 41 61 00       	mov    $0x6141c0,%edx
  4037a6:	be d9 43 61 00       	mov    $0x6143d9,%esi
  4037ab:	bf 10 17 40 00       	mov    $0x401710,%edi
  4037b0:	e8 1b df ff ff       	callq  4016d0 <__cxa_atexit@plt>
  4037b5:	c9                   	leaveq 
  4037b6:	c3                   	retq   
  4037b7:	90                   	nop

00000000004037b8 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEESaISF_ELN9__gnu_cxx12_Lock_policyE2EED1Ev>:
	  // 2070.  allocate_shared should use allocator_traits<A>::construct
	  allocator_traits<_Alloc>::construct(__a, _M_impl._M_ptr,
	      std::forward<_Args>(__args)...); // might throw
	}

      ~_Sp_counted_ptr_inplace() noexcept { }
  4037b8:	55                   	push   %rbp
  4037b9:	48 89 e5             	mov    %rsp,%rbp
  4037bc:	48 83 ec 10          	sub    $0x10,%rsp
  4037c0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4037c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4037c8:	48 c7 00 f0 be 40 00 	movq   $0x40bef0,(%rax)
  4037cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4037d3:	48 83 c0 10          	add    $0x10,%rax
  4037d7:	48 89 c7             	mov    %rax,%rdi
  4037da:	e8 13 fd ff ff       	callq  4034f2 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEESaISF_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplD1Ev>
  4037df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4037e3:	48 89 c7             	mov    %rax,%rdi
  4037e6:	e8 9b 52 00 00       	callq  408a86 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED1Ev>
  4037eb:	b8 00 00 00 00       	mov    $0x0,%eax
  4037f0:	85 c0                	test   %eax,%eax
  4037f2:	74 0c                	je     403800 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEESaISF_ELN9__gnu_cxx12_Lock_policyE2EED1Ev+0x48>
  4037f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4037f8:	48 89 c7             	mov    %rax,%rdi
  4037fb:	e8 60 de ff ff       	callq  401660 <_ZdlPv@plt>
  403800:	c9                   	leaveq 
  403801:	c3                   	retq   

0000000000403802 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEESaISF_ELN9__gnu_cxx12_Lock_policyE2EED0Ev>:
  403802:	55                   	push   %rbp
  403803:	48 89 e5             	mov    %rsp,%rbp
  403806:	48 83 ec 10          	sub    $0x10,%rsp
  40380a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40380e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403812:	48 89 c7             	mov    %rax,%rdi
  403815:	e8 9e ff ff ff       	callq  4037b8 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEESaISF_ELN9__gnu_cxx12_Lock_policyE2EED1Ev>
  40381a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40381e:	48 89 c7             	mov    %rax,%rdi
  403821:	e8 3a de ff ff       	callq  401660 <_ZdlPv@plt>
  403826:	c9                   	leaveq 
  403827:	c3                   	retq   

0000000000403828 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEESaISF_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv>:

      virtual void
      _M_dispose() noexcept
  403828:	55                   	push   %rbp
  403829:	48 89 e5             	mov    %rsp,%rbp
  40382c:	48 83 ec 10          	sub    $0x10,%rsp
  403830:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { allocator_traits<_Alloc>::destroy(_M_impl, _M_impl._M_ptr); }
  403834:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403838:	48 8b 40 10          	mov    0x10(%rax),%rax
  40383c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  403840:	48 83 c2 10          	add    $0x10,%rdx
  403844:	48 89 c6             	mov    %rax,%rsi
  403847:	48 89 d7             	mov    %rdx,%rdi
  40384a:	e8 b3 00 00 00       	callq  403902 <_ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEEEE7destroyISF_EEvRSG_PT_>
  40384f:	c9                   	leaveq 
  403850:	c3                   	retq   
  403851:	90                   	nop

0000000000403852 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEESaISF_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv>:

      // Override because the allocator needs to know the dynamic type
      virtual void
      _M_destroy() noexcept
  403852:	55                   	push   %rbp
  403853:	48 89 e5             	mov    %rsp,%rbp
  403856:	48 83 ec 20          	sub    $0x20,%rsp
  40385a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      {
	typedef typename allocator_traits<_Alloc>::template
	  rebind_traits<_Sp_counted_ptr_inplace> _Alloc_traits;
	typename _Alloc_traits::allocator_type __a(_M_impl);
  40385e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  403862:	48 8d 50 10          	lea    0x10(%rax),%rdx
  403866:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  40386a:	48 89 d6             	mov    %rdx,%rsi
  40386d:	48 89 c7             	mov    %rax,%rdi
  403870:	e8 d5 f9 ff ff       	callq  40324a <_ZNSaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEEC1ISF_EERKSaIT_E>
	_Alloc_traits::destroy(__a, this);
  403875:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  403879:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  40387d:	48 89 d6             	mov    %rdx,%rsi
  403880:	48 89 c7             	mov    %rax,%rdi
  403883:	e8 9f 00 00 00       	callq  403927 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS5_EmmSB_IS8_EEEEESaISG_ELN9__gnu_cxx12_Lock_policyE2EEEE7destroyISK_EEvRSL_PT_>
	_Alloc_traits::deallocate(__a, this, 1);
  403888:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40388c:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  403890:	ba 01 00 00 00       	mov    $0x1,%edx
  403895:	48 89 ce             	mov    %rcx,%rsi
  403898:	48 89 c7             	mov    %rax,%rdi
  40389b:	e8 5d fa ff ff       	callq  4032fd <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS5_EmmSB_IS8_EEEEESaISG_ELN9__gnu_cxx12_Lock_policyE2EEEE10deallocateERSL_PSK_m>
  4038a0:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  4038a4:	48 89 c7             	mov    %rax,%rdi
  4038a7:	e8 bc f9 ff ff       	callq  403268 <_ZNSaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEED1Ev>
      }
  4038ac:	c9                   	leaveq 
  4038ad:	c3                   	retq   

00000000004038ae <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEESaISF_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info>:

      // Sneaky trick so __shared_ptr can get the managed pointer
      virtual void*
      _M_get_deleter(const std::type_info& __ti) noexcept
  4038ae:	55                   	push   %rbp
  4038af:	48 89 e5             	mov    %rsp,%rbp
  4038b2:	48 83 ec 10          	sub    $0x10,%rsp
  4038b6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4038ba:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      {
#ifdef __GXX_RTTI
	return __ti == typeid(_Sp_make_shared_tag)
  4038be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4038c2:	be d0 c3 40 00       	mov    $0x40c3d0,%esi
  4038c7:	48 89 c7             	mov    %rax,%rdi
  4038ca:	e8 f1 02 00 00       	callq  403bc0 <_ZNKSt9type_infoeqERKS_>
	       ? static_cast<void*>(&_M_storage)
	       : 0;
  4038cf:	84 c0                	test   %al,%al
  4038d1:	74 0a                	je     4038dd <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEESaISF_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info+0x2f>
  4038d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4038d7:	48 83 c0 18          	add    $0x18,%rax
  4038db:	eb 05                	jmp    4038e2 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEESaISF_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info+0x34>
  4038dd:	b8 00 00 00 00       	mov    $0x0,%eax
#else
        return 0;
#endif
      }
  4038e2:	c9                   	leaveq 
  4038e3:	c3                   	retq   

00000000004038e4 <_ZNSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS3_EmmS9_IS6_EEEE6_M_runEv>:

	_Impl(_Callable&& __f) : _M_func(std::forward<_Callable>(__f))
	{ }

	void
	_M_run() { _M_func(); }
  4038e4:	55                   	push   %rbp
  4038e5:	48 89 e5             	mov    %rsp,%rbp
  4038e8:	48 83 ec 10          	sub    $0x10,%rsp
  4038ec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4038f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4038f4:	48 83 c0 18          	add    $0x18,%rax
  4038f8:	48 89 c7             	mov    %rax,%rdi
  4038fb:	e8 4c 00 00 00       	callq  40394c <_ZNSt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS1_EmmS7_IS4_EEEclEv>
  403900:	c9                   	leaveq 
  403901:	c3                   	retq   

0000000000403902 <_ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEEEE7destroyISF_EEvRSG_PT_>:
       *
       *  Calls @c __a.destroy(__p) if that expression is well-formed,
       *  otherwise calls @c __p->~_Tp()
      */
      template <class _Tp>
	static void destroy(_Alloc& __a, _Tp* __p)
  403902:	55                   	push   %rbp
  403903:	48 89 e5             	mov    %rsp,%rbp
  403906:	48 83 ec 10          	sub    $0x10,%rsp
  40390a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40390e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ _S_destroy(__a, __p); }
  403912:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  403916:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40391a:	48 89 d6             	mov    %rdx,%rsi
  40391d:	48 89 c7             	mov    %rax,%rdi
  403920:	e8 44 00 00 00       	callq  403969 <_ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEEEE10_S_destroyISF_EENSt9enable_ifIXsrNSH_16__destroy_helperIT_EE5valueEvE4typeERSG_PSL_>
  403925:	c9                   	leaveq 
  403926:	c3                   	retq   

0000000000403927 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS5_EmmSB_IS8_EEEEESaISG_ELN9__gnu_cxx12_Lock_policyE2EEEE7destroyISK_EEvRSL_PT_>:
       *
       *  Calls @c __a.destroy(__p) if that expression is well-formed,
       *  otherwise calls @c __p->~_Tp()
      */
      template <class _Tp>
	static void destroy(_Alloc& __a, _Tp* __p)
  403927:	55                   	push   %rbp
  403928:	48 89 e5             	mov    %rsp,%rbp
  40392b:	48 83 ec 10          	sub    $0x10,%rsp
  40392f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403933:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ _S_destroy(__a, __p); }
  403937:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40393b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40393f:	48 89 d6             	mov    %rdx,%rsi
  403942:	48 89 c7             	mov    %rax,%rdi
  403945:	e8 44 00 00 00       	callq  40398e <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS5_EmmSB_IS8_EEEEESaISG_ELN9__gnu_cxx12_Lock_policyE2EEEE10_S_destroyISK_EENSt9enable_ifIXsrNSM_16__destroy_helperIT_EE5valueEvE4typeERSL_PSQ_>
  40394a:	c9                   	leaveq 
  40394b:	c3                   	retq   

000000000040394c <_ZNSt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS1_EmmS7_IS4_EEEclEv>:

      _Bind_simple(const _Bind_simple&) = default;
      _Bind_simple(_Bind_simple&&) = default;

      result_type
      operator()()
  40394c:	55                   	push   %rbp
  40394d:	48 89 e5             	mov    %rsp,%rbp
  403950:	48 83 ec 20          	sub    $0x20,%rsp
  403954:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      {
        typedef typename _Build_index_tuple<sizeof...(_Args)>::__type _Indices;
        return _M_invoke(_Indices());
  403958:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40395c:	88 14 24             	mov    %dl,(%rsp)
  40395f:	48 89 c7             	mov    %rax,%rdi
  403962:	e8 e9 00 00 00       	callq  403a50 <_ZNSt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS1_EmmS7_IS4_EEE9_M_invokeIILm0ELm1ELm2ELm3EEEEvSt12_Index_tupleIIXspT_EEE>
      }
  403967:	c9                   	leaveq 
  403968:	c3                   	retq   

0000000000403969 <_ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEEEE10_S_destroyISF_EENSt9enable_ifIXsrNSH_16__destroy_helperIT_EE5valueEvE4typeERSG_PSL_>:
	  static const bool value = type::value;
	};

      template<typename _Tp>
	static typename enable_if<__destroy_helper<_Tp>::value, void>::type
       	_S_destroy(_Alloc& __a, _Tp* __p)
  403969:	55                   	push   %rbp
  40396a:	48 89 e5             	mov    %rsp,%rbp
  40396d:	48 83 ec 10          	sub    $0x10,%rsp
  403971:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403975:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ __a.destroy(__p); }
  403979:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40397d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403981:	48 89 d6             	mov    %rdx,%rsi
  403984:	48 89 c7             	mov    %rax,%rdi
  403987:	e8 78 01 00 00       	callq  403b04 <_ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS5_EmmSB_IS8_EEEEEE7destroyISG_EEvPT_>
  40398c:	c9                   	leaveq 
  40398d:	c3                   	retq   

000000000040398e <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS5_EmmSB_IS8_EEEEESaISG_ELN9__gnu_cxx12_Lock_policyE2EEEE10_S_destroyISK_EENSt9enable_ifIXsrNSM_16__destroy_helperIT_EE5valueEvE4typeERSL_PSQ_>:
	  static const bool value = type::value;
	};

      template<typename _Tp>
	static typename enable_if<__destroy_helper<_Tp>::value, void>::type
       	_S_destroy(_Alloc& __a, _Tp* __p)
  40398e:	55                   	push   %rbp
  40398f:	48 89 e5             	mov    %rsp,%rbp
  403992:	48 83 ec 10          	sub    $0x10,%rsp
  403996:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40399a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ __a.destroy(__p); }
  40399e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4039a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4039a6:	48 89 d6             	mov    %rdx,%rsi
  4039a9:	48 89 c7             	mov    %rax,%rdi
  4039ac:	e8 79 01 00 00       	callq  403b2a <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS6_EmmSC_IS9_EEEEESaISH_ELNS_12_Lock_policyE2EEE7destroyISK_EEvPT_>
  4039b1:	c9                   	leaveq 
  4039b2:	c3                   	retq   

00000000004039b3 <_ZSt12__get_helperILm0EZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_ISt17reference_wrapperIS1_EmmS7_IS4_EEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EISB_DpT1_EE>:
    struct tuple_size<tuple<_Elements...>>
    : public integral_constant<std::size_t, sizeof...(_Elements)> { };

  template<std::size_t __i, typename _Head, typename... _Tail>
    constexpr typename __add_ref<_Head>::type
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
  4039b3:	55                   	push   %rbp
  4039b4:	48 89 e5             	mov    %rsp,%rbp
  4039b7:	48 83 ec 08          	sub    $0x8,%rsp
  4039bb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
  4039bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4039c3:	48 89 c7             	mov    %rax,%rdi
  4039c6:	e8 45 f1 ff ff       	callq  402b10 <_ZNSt11_Tuple_implILm0EIZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS1_EmmS7_IS4_EEE7_M_headERSA_>
  4039cb:	c9                   	leaveq 
  4039cc:	c3                   	retq   

00000000004039cd <_ZSt3getILm0EIZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS1_EmmS7_IS4_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSF_>:
  // original type.
  template<std::size_t __i, typename... _Elements>
    constexpr typename __add_ref<
                      typename tuple_element<__i, tuple<_Elements...>>::type
                    >::type
    get(tuple<_Elements...>& __t) noexcept
  4039cd:	55                   	push   %rbp
  4039ce:	48 89 e5             	mov    %rsp,%rbp
  4039d1:	48 83 ec 08          	sub    $0x8,%rsp
  4039d5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __get_helper<__i>(__t); }
  4039d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4039dd:	48 89 c7             	mov    %rax,%rdi
  4039e0:	e8 ce ff ff ff       	callq  4039b3 <_ZSt12__get_helperILm0EZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_ISt17reference_wrapperIS1_EmmS7_IS4_EEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EISB_DpT1_EE>
  4039e5:	c9                   	leaveq 
  4039e6:	c3                   	retq   

00000000004039e7 <_ZSt3getILm1EIZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS1_EmmS7_IS4_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSF_>:
  // original type.
  template<std::size_t __i, typename... _Elements>
    constexpr typename __add_ref<
                      typename tuple_element<__i, tuple<_Elements...>>::type
                    >::type
    get(tuple<_Elements...>& __t) noexcept
  4039e7:	55                   	push   %rbp
  4039e8:	48 89 e5             	mov    %rsp,%rbp
  4039eb:	48 83 ec 10          	sub    $0x10,%rsp
  4039ef:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __get_helper<__i>(__t); }
  4039f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4039f7:	48 89 c7             	mov    %rax,%rdi
  4039fa:	e8 32 7f 00 00       	callq  40b931 <_ZSt12__get_helperILm1ESt17reference_wrapperIN7barrier35centralized_sense_reversing_barrierEEImmS0_ISt6atomicIbEEEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EIS8_DpT1_EE>
  4039ff:	c9                   	leaveq 
  403a00:	c3                   	retq   

0000000000403a01 <_ZSt3getILm2EIZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS1_EmmS7_IS4_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSF_>:
  // original type.
  template<std::size_t __i, typename... _Elements>
    constexpr typename __add_ref<
                      typename tuple_element<__i, tuple<_Elements...>>::type
                    >::type
    get(tuple<_Elements...>& __t) noexcept
  403a01:	55                   	push   %rbp
  403a02:	48 89 e5             	mov    %rsp,%rbp
  403a05:	48 83 ec 10          	sub    $0x10,%rsp
  403a09:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __get_helper<__i>(__t); }
  403a0d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403a11:	48 89 c7             	mov    %rax,%rdi
  403a14:	e8 32 7f 00 00       	callq  40b94b <_ZSt12__get_helperILm2EmImSt17reference_wrapperISt6atomicIbEEEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EIS5_DpT1_EE>
  403a19:	c9                   	leaveq 
  403a1a:	c3                   	retq   

0000000000403a1b <_ZSt3getILm3EIZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS1_EmmS7_IS4_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSF_>:
  // original type.
  template<std::size_t __i, typename... _Elements>
    constexpr typename __add_ref<
                      typename tuple_element<__i, tuple<_Elements...>>::type
                    >::type
    get(tuple<_Elements...>& __t) noexcept
  403a1b:	55                   	push   %rbp
  403a1c:	48 89 e5             	mov    %rsp,%rbp
  403a1f:	48 83 ec 10          	sub    $0x10,%rsp
  403a23:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __get_helper<__i>(__t); }
  403a27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403a2b:	48 89 c7             	mov    %rax,%rdi
  403a2e:	e8 32 7f 00 00       	callq  40b965 <_ZSt12__get_helperILm3EmISt17reference_wrapperISt6atomicIbEEEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EIS5_DpT1_EE>
  403a33:	c9                   	leaveq 
  403a34:	c3                   	retq   

0000000000403a35 <_ZSt3getILm4EIZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS1_EmmS7_IS4_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSF_>:
  // original type.
  template<std::size_t __i, typename... _Elements>
    constexpr typename __add_ref<
                      typename tuple_element<__i, tuple<_Elements...>>::type
                    >::type
    get(tuple<_Elements...>& __t) noexcept
  403a35:	55                   	push   %rbp
  403a36:	48 89 e5             	mov    %rsp,%rbp
  403a39:	48 83 ec 10          	sub    $0x10,%rsp
  403a3d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __get_helper<__i>(__t); }
  403a41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403a45:	48 89 c7             	mov    %rax,%rdi
  403a48:	e8 32 7f 00 00       	callq  40b97f <_ZSt12__get_helperILm4ESt17reference_wrapperISt6atomicIbEEIEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EIS5_DpT1_EE>
  403a4d:	c9                   	leaveq 
  403a4e:	c3                   	retq   
  403a4f:	90                   	nop

0000000000403a50 <_ZNSt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS1_EmmS7_IS4_EEE9_M_invokeIILm0ELm1ELm2ELm3EEEEvSt12_Index_tupleIIXspT_EEE>:

    private:

      template<std::size_t... _Indices>
        typename result_of<_Callable(_Args...)>::type
        _M_invoke(_Index_tuple<_Indices...>)
  403a50:	55                   	push   %rbp
  403a51:	48 89 e5             	mov    %rsp,%rbp
  403a54:	41 56                	push   %r14
  403a56:	41 55                	push   %r13
  403a58:	41 54                	push   %r12
  403a5a:	53                   	push   %rbx
  403a5b:	48 83 ec 10          	sub    $0x10,%rsp
  403a5f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
        {
	  // std::bind always forwards bound arguments as lvalues,
	  // but this type can call functions which only accept rvalues.
          return std::forward<_Callable>(std::get<0>(_M_bound))(
              std::forward<_Args>(std::get<_Indices+1>(_M_bound))...);
  403a63:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  403a67:	48 89 c7             	mov    %rax,%rdi
  403a6a:	e8 c6 ff ff ff       	callq  403a35 <_ZSt3getILm4EIZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS1_EmmS7_IS4_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSF_>
  403a6f:	48 89 c7             	mov    %rax,%rdi
  403a72:	e8 a0 1e 00 00       	callq  405917 <_ZSt7forwardISt17reference_wrapperISt6atomicIbEEEOT_RNSt16remove_referenceIS4_E4typeE>
        typename result_of<_Callable(_Args...)>::type
        _M_invoke(_Index_tuple<_Indices...>)
        {
	  // std::bind always forwards bound arguments as lvalues,
	  // but this type can call functions which only accept rvalues.
          return std::forward<_Callable>(std::get<0>(_M_bound))(
  403a77:	48 89 c7             	mov    %rax,%rdi
  403a7a:	e8 2b 80 00 00       	callq  40baaa <_ZNKSt17reference_wrapperISt6atomicIbEEcvRS1_Ev>
  403a7f:	49 89 c6             	mov    %rax,%r14
              std::forward<_Args>(std::get<_Indices+1>(_M_bound))...);
  403a82:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  403a86:	48 89 c7             	mov    %rax,%rdi
  403a89:	e8 8d ff ff ff       	callq  403a1b <_ZSt3getILm3EIZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS1_EmmS7_IS4_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSF_>
  403a8e:	48 89 c7             	mov    %rax,%rdi
  403a91:	e8 99 35 00 00       	callq  40702f <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
        typename result_of<_Callable(_Args...)>::type
        _M_invoke(_Index_tuple<_Indices...>)
        {
	  // std::bind always forwards bound arguments as lvalues,
	  // but this type can call functions which only accept rvalues.
          return std::forward<_Callable>(std::get<0>(_M_bound))(
  403a96:	4c 8b 28             	mov    (%rax),%r13
              std::forward<_Args>(std::get<_Indices+1>(_M_bound))...);
  403a99:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  403a9d:	48 89 c7             	mov    %rax,%rdi
  403aa0:	e8 5c ff ff ff       	callq  403a01 <_ZSt3getILm2EIZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS1_EmmS7_IS4_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSF_>
  403aa5:	48 89 c7             	mov    %rax,%rdi
  403aa8:	e8 82 35 00 00       	callq  40702f <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
        typename result_of<_Callable(_Args...)>::type
        _M_invoke(_Index_tuple<_Indices...>)
        {
	  // std::bind always forwards bound arguments as lvalues,
	  // but this type can call functions which only accept rvalues.
          return std::forward<_Callable>(std::get<0>(_M_bound))(
  403aad:	4c 8b 20             	mov    (%rax),%r12
              std::forward<_Args>(std::get<_Indices+1>(_M_bound))...);
  403ab0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  403ab4:	48 89 c7             	mov    %rax,%rdi
  403ab7:	e8 2b ff ff ff       	callq  4039e7 <_ZSt3getILm1EIZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS1_EmmS7_IS4_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSF_>
  403abc:	48 89 c7             	mov    %rax,%rdi
  403abf:	e8 29 1e 00 00       	callq  4058ed <_ZSt7forwardISt17reference_wrapperIN7barrier35centralized_sense_reversing_barrierEEEOT_RNSt16remove_referenceIS4_E4typeE>
        typename result_of<_Callable(_Args...)>::type
        _M_invoke(_Index_tuple<_Indices...>)
        {
	  // std::bind always forwards bound arguments as lvalues,
	  // but this type can call functions which only accept rvalues.
          return std::forward<_Callable>(std::get<0>(_M_bound))(
  403ac4:	48 89 c7             	mov    %rax,%rdi
  403ac7:	e8 c4 7f 00 00       	callq  40ba90 <_ZNKSt17reference_wrapperIN7barrier35centralized_sense_reversing_barrierEEcvRS1_Ev>
  403acc:	48 89 c3             	mov    %rax,%rbx
  403acf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  403ad3:	48 89 c7             	mov    %rax,%rdi
  403ad6:	e8 f2 fe ff ff       	callq  4039cd <_ZSt3getILm0EIZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS1_EmmS7_IS4_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSF_>
  403adb:	48 89 c7             	mov    %rax,%rdi
  403ade:	e8 47 f0 ff ff       	callq  402b2a <_ZSt7forwardIZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_EOT_RNSt16remove_referenceIS7_E4typeE>
              std::forward<_Args>(std::get<_Indices+1>(_M_bound))...);
  403ae3:	4d 89 f0             	mov    %r14,%r8
  403ae6:	4c 89 e9             	mov    %r13,%rcx
  403ae9:	4c 89 e2             	mov    %r12,%rdx
  403aec:	48 89 de             	mov    %rbx,%rsi
  403aef:	48 89 c7             	mov    %rax,%rdi
  403af2:	e8 6d e3 ff ff       	callq  401e64 <_ZZ14run_experimentvENKUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_clES1_mmS4_>
        }
  403af7:	48 83 c4 10          	add    $0x10,%rsp
  403afb:	5b                   	pop    %rbx
  403afc:	41 5c                	pop    %r12
  403afe:	41 5d                	pop    %r13
  403b00:	41 5e                	pop    %r14
  403b02:	5d                   	pop    %rbp
  403b03:	c3                   	retq   

0000000000403b04 <_ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS5_EmmSB_IS8_EEEEEE7destroyISG_EEvPT_>:

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
  403b04:	55                   	push   %rbp
  403b05:	48 89 e5             	mov    %rsp,%rbp
  403b08:	48 83 ec 10          	sub    $0x10,%rsp
  403b0c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403b10:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  403b14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403b18:	48 8b 00             	mov    (%rax),%rax
  403b1b:	48 8b 00             	mov    (%rax),%rax
  403b1e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  403b22:	48 89 d7             	mov    %rdx,%rdi
  403b25:	ff d0                	callq  *%rax
  403b27:	c9                   	leaveq 
  403b28:	c3                   	retq   
  403b29:	90                   	nop

0000000000403b2a <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS6_EmmSC_IS9_EEEEESaISH_ELNS_12_Lock_policyE2EEE7destroyISK_EEvPT_>:
  403b2a:	55                   	push   %rbp
  403b2b:	48 89 e5             	mov    %rsp,%rbp
  403b2e:	48 83 ec 10          	sub    $0x10,%rsp
  403b32:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403b36:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  403b3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403b3e:	48 89 c7             	mov    %rax,%rdi
  403b41:	e8 72 fc ff ff       	callq  4037b8 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ14run_experimentvEUlRN7barrier35centralized_sense_reversing_barrierEmmRSt6atomicIbEE_St17reference_wrapperIS4_EmmSA_IS7_EEEEESaISF_ELN9__gnu_cxx12_Lock_policyE2EED1Ev>
  403b46:	c9                   	leaveq 
  403b47:	c3                   	retq   

0000000000403b48 <_GLOBAL__sub_I__Z14run_experimentv>:
  403b48:	55                   	push   %rbp
  403b49:	48 89 e5             	mov    %rsp,%rbp
  403b4c:	be ff ff 00 00       	mov    $0xffff,%esi
  403b51:	bf 01 00 00 00       	mov    $0x1,%edi
  403b56:	e8 1f fc ff ff       	callq  40377a <_Z41__static_initialization_and_destruction_0ii>
  403b5b:	5d                   	pop    %rbp
  403b5c:	c3                   	retq   

0000000000403b5d <_ZnwmPv>:
void operator delete[](void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
  __attribute__((__externally_visible__));

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
  403b5d:	55                   	push   %rbp
  403b5e:	48 89 e5             	mov    %rsp,%rbp
  403b61:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403b65:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  403b69:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403b6d:	5d                   	pop    %rbp
  403b6e:	c3                   	retq   

0000000000403b6f <_ZdlPvS_>:
inline void* operator new[](std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }

// Default placement versions of operator delete.
inline void operator delete  (void*, void*) _GLIBCXX_USE_NOEXCEPT { }
  403b6f:	55                   	push   %rbp
  403b70:	48 89 e5             	mov    %rsp,%rbp
  403b73:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403b77:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  403b7b:	5d                   	pop    %rbp
  403b7c:	c3                   	retq   

0000000000403b7d <_ZStorSt13_Ios_OpenmodeS_>:
  operator&(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline _GLIBCXX_CONSTEXPR _Ios_Openmode
  operator|(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) | static_cast<int>(__b)); }
  403b7d:	55                   	push   %rbp
  403b7e:	48 89 e5             	mov    %rsp,%rbp
  403b81:	89 7d fc             	mov    %edi,-0x4(%rbp)
  403b84:	89 75 f8             	mov    %esi,-0x8(%rbp)
  403b87:	8b 55 fc             	mov    -0x4(%rbp),%edx
  403b8a:	8b 45 f8             	mov    -0x8(%rbp),%eax
  403b8d:	09 d0                	or     %edx,%eax
  403b8f:	5d                   	pop    %rbp
  403b90:	c3                   	retq   
  403b91:	90                   	nop

0000000000403b92 <_ZNSt6chrono8durationIlSt5ratioILl1ELl1000000000EEEC1IlvEERKT_>:

	template<typename _Rep2, typename = typename
	       enable_if<is_convertible<_Rep2, rep>::value
			 && (treat_as_floating_point<rep>::value
			     || !treat_as_floating_point<_Rep2>::value)>::type>
	  constexpr explicit duration(const _Rep2& __rep)
  403b92:	55                   	push   %rbp
  403b93:	48 89 e5             	mov    %rsp,%rbp
  403b96:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403b9a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  : __r(static_cast<rep>(__rep)) { }
  403b9e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403ba2:	48 8b 10             	mov    (%rax),%rdx
  403ba5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403ba9:	48 89 10             	mov    %rdx,(%rax)
  403bac:	5d                   	pop    %rbp
  403bad:	c3                   	retq   

0000000000403bae <_ZNKSt6chrono8durationIlSt5ratioILl1ELl1000000000EEE5countEv>:
	~duration() = default;
	duration& operator=(const duration&) = default;

	// 20.11.5.2 observer
	constexpr rep
	count() const
  403bae:	55                   	push   %rbp
  403baf:	48 89 e5             	mov    %rsp,%rbp
  403bb2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{ return __r; }
  403bb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403bba:	48 8b 00             	mov    (%rax),%rax
  403bbd:	5d                   	pop    %rbp
  403bbe:	c3                   	retq   
  403bbf:	90                   	nop

0000000000403bc0 <_ZNKSt9type_infoeqERKS_>:
    bool before(const type_info& __arg) const _GLIBCXX_NOEXCEPT
    { return (__name[0] == '*' && __arg.__name[0] == '*')
	? __name < __arg.__name
	: __builtin_strcmp (__name, __arg.__name) < 0; }

    bool operator==(const type_info& __arg) const _GLIBCXX_NOEXCEPT
  403bc0:	55                   	push   %rbp
  403bc1:	48 89 e5             	mov    %rsp,%rbp
  403bc4:	48 83 ec 10          	sub    $0x10,%rsp
  403bc8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403bcc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      return ((__name == __arg.__name)
  403bd0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403bd4:	48 8b 50 08          	mov    0x8(%rax),%rdx
  403bd8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403bdc:	48 8b 40 08          	mov    0x8(%rax),%rax
	      || (__name[0] != '*' &&
  403be0:	48 39 c2             	cmp    %rax,%rdx
  403be3:	74 2e                	je     403c13 <_ZNKSt9type_infoeqERKS_+0x53>
  403be5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403be9:	48 8b 40 08          	mov    0x8(%rax),%rax
  403bed:	0f b6 00             	movzbl (%rax),%eax
  403bf0:	3c 2a                	cmp    $0x2a,%al
  403bf2:	74 26                	je     403c1a <_ZNKSt9type_infoeqERKS_+0x5a>
		  __builtin_strcmp (__name, __arg.__name) == 0));
  403bf4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403bf8:	48 8b 50 08          	mov    0x8(%rax),%rdx
  403bfc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403c00:	48 8b 40 08          	mov    0x8(%rax),%rax
  403c04:	48 89 d6             	mov    %rdx,%rsi
  403c07:	48 89 c7             	mov    %rax,%rdi
  403c0a:	e8 f1 db ff ff       	callq  401800 <strcmp@plt>
	: __builtin_strcmp (__name, __arg.__name) < 0; }

    bool operator==(const type_info& __arg) const _GLIBCXX_NOEXCEPT
    {
      return ((__name == __arg.__name)
	      || (__name[0] != '*' &&
  403c0f:	85 c0                	test   %eax,%eax
  403c11:	75 07                	jne    403c1a <_ZNKSt9type_infoeqERKS_+0x5a>
  403c13:	b8 01 00 00 00       	mov    $0x1,%eax
  403c18:	eb 05                	jmp    403c1f <_ZNKSt9type_infoeqERKS_+0x5f>
  403c1a:	b8 00 00 00 00       	mov    $0x0,%eax
		  __builtin_strcmp (__name, __arg.__name) == 0));
    }
  403c1f:	c9                   	leaveq 
  403c20:	c3                   	retq   
  403c21:	90                   	nop

0000000000403c22 <_ZNSt6thread2idC1Ev>:
    class id
    {
      native_handle_type	_M_thread;

    public:
      id() noexcept : _M_thread() { }
  403c22:	55                   	push   %rbp
  403c23:	48 89 e5             	mov    %rsp,%rbp
  403c26:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403c2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403c2e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  403c35:	5d                   	pop    %rbp
  403c36:	c3                   	retq   

0000000000403c37 <_ZSteqNSt6thread2idES0_>:
    private:
      friend class thread;
      friend class hash<thread::id>;

      friend bool
      operator==(thread::id __x, thread::id __y) noexcept
  403c37:	55                   	push   %rbp
  403c38:	48 89 e5             	mov    %rsp,%rbp
  403c3b:	48 83 ec 20          	sub    $0x20,%rsp
  403c3f:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  403c43:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { return __gthread_equal(__x._M_thread, __y._M_thread); }
  403c47:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  403c4b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403c4f:	48 89 d6             	mov    %rdx,%rsi
  403c52:	48 89 c7             	mov    %rax,%rdi
  403c55:	e8 5e e1 ff ff       	callq  401db8 <_ZL15__gthread_equalmm>
  403c5a:	85 c0                	test   %eax,%eax
  403c5c:	0f 95 c0             	setne  %al
  403c5f:	c9                   	leaveq 
  403c60:	c3                   	retq   
  403c61:	90                   	nop

0000000000403c62 <_ZNSt6threadC1EOS_>:
    // _GLIBCXX_RESOLVE_LIB_DEFECTS
    // 2097.  packaged_task constructors should be constrained
    thread(thread&) = delete;
    thread(const thread&) = delete;

    thread(thread&& __t) noexcept
  403c62:	55                   	push   %rbp
  403c63:	48 89 e5             	mov    %rsp,%rbp
  403c66:	48 83 ec 10          	sub    $0x10,%rsp
  403c6a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403c6e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { swap(__t); }
  403c72:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403c76:	48 89 c7             	mov    %rax,%rdi
  403c79:	e8 a4 ff ff ff       	callq  403c22 <_ZNSt6thread2idC1Ev>
  403c7e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  403c82:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403c86:	48 89 d6             	mov    %rdx,%rsi
  403c89:	48 89 c7             	mov    %rax,%rdi
  403c8c:	e8 27 00 00 00       	callq  403cb8 <_ZNSt6thread4swapERS_>
  403c91:	c9                   	leaveq 
  403c92:	c3                   	retq   
  403c93:	90                   	nop

0000000000403c94 <_ZNSt6threadD1Ev>:
        _M_start_thread(_M_make_routine(std::__bind_simple(
                std::forward<_Callable>(__f),
                std::forward<_Args>(__args)...)));
      }

    ~thread()
  403c94:	55                   	push   %rbp
  403c95:	48 89 e5             	mov    %rsp,%rbp
  403c98:	48 83 ec 10          	sub    $0x10,%rsp
  403c9c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      if (joinable())
  403ca0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403ca4:	48 89 c7             	mov    %rax,%rdi
  403ca7:	e8 32 00 00 00       	callq  403cde <_ZNKSt6thread8joinableEv>
  403cac:	84 c0                	test   %al,%al
  403cae:	74 05                	je     403cb5 <_ZNSt6threadD1Ev+0x21>
	std::terminate();
  403cb0:	e8 cb da ff ff       	callq  401780 <_ZSt9terminatev@plt>
    }
  403cb5:	c9                   	leaveq 
  403cb6:	c3                   	retq   
  403cb7:	90                   	nop

0000000000403cb8 <_ZNSt6thread4swapERS_>:
      swap(__t);
      return *this;
    }

    void
    swap(thread& __t) noexcept
  403cb8:	55                   	push   %rbp
  403cb9:	48 89 e5             	mov    %rsp,%rbp
  403cbc:	48 83 ec 10          	sub    $0x10,%rsp
  403cc0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403cc4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { std::swap(_M_id, __t._M_id); }
  403cc8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  403ccc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403cd0:	48 89 d6             	mov    %rdx,%rsi
  403cd3:	48 89 c7             	mov    %rax,%rdi
  403cd6:	e8 96 11 00 00       	callq  404e71 <_ZSt4swapINSt6thread2idEEvRT_S3_>
  403cdb:	c9                   	leaveq 
  403cdc:	c3                   	retq   
  403cdd:	90                   	nop

0000000000403cde <_ZNKSt6thread8joinableEv>:

    bool
    joinable() const noexcept
  403cde:	55                   	push   %rbp
  403cdf:	48 89 e5             	mov    %rsp,%rbp
  403ce2:	48 83 ec 20          	sub    $0x20,%rsp
  403ce6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return !(_M_id == id()); }
  403cea:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  403cee:	48 89 c7             	mov    %rax,%rdi
  403cf1:	e8 2c ff ff ff       	callq  403c22 <_ZNSt6thread2idC1Ev>
  403cf6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  403cfa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  403cfe:	48 89 d6             	mov    %rdx,%rsi
  403d01:	48 8b 38             	mov    (%rax),%rdi
  403d04:	e8 2e ff ff ff       	callq  403c37 <_ZSteqNSt6thread2idES0_>
  403d09:	83 f0 01             	xor    $0x1,%eax
  403d0c:	c9                   	leaveq 
  403d0d:	c3                   	retq   

0000000000403d0e <_ZNSt6thread13native_handleEv>:
    { return _M_id; }

    /** @pre thread is joinable
     */
    native_handle_type
    native_handle()
  403d0e:	55                   	push   %rbp
  403d0f:	48 89 e5             	mov    %rsp,%rbp
  403d12:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _M_id._M_thread; }
  403d16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403d1a:	48 8b 00             	mov    (%rax),%rax
  403d1d:	5d                   	pop    %rbp
  403d1e:	c3                   	retq   
  403d1f:	90                   	nop

0000000000403d20 <_ZNSt12__shared_ptrINSt6thread10_Impl_baseELN9__gnu_cxx12_Lock_policyE2EED1Ev>:
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
  403d20:	55                   	push   %rbp
  403d21:	48 89 e5             	mov    %rsp,%rbp
  403d24:	48 83 ec 10          	sub    $0x10,%rsp
  403d28:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403d2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403d30:	48 83 c0 08          	add    $0x8,%rax
  403d34:	48 89 c7             	mov    %rax,%rdi
  403d37:	e8 86 11 00 00       	callq  404ec2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EED1Ev>
  403d3c:	c9                   	leaveq 
  403d3d:	c3                   	retq   

0000000000403d3e <_ZNSt10shared_ptrINSt6thread10_Impl_baseEED1Ev>:
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
  403d3e:	55                   	push   %rbp
  403d3f:	48 89 e5             	mov    %rsp,%rbp
  403d42:	48 83 ec 10          	sub    $0x10,%rsp
  403d46:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403d4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403d4e:	48 89 c7             	mov    %rax,%rdi
  403d51:	e8 ca ff ff ff       	callq  403d20 <_ZNSt12__shared_ptrINSt6thread10_Impl_baseELN9__gnu_cxx12_Lock_policyE2EED1Ev>
  403d56:	c9                   	leaveq 
  403d57:	c3                   	retq   

0000000000403d58 <_ZNSt6thread10_Impl_baseD1Ev>:
	operator<<(basic_ostream<_CharT, _Traits>& __out, thread::id __id);
    };

    // Simple base type that the templatized, derived class containing
    // an arbitrary functor can be converted to and called.
    struct _Impl_base
  403d58:	55                   	push   %rbp
  403d59:	48 89 e5             	mov    %rsp,%rbp
  403d5c:	48 83 ec 10          	sub    $0x10,%rsp
  403d60:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403d64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403d68:	48 c7 00 90 c2 40 00 	movq   $0x40c290,(%rax)
  403d6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403d73:	48 83 c0 08          	add    $0x8,%rax
  403d77:	48 89 c7             	mov    %rax,%rdi
  403d7a:	e8 bf ff ff ff       	callq  403d3e <_ZNSt10shared_ptrINSt6thread10_Impl_baseEED1Ev>
  403d7f:	b8 00 00 00 00       	mov    $0x0,%eax
  403d84:	85 c0                	test   %eax,%eax
  403d86:	74 0c                	je     403d94 <_ZNSt6thread10_Impl_baseD1Ev+0x3c>
  403d88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403d8c:	48 89 c7             	mov    %rax,%rdi
  403d8f:	e8 cc d8 ff ff       	callq  401660 <_ZdlPv@plt>
  403d94:	c9                   	leaveq 
  403d95:	c3                   	retq   

0000000000403d96 <_ZNSt6thread10_Impl_baseD0Ev>:
  403d96:	55                   	push   %rbp
  403d97:	48 89 e5             	mov    %rsp,%rbp
  403d9a:	48 83 ec 10          	sub    $0x10,%rsp
  403d9e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403da2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403da6:	48 89 c7             	mov    %rax,%rdi
  403da9:	e8 aa ff ff ff       	callq  403d58 <_ZNSt6thread10_Impl_baseD1Ev>
  403dae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403db2:	48 89 c7             	mov    %rax,%rdi
  403db5:	e8 a6 d8 ff ff       	callq  401660 <_ZdlPv@plt>
  403dba:	c9                   	leaveq 
  403dbb:	c3                   	retq   

0000000000403dbc <_ZStanSt12memory_orderSt23__memory_order_modifier>:
    return memory_order(__m | int(__mod));
  }

  constexpr memory_order
  operator&(memory_order __m, __memory_order_modifier __mod)
  {
  403dbc:	55                   	push   %rbp
  403dbd:	48 89 e5             	mov    %rsp,%rbp
  403dc0:	89 7d fc             	mov    %edi,-0x4(%rbp)
  403dc3:	89 75 f8             	mov    %esi,-0x8(%rbp)
    return memory_order(__m & int(__mod));
  403dc6:	8b 55 fc             	mov    -0x4(%rbp),%edx
  403dc9:	8b 45 f8             	mov    -0x8(%rbp),%eax
  403dcc:	21 d0                	and    %edx,%eax
  }
  403dce:	5d                   	pop    %rbp
  403dcf:	c3                   	retq   

0000000000403dd0 <_ZNSt11atomic_boolaSEb>:
    atomic_bool& operator=(const atomic_bool&) volatile = delete;

    constexpr atomic_bool(bool __i) noexcept : _M_base(__i) { }

    bool
    operator=(bool __i) noexcept
  403dd0:	55                   	push   %rbp
  403dd1:	48 89 e5             	mov    %rsp,%rbp
  403dd4:	48 83 ec 10          	sub    $0x10,%rsp
  403dd8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403ddc:	89 f0                	mov    %esi,%eax
  403dde:	88 45 f4             	mov    %al,-0xc(%rbp)
    { return _M_base.operator=(__i); }
  403de1:	0f b6 55 f4          	movzbl -0xc(%rbp),%edx
  403de5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403de9:	89 d6                	mov    %edx,%esi
  403deb:	48 89 c7             	mov    %rax,%rdi
  403dee:	e8 f9 10 00 00       	callq  404eec <_ZNSt13__atomic_baseIbEaSEb>
  403df3:	c9                   	leaveq 
  403df4:	c3                   	retq   
  403df5:	90                   	nop

0000000000403df6 <_ZNSt11atomic_bool5storeEbSt12memory_order>:

    bool
    is_lock_free() const volatile noexcept { return _M_base.is_lock_free(); }

    void
    store(bool __i, memory_order __m = memory_order_seq_cst) noexcept
  403df6:	55                   	push   %rbp
  403df7:	48 89 e5             	mov    %rsp,%rbp
  403dfa:	48 83 ec 10          	sub    $0x10,%rsp
  403dfe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403e02:	89 f0                	mov    %esi,%eax
  403e04:	89 55 f0             	mov    %edx,-0x10(%rbp)
  403e07:	88 45 f4             	mov    %al,-0xc(%rbp)
    { _M_base.store(__i, __m); }
  403e0a:	0f b6 4d f4          	movzbl -0xc(%rbp),%ecx
  403e0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403e12:	8b 55 f0             	mov    -0x10(%rbp),%edx
  403e15:	89 ce                	mov    %ecx,%esi
  403e17:	48 89 c7             	mov    %rax,%rdi
  403e1a:	e8 2b 11 00 00       	callq  404f4a <_ZNSt13__atomic_baseIbE5storeEbSt12memory_order>
  403e1f:	c9                   	leaveq 
  403e20:	c3                   	retq   
  403e21:	90                   	nop

0000000000403e22 <_ZNKSt11atomic_bool4loadESt12memory_order>:
    void
    store(bool __i, memory_order __m = memory_order_seq_cst) volatile noexcept
    { _M_base.store(__i, __m); }

    bool
    load(memory_order __m = memory_order_seq_cst) const noexcept
  403e22:	55                   	push   %rbp
  403e23:	48 89 e5             	mov    %rsp,%rbp
  403e26:	48 83 ec 10          	sub    $0x10,%rsp
  403e2a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403e2e:	89 75 f4             	mov    %esi,-0xc(%rbp)
    { return _M_base.load(__m); }
  403e31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403e35:	8b 55 f4             	mov    -0xc(%rbp),%edx
  403e38:	89 d6                	mov    %edx,%esi
  403e3a:	48 89 c7             	mov    %rax,%rdi
  403e3d:	e8 d8 10 00 00       	callq  404f1a <_ZNKSt13__atomic_baseIbE4loadESt12memory_order>
  403e42:	c9                   	leaveq 
  403e43:	c3                   	retq   

0000000000403e44 <_ZN7barrier8internal19confidence_intervalC1Em>:
		//! For v degrees of freedom, t_critical_value[v-1] gives the associated critical value. v is limited in the range
		// [1 : 30]
		static const double t_critical_value[];
	
	public:	
		confidence_interval(std::size_t num_samples){ samples.reserve(num_samples); }
  403e44:	55                   	push   %rbp
  403e45:	48 89 e5             	mov    %rsp,%rbp
  403e48:	53                   	push   %rbx
  403e49:	48 83 ec 18          	sub    $0x18,%rsp
  403e4d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  403e51:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  403e55:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  403e59:	48 89 c7             	mov    %rax,%rdi
  403e5c:	e8 1f 11 00 00       	callq  404f80 <_ZNSt6vectorIdSaIdEEC1Ev>
  403e61:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  403e65:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  403e69:	48 89 d6             	mov    %rdx,%rsi
  403e6c:	48 89 c7             	mov    %rax,%rdi
  403e6f:	e8 6a 11 00 00       	callq  404fde <_ZNSt6vectorIdSaIdEE7reserveEm>
  403e74:	eb 1a                	jmp    403e90 <_ZN7barrier8internal19confidence_intervalC1Em+0x4c>
  403e76:	48 89 c3             	mov    %rax,%rbx
  403e79:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  403e7d:	48 89 c7             	mov    %rax,%rdi
  403e80:	e8 15 11 00 00       	callq  404f9a <_ZNSt6vectorIdSaIdEED1Ev>
  403e85:	48 89 d8             	mov    %rbx,%rax
  403e88:	48 89 c7             	mov    %rax,%rdi
  403e8b:	e8 90 da ff ff       	callq  401920 <_Unwind_Resume@plt>
  403e90:	48 83 c4 18          	add    $0x18,%rsp
  403e94:	5b                   	pop    %rbx
  403e95:	5d                   	pop    %rbp
  403e96:	c3                   	retq   
  403e97:	90                   	nop

0000000000403e98 <_ZN7barrier8internal19confidence_interval3addEd>:

		// add this sample 
		void add(double v){ samples.push_back(v); }
  403e98:	55                   	push   %rbp
  403e99:	48 89 e5             	mov    %rsp,%rbp
  403e9c:	48 83 ec 10          	sub    $0x10,%rsp
  403ea0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403ea4:	f2 0f 11 45 f0       	movsd  %xmm0,-0x10(%rbp)
  403ea9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403ead:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  403eb1:	48 89 d6             	mov    %rdx,%rsi
  403eb4:	48 89 c7             	mov    %rax,%rdi
  403eb7:	e8 6e 12 00 00       	callq  40512a <_ZNSt6vectorIdSaIdEE9push_backERKd>
  403ebc:	c9                   	leaveq 
  403ebd:	c3                   	retq   

0000000000403ebe <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  403ebe:	55                   	push   %rbp
  403ebf:	48 89 e5             	mov    %rsp,%rbp
  403ec2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  403ec6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403eca:	5d                   	pop    %rbp
  403ecb:	c3                   	retq   

0000000000403ecc <_ZSt7forwardIRdEOT_RNSt16remove_referenceIS1_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  403ecc:	55                   	push   %rbp
  403ecd:	48 89 e5             	mov    %rsp,%rbp
  403ed0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  403ed4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403ed8:	5d                   	pop    %rbp
  403ed9:	c3                   	retq   

0000000000403eda <_ZNSt11_Tuple_implILm3EIEEC1Ev>:
  template<std::size_t _Idx>
    struct _Tuple_impl<_Idx>
    {
      template<std::size_t, typename...> friend class _Tuple_impl;

      _Tuple_impl() = default;
  403eda:	55                   	push   %rbp
  403edb:	48 89 e5             	mov    %rsp,%rbp
  403ede:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403ee2:	5d                   	pop    %rbp
  403ee3:	c3                   	retq   

0000000000403ee4 <_ZNSt10_Head_baseILm2EdLb0EEC2IdvEEOT_>:
      : _M_head_impl(__h) { }

      template<typename _UHead, typename = typename
	       enable_if<!is_convertible<_UHead,
	                                 __uses_alloc_base>::value>::type>
        constexpr _Head_base(_UHead&& __h)
  403ee4:	55                   	push   %rbp
  403ee5:	48 89 e5             	mov    %rsp,%rbp
  403ee8:	48 83 ec 10          	sub    $0x10,%rsp
  403eec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403ef0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
  403ef4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403ef8:	48 89 c7             	mov    %rax,%rdi
  403efb:	e8 be ff ff ff       	callq  403ebe <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
  403f00:	48 8b 00             	mov    (%rax),%rax
  403f03:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  403f07:	48 89 02             	mov    %rax,(%rdx)
  403f0a:	c9                   	leaveq 
  403f0b:	c3                   	retq   

0000000000403f0c <_ZNSt11_Tuple_implILm2EIdEEC2IdIEvEEOT_DpOT0_>:
      : _Inherited(__tail...), _Base(__head) { }

      template<typename _UHead, typename... _UTail, typename = typename
               enable_if<sizeof...(_Tail) == sizeof...(_UTail)>::type> 
        explicit
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
  403f0c:	55                   	push   %rbp
  403f0d:	48 89 e5             	mov    %rsp,%rbp
  403f10:	48 83 ec 10          	sub    $0x10,%rsp
  403f14:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403f18:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Inherited(std::forward<_UTail>(__tail)...),
	  _Base(std::forward<_UHead>(__head)) { }
  403f1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403f20:	48 89 c7             	mov    %rax,%rdi
  403f23:	e8 b2 ff ff ff       	callq  403eda <_ZNSt11_Tuple_implILm3EIEEC1Ev>
  403f28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403f2c:	48 89 c7             	mov    %rax,%rdi
  403f2f:	e8 8a ff ff ff       	callq  403ebe <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
  403f34:	48 89 c2             	mov    %rax,%rdx
  403f37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403f3b:	48 89 d6             	mov    %rdx,%rsi
  403f3e:	48 89 c7             	mov    %rax,%rdi
  403f41:	e8 9e ff ff ff       	callq  403ee4 <_ZNSt10_Head_baseILm2EdLb0EEC2IdvEEOT_>
  403f46:	c9                   	leaveq 
  403f47:	c3                   	retq   

0000000000403f48 <_ZNSt10_Head_baseILm1EdLb0EEC2IRdvEEOT_>:
      : _M_head_impl(__h) { }

      template<typename _UHead, typename = typename
	       enable_if<!is_convertible<_UHead,
	                                 __uses_alloc_base>::value>::type>
        constexpr _Head_base(_UHead&& __h)
  403f48:	55                   	push   %rbp
  403f49:	48 89 e5             	mov    %rsp,%rbp
  403f4c:	48 83 ec 10          	sub    $0x10,%rsp
  403f50:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403f54:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
  403f58:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403f5c:	48 89 c7             	mov    %rax,%rdi
  403f5f:	e8 68 ff ff ff       	callq  403ecc <_ZSt7forwardIRdEOT_RNSt16remove_referenceIS1_E4typeE>
  403f64:	48 8b 00             	mov    (%rax),%rax
  403f67:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  403f6b:	48 89 02             	mov    %rax,(%rdx)
  403f6e:	c9                   	leaveq 
  403f6f:	c3                   	retq   

0000000000403f70 <_ZNSt11_Tuple_implILm1EIddEEC2IRdIdEvEEOT_DpOT0_>:
      : _Inherited(__tail...), _Base(__head) { }

      template<typename _UHead, typename... _UTail, typename = typename
               enable_if<sizeof...(_Tail) == sizeof...(_UTail)>::type> 
        explicit
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
  403f70:	55                   	push   %rbp
  403f71:	48 89 e5             	mov    %rsp,%rbp
  403f74:	48 83 ec 20          	sub    $0x20,%rsp
  403f78:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403f7c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  403f80:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: _Inherited(std::forward<_UTail>(__tail)...),
  403f84:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  403f88:	48 89 c7             	mov    %rax,%rdi
  403f8b:	e8 2e ff ff ff       	callq  403ebe <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
  403f90:	48 89 c2             	mov    %rax,%rdx
	  _Base(std::forward<_UHead>(__head)) { }
  403f93:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403f97:	48 89 d6             	mov    %rdx,%rsi
  403f9a:	48 89 c7             	mov    %rax,%rdi
  403f9d:	e8 6a ff ff ff       	callq  403f0c <_ZNSt11_Tuple_implILm2EIdEEC2IdIEvEEOT_DpOT0_>
  403fa2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403fa6:	48 89 c7             	mov    %rax,%rdi
  403fa9:	e8 1e ff ff ff       	callq  403ecc <_ZSt7forwardIRdEOT_RNSt16remove_referenceIS1_E4typeE>
  403fae:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  403fb2:	48 83 c2 08          	add    $0x8,%rdx
  403fb6:	48 89 c6             	mov    %rax,%rsi
  403fb9:	48 89 d7             	mov    %rdx,%rdi
  403fbc:	e8 87 ff ff ff       	callq  403f48 <_ZNSt10_Head_baseILm1EdLb0EEC2IRdvEEOT_>
  403fc1:	c9                   	leaveq 
  403fc2:	c3                   	retq   
  403fc3:	90                   	nop

0000000000403fc4 <_ZNSt10_Head_baseILm0EdLb0EEC2IdvEEOT_>:
      : _M_head_impl(__h) { }

      template<typename _UHead, typename = typename
	       enable_if<!is_convertible<_UHead,
	                                 __uses_alloc_base>::value>::type>
        constexpr _Head_base(_UHead&& __h)
  403fc4:	55                   	push   %rbp
  403fc5:	48 89 e5             	mov    %rsp,%rbp
  403fc8:	48 83 ec 10          	sub    $0x10,%rsp
  403fcc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  403fd0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
  403fd4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403fd8:	48 89 c7             	mov    %rax,%rdi
  403fdb:	e8 de fe ff ff       	callq  403ebe <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
  403fe0:	48 8b 00             	mov    (%rax),%rax
  403fe3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  403fe7:	48 89 02             	mov    %rax,(%rdx)
  403fea:	c9                   	leaveq 
  403feb:	c3                   	retq   

0000000000403fec <_ZNSt11_Tuple_implILm0EIdddEEC2IdIRddEvEEOT_DpOT0_>:
      : _Inherited(__tail...), _Base(__head) { }

      template<typename _UHead, typename... _UTail, typename = typename
               enable_if<sizeof...(_Tail) == sizeof...(_UTail)>::type> 
        explicit
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
  403fec:	55                   	push   %rbp
  403fed:	48 89 e5             	mov    %rsp,%rbp
  403ff0:	53                   	push   %rbx
  403ff1:	48 83 ec 28          	sub    $0x28,%rsp
  403ff5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  403ff9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  403ffd:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  404001:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	: _Inherited(std::forward<_UTail>(__tail)...),
  404005:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  404009:	48 89 c7             	mov    %rax,%rdi
  40400c:	e8 ad fe ff ff       	callq  403ebe <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
  404011:	48 89 c3             	mov    %rax,%rbx
  404014:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  404018:	48 89 c7             	mov    %rax,%rdi
  40401b:	e8 ac fe ff ff       	callq  403ecc <_ZSt7forwardIRdEOT_RNSt16remove_referenceIS1_E4typeE>
  404020:	48 89 c1             	mov    %rax,%rcx
	  _Base(std::forward<_UHead>(__head)) { }
  404023:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404027:	48 89 da             	mov    %rbx,%rdx
  40402a:	48 89 ce             	mov    %rcx,%rsi
  40402d:	48 89 c7             	mov    %rax,%rdi
  404030:	e8 3b ff ff ff       	callq  403f70 <_ZNSt11_Tuple_implILm1EIddEEC2IRdIdEvEEOT_DpOT0_>
  404035:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  404039:	48 89 c7             	mov    %rax,%rdi
  40403c:	e8 7d fe ff ff       	callq  403ebe <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
  404041:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  404045:	48 83 c2 10          	add    $0x10,%rdx
  404049:	48 89 c6             	mov    %rax,%rsi
  40404c:	48 89 d7             	mov    %rdx,%rdi
  40404f:	e8 70 ff ff ff       	callq  403fc4 <_ZNSt10_Head_baseILm0EdLb0EEC2IdvEEOT_>
  404054:	48 83 c4 28          	add    $0x28,%rsp
  404058:	5b                   	pop    %rbx
  404059:	5d                   	pop    %rbp
  40405a:	c3                   	retq   
  40405b:	90                   	nop

000000000040405c <_ZNSt5tupleIIdddEEC1IIdRddEvEEDpOT_>:

      template<typename... _UElements, typename = typename
        enable_if<__and_<is_convertible<_UElements,
					_Elements>...>::value>::type>
	explicit
        constexpr tuple(_UElements&&... __elements)
  40405c:	55                   	push   %rbp
  40405d:	48 89 e5             	mov    %rsp,%rbp
  404060:	41 54                	push   %r12
  404062:	53                   	push   %rbx
  404063:	48 83 ec 20          	sub    $0x20,%rsp
  404067:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40406b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40406f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  404073:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	: _Inherited(std::forward<_UElements>(__elements)...) {	}
  404077:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40407b:	48 89 c7             	mov    %rax,%rdi
  40407e:	e8 3b fe ff ff       	callq  403ebe <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
  404083:	49 89 c4             	mov    %rax,%r12
  404086:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40408a:	48 89 c7             	mov    %rax,%rdi
  40408d:	e8 3a fe ff ff       	callq  403ecc <_ZSt7forwardIRdEOT_RNSt16remove_referenceIS1_E4typeE>
  404092:	48 89 c3             	mov    %rax,%rbx
  404095:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  404099:	48 89 c7             	mov    %rax,%rdi
  40409c:	e8 1d fe ff ff       	callq  403ebe <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
  4040a1:	48 89 c6             	mov    %rax,%rsi
  4040a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4040a8:	4c 89 e1             	mov    %r12,%rcx
  4040ab:	48 89 da             	mov    %rbx,%rdx
  4040ae:	48 89 c7             	mov    %rax,%rdi
  4040b1:	e8 36 ff ff ff       	callq  403fec <_ZNSt11_Tuple_implILm0EIdddEEC2IdIRddEvEEOT_DpOT0_>
  4040b6:	48 83 c4 20          	add    $0x20,%rsp
  4040ba:	5b                   	pop    %rbx
  4040bb:	41 5c                	pop    %r12
  4040bd:	5d                   	pop    %rbp
  4040be:	c3                   	retq   

00000000004040bf <_ZNSt11_Tuple_implILm2EIdEE7_M_tailERS0_>:

      static constexpr const _Head&
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr _Inherited&
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
  4040bf:	55                   	push   %rbp
  4040c0:	48 89 e5             	mov    %rsp,%rbp
  4040c3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4040c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4040cb:	5d                   	pop    %rbp
  4040cc:	c3                   	retq   

00000000004040cd <_ZSt4moveIRSt11_Tuple_implILm3EIEEEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
  4040cd:	55                   	push   %rbp
  4040ce:	48 89 e5             	mov    %rsp,%rbp
  4040d1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  4040d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4040d9:	5d                   	pop    %rbp
  4040da:	c3                   	retq   

00000000004040db <_ZNSt10_Head_baseILm2EdLb0EE7_M_headERS0_>:
      template<typename _Alloc, typename _UHead>
	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
  4040db:	55                   	push   %rbp
  4040dc:	48 89 e5             	mov    %rsp,%rbp
  4040df:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4040e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4040e7:	5d                   	pop    %rbp
  4040e8:	c3                   	retq   

00000000004040e9 <_ZNSt11_Tuple_implILm2EIdEE7_M_headERS0_>:

      typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
      typedef _Head_base<_Idx, _Head, __empty_not_final<_Head>::value> _Base;

      static constexpr _Head&  
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
  4040e9:	55                   	push   %rbp
  4040ea:	48 89 e5             	mov    %rsp,%rbp
  4040ed:	48 83 ec 10          	sub    $0x10,%rsp
  4040f1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4040f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4040f9:	48 89 c7             	mov    %rax,%rdi
  4040fc:	e8 da ff ff ff       	callq  4040db <_ZNSt10_Head_baseILm2EdLb0EE7_M_headERS0_>
  404101:	c9                   	leaveq 
  404102:	c3                   	retq   
  404103:	90                   	nop

0000000000404104 <_ZNSt11_Tuple_implILm2EIdEEC2EOS0_>:
	  _Base(std::forward<_UHead>(__head)) { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;

      constexpr
      _Tuple_impl(_Tuple_impl&& __in)
  404104:	55                   	push   %rbp
  404105:	48 89 e5             	mov    %rsp,%rbp
  404108:	48 83 ec 10          	sub    $0x10,%rsp
  40410c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404110:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      noexcept(__and_<is_nothrow_move_constructible<_Head>,
	              is_nothrow_move_constructible<_Inherited>>::value)
      : _Inherited(std::move(_M_tail(__in))), 
  404114:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404118:	48 89 c7             	mov    %rax,%rdi
  40411b:	e8 9f ff ff ff       	callq  4040bf <_ZNSt11_Tuple_implILm2EIdEE7_M_tailERS0_>
  404120:	48 89 c7             	mov    %rax,%rdi
  404123:	e8 a5 ff ff ff       	callq  4040cd <_ZSt4moveIRSt11_Tuple_implILm3EIEEEONSt16remove_referenceIT_E4typeEOS4_>
	_Base(std::forward<_Head>(_M_head(__in))) { }
  404128:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40412c:	48 89 c7             	mov    %rax,%rdi
  40412f:	e8 b5 ff ff ff       	callq  4040e9 <_ZNSt11_Tuple_implILm2EIdEE7_M_headERS0_>
  404134:	48 89 c7             	mov    %rax,%rdi
  404137:	e8 82 fd ff ff       	callq  403ebe <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
  40413c:	48 89 c2             	mov    %rax,%rdx
  40413f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404143:	48 89 d6             	mov    %rdx,%rsi
  404146:	48 89 c7             	mov    %rax,%rdi
  404149:	e8 96 fd ff ff       	callq  403ee4 <_ZNSt10_Head_baseILm2EdLb0EEC2IdvEEOT_>
  40414e:	c9                   	leaveq 
  40414f:	c3                   	retq   

0000000000404150 <_ZNSt11_Tuple_implILm1EIddEE7_M_tailERS0_>:

      static constexpr const _Head&
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr _Inherited&
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
  404150:	55                   	push   %rbp
  404151:	48 89 e5             	mov    %rsp,%rbp
  404154:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404158:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40415c:	5d                   	pop    %rbp
  40415d:	c3                   	retq   

000000000040415e <_ZSt4moveIRSt11_Tuple_implILm2EIdEEEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
  40415e:	55                   	push   %rbp
  40415f:	48 89 e5             	mov    %rsp,%rbp
  404162:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  404166:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40416a:	5d                   	pop    %rbp
  40416b:	c3                   	retq   

000000000040416c <_ZNSt10_Head_baseILm1EdLb0EE7_M_headERS0_>:
      template<typename _Alloc, typename _UHead>
	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
  40416c:	55                   	push   %rbp
  40416d:	48 89 e5             	mov    %rsp,%rbp
  404170:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404174:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404178:	5d                   	pop    %rbp
  404179:	c3                   	retq   

000000000040417a <_ZNSt11_Tuple_implILm1EIddEE7_M_headERS0_>:

      typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
      typedef _Head_base<_Idx, _Head, __empty_not_final<_Head>::value> _Base;

      static constexpr _Head&  
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
  40417a:	55                   	push   %rbp
  40417b:	48 89 e5             	mov    %rsp,%rbp
  40417e:	48 83 ec 10          	sub    $0x10,%rsp
  404182:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404186:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40418a:	48 83 c0 08          	add    $0x8,%rax
  40418e:	48 89 c7             	mov    %rax,%rdi
  404191:	e8 d6 ff ff ff       	callq  40416c <_ZNSt10_Head_baseILm1EdLb0EE7_M_headERS0_>
  404196:	c9                   	leaveq 
  404197:	c3                   	retq   

0000000000404198 <_ZNSt10_Head_baseILm1EdLb0EEC2IdvEEOT_>:
      : _M_head_impl(__h) { }

      template<typename _UHead, typename = typename
	       enable_if<!is_convertible<_UHead,
	                                 __uses_alloc_base>::value>::type>
        constexpr _Head_base(_UHead&& __h)
  404198:	55                   	push   %rbp
  404199:	48 89 e5             	mov    %rsp,%rbp
  40419c:	48 83 ec 10          	sub    $0x10,%rsp
  4041a0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4041a4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
  4041a8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4041ac:	48 89 c7             	mov    %rax,%rdi
  4041af:	e8 0a fd ff ff       	callq  403ebe <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
  4041b4:	48 8b 00             	mov    (%rax),%rax
  4041b7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4041bb:	48 89 02             	mov    %rax,(%rdx)
  4041be:	c9                   	leaveq 
  4041bf:	c3                   	retq   

00000000004041c0 <_ZNSt11_Tuple_implILm1EIddEEC2EOS0_>:
	  _Base(std::forward<_UHead>(__head)) { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;

      constexpr
      _Tuple_impl(_Tuple_impl&& __in)
  4041c0:	55                   	push   %rbp
  4041c1:	48 89 e5             	mov    %rsp,%rbp
  4041c4:	48 83 ec 10          	sub    $0x10,%rsp
  4041c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4041cc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      noexcept(__and_<is_nothrow_move_constructible<_Head>,
	              is_nothrow_move_constructible<_Inherited>>::value)
      : _Inherited(std::move(_M_tail(__in))), 
  4041d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4041d4:	48 89 c7             	mov    %rax,%rdi
  4041d7:	e8 74 ff ff ff       	callq  404150 <_ZNSt11_Tuple_implILm1EIddEE7_M_tailERS0_>
  4041dc:	48 89 c7             	mov    %rax,%rdi
  4041df:	e8 7a ff ff ff       	callq  40415e <_ZSt4moveIRSt11_Tuple_implILm2EIdEEEONSt16remove_referenceIT_E4typeEOS4_>
  4041e4:	48 89 c2             	mov    %rax,%rdx
	_Base(std::forward<_Head>(_M_head(__in))) { }
  4041e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4041eb:	48 89 d6             	mov    %rdx,%rsi
  4041ee:	48 89 c7             	mov    %rax,%rdi
  4041f1:	e8 0e ff ff ff       	callq  404104 <_ZNSt11_Tuple_implILm2EIdEEC2EOS0_>
  4041f6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4041fa:	48 89 c7             	mov    %rax,%rdi
  4041fd:	e8 78 ff ff ff       	callq  40417a <_ZNSt11_Tuple_implILm1EIddEE7_M_headERS0_>
  404202:	48 89 c7             	mov    %rax,%rdi
  404205:	e8 b4 fc ff ff       	callq  403ebe <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
  40420a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40420e:	48 83 c2 08          	add    $0x8,%rdx
  404212:	48 89 c6             	mov    %rax,%rsi
  404215:	48 89 d7             	mov    %rdx,%rdi
  404218:	e8 7b ff ff ff       	callq  404198 <_ZNSt10_Head_baseILm1EdLb0EEC2IdvEEOT_>
  40421d:	c9                   	leaveq 
  40421e:	c3                   	retq   

000000000040421f <_ZNSt11_Tuple_implILm0EIdddEE7_M_tailERS0_>:

      static constexpr const _Head&
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr _Inherited&
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
  40421f:	55                   	push   %rbp
  404220:	48 89 e5             	mov    %rsp,%rbp
  404223:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404227:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40422b:	5d                   	pop    %rbp
  40422c:	c3                   	retq   

000000000040422d <_ZSt4moveIRSt11_Tuple_implILm1EIddEEEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
  40422d:	55                   	push   %rbp
  40422e:	48 89 e5             	mov    %rsp,%rbp
  404231:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  404235:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404239:	5d                   	pop    %rbp
  40423a:	c3                   	retq   

000000000040423b <_ZNSt10_Head_baseILm0EdLb0EE7_M_headERS0_>:
      template<typename _Alloc, typename _UHead>
	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
  40423b:	55                   	push   %rbp
  40423c:	48 89 e5             	mov    %rsp,%rbp
  40423f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404243:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404247:	5d                   	pop    %rbp
  404248:	c3                   	retq   

0000000000404249 <_ZNSt11_Tuple_implILm0EIdddEE7_M_headERS0_>:

      typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
      typedef _Head_base<_Idx, _Head, __empty_not_final<_Head>::value> _Base;

      static constexpr _Head&  
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
  404249:	55                   	push   %rbp
  40424a:	48 89 e5             	mov    %rsp,%rbp
  40424d:	48 83 ec 10          	sub    $0x10,%rsp
  404251:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404255:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404259:	48 83 c0 10          	add    $0x10,%rax
  40425d:	48 89 c7             	mov    %rax,%rdi
  404260:	e8 d6 ff ff ff       	callq  40423b <_ZNSt10_Head_baseILm0EdLb0EE7_M_headERS0_>
  404265:	c9                   	leaveq 
  404266:	c3                   	retq   
  404267:	90                   	nop

0000000000404268 <_ZNSt11_Tuple_implILm0EIdddEEC2EOS0_>:
	  _Base(std::forward<_UHead>(__head)) { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;

      constexpr
      _Tuple_impl(_Tuple_impl&& __in)
  404268:	55                   	push   %rbp
  404269:	48 89 e5             	mov    %rsp,%rbp
  40426c:	48 83 ec 10          	sub    $0x10,%rsp
  404270:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404274:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      noexcept(__and_<is_nothrow_move_constructible<_Head>,
	              is_nothrow_move_constructible<_Inherited>>::value)
      : _Inherited(std::move(_M_tail(__in))), 
  404278:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40427c:	48 89 c7             	mov    %rax,%rdi
  40427f:	e8 9b ff ff ff       	callq  40421f <_ZNSt11_Tuple_implILm0EIdddEE7_M_tailERS0_>
  404284:	48 89 c7             	mov    %rax,%rdi
  404287:	e8 a1 ff ff ff       	callq  40422d <_ZSt4moveIRSt11_Tuple_implILm1EIddEEEONSt16remove_referenceIT_E4typeEOS4_>
  40428c:	48 89 c2             	mov    %rax,%rdx
	_Base(std::forward<_Head>(_M_head(__in))) { }
  40428f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404293:	48 89 d6             	mov    %rdx,%rsi
  404296:	48 89 c7             	mov    %rax,%rdi
  404299:	e8 22 ff ff ff       	callq  4041c0 <_ZNSt11_Tuple_implILm1EIddEEC2EOS0_>
  40429e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4042a2:	48 89 c7             	mov    %rax,%rdi
  4042a5:	e8 9f ff ff ff       	callq  404249 <_ZNSt11_Tuple_implILm0EIdddEE7_M_headERS0_>
  4042aa:	48 89 c7             	mov    %rax,%rdi
  4042ad:	e8 0c fc ff ff       	callq  403ebe <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
  4042b2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4042b6:	48 83 c2 10          	add    $0x10,%rdx
  4042ba:	48 89 c6             	mov    %rax,%rsi
  4042bd:	48 89 d7             	mov    %rdx,%rdi
  4042c0:	e8 ff fc ff ff       	callq  403fc4 <_ZNSt10_Head_baseILm0EdLb0EEC2IdvEEOT_>
  4042c5:	c9                   	leaveq 
  4042c6:	c3                   	retq   
  4042c7:	90                   	nop

00000000004042c8 <_ZNSt5tupleIIdddEEC1EOS0_>:
        constexpr tuple(_UElements&&... __elements)
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default; 
  4042c8:	55                   	push   %rbp
  4042c9:	48 89 e5             	mov    %rsp,%rbp
  4042cc:	48 83 ec 10          	sub    $0x10,%rsp
  4042d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4042d4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4042d8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4042dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4042e0:	48 89 d6             	mov    %rdx,%rsi
  4042e3:	48 89 c7             	mov    %rax,%rdi
  4042e6:	e8 7d ff ff ff       	callq  404268 <_ZNSt11_Tuple_implILm0EIdddEEC2EOS0_>
  4042eb:	c9                   	leaveq 
  4042ec:	c3                   	retq   

00000000004042ed <_ZSt10make_tupleIIdRddEESt5tupleIIDpNSt17__decay_and_stripIT_E6__typeEEEDpOS3_>:
    { return !(__t < __u); }

  // NB: DR 705.
  template<typename... _Elements>
    constexpr tuple<typename __decay_and_strip<_Elements>::__type...>
    make_tuple(_Elements&&... __args)
  4042ed:	55                   	push   %rbp
  4042ee:	48 89 e5             	mov    %rsp,%rbp
  4042f1:	41 54                	push   %r12
  4042f3:	53                   	push   %rbx
  4042f4:	48 83 ec 20          	sub    $0x20,%rsp
  4042f8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4042fc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  404300:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  404304:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    {
      typedef tuple<typename __decay_and_strip<_Elements>::__type...>
	__result_type;
      return __result_type(std::forward<_Elements>(__args)...);
  404308:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40430c:	48 89 c7             	mov    %rax,%rdi
  40430f:	e8 aa fb ff ff       	callq  403ebe <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
  404314:	49 89 c4             	mov    %rax,%r12
  404317:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40431b:	48 89 c7             	mov    %rax,%rdi
  40431e:	e8 a9 fb ff ff       	callq  403ecc <_ZSt7forwardIRdEOT_RNSt16remove_referenceIS1_E4typeE>
  404323:	48 89 c3             	mov    %rax,%rbx
  404326:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40432a:	48 89 c7             	mov    %rax,%rdi
  40432d:	e8 8c fb ff ff       	callq  403ebe <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
  404332:	48 89 c6             	mov    %rax,%rsi
  404335:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404339:	4c 89 e1             	mov    %r12,%rcx
  40433c:	48 89 da             	mov    %rbx,%rdx
  40433f:	48 89 c7             	mov    %rax,%rdi
  404342:	e8 15 fd ff ff       	callq  40405c <_ZNSt5tupleIIdddEEC1IIdRddEvEEDpOT_>
    }
  404347:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40434b:	48 83 c4 20          	add    $0x20,%rsp
  40434f:	5b                   	pop    %rbx
  404350:	41 5c                	pop    %r12
  404352:	5d                   	pop    %rbp
  404353:	c3                   	retq   

0000000000404354 <_ZN7barrier8internal19confidence_interval4meanEv>:

		// return <lower, mean, upper>
		std::tuple<double, double, double> mean(){
  404354:	55                   	push   %rbp
  404355:	48 89 e5             	mov    %rsp,%rbp
  404358:	48 83 ec 60          	sub    $0x60,%rsp
  40435c:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  404360:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
			double m{0.0};
  404364:	b8 00 00 00 00       	mov    $0x0,%eax
  404369:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			for (std::size_t i = 0; i < samples.size(); ++i){
  40436d:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  404374:	00 
  404375:	eb 2a                	jmp    4043a1 <_ZN7barrier8internal19confidence_interval4meanEv+0x4d>
				m += samples[i];
  404377:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40437b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40437f:	48 89 d6             	mov    %rdx,%rsi
  404382:	48 89 c7             	mov    %rax,%rdi
  404385:	e8 32 0e 00 00       	callq  4051bc <_ZNSt6vectorIdSaIdEEixEm>
  40438a:	f2 0f 10 00          	movsd  (%rax),%xmm0
  40438e:	f2 0f 10 4d c8       	movsd  -0x38(%rbp),%xmm1
  404393:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  404397:	f2 0f 11 45 c8       	movsd  %xmm0,-0x38(%rbp)
		void add(double v){ samples.push_back(v); }

		// return <lower, mean, upper>
		std::tuple<double, double, double> mean(){
			double m{0.0};
			for (std::size_t i = 0; i < samples.size(); ++i){
  40439c:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  4043a1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4043a5:	48 89 c7             	mov    %rax,%rdi
  4043a8:	e8 e9 0d 00 00       	callq  405196 <_ZNKSt6vectorIdSaIdEE4sizeEv>
  4043ad:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  4043b1:	0f 97 c0             	seta   %al
  4043b4:	84 c0                	test   %al,%al
  4043b6:	75 bf                	jne    404377 <_ZN7barrier8internal19confidence_interval4meanEv+0x23>
				m += samples[i];
			}
			m /= (double)samples.size();
  4043b8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4043bc:	48 89 c7             	mov    %rax,%rdi
  4043bf:	e8 d2 0d 00 00       	callq  405196 <_ZNKSt6vectorIdSaIdEE4sizeEv>
  4043c4:	48 85 c0             	test   %rax,%rax
  4043c7:	78 07                	js     4043d0 <_ZN7barrier8internal19confidence_interval4meanEv+0x7c>
  4043c9:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
  4043ce:	eb 15                	jmp    4043e5 <_ZN7barrier8internal19confidence_interval4meanEv+0x91>
  4043d0:	48 89 c2             	mov    %rax,%rdx
  4043d3:	48 d1 ea             	shr    %rdx
  4043d6:	83 e0 01             	and    $0x1,%eax
  4043d9:	48 09 c2             	or     %rax,%rdx
  4043dc:	f2 48 0f 2a c2       	cvtsi2sd %rdx,%xmm0
  4043e1:	f2 0f 58 c0          	addsd  %xmm0,%xmm0
  4043e5:	f2 0f 10 4d c8       	movsd  -0x38(%rbp),%xmm1
  4043ea:	f2 0f 5e c8          	divsd  %xmm0,%xmm1
  4043ee:	66 0f 28 c1          	movapd %xmm1,%xmm0
  4043f2:	f2 0f 11 45 c8       	movsd  %xmm0,-0x38(%rbp)

			double s{0.0};
  4043f7:	b8 00 00 00 00       	mov    $0x0,%eax
  4043fc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
			for (std::size_t i = 0; i < samples.size(); ++i){
  404400:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  404407:	00 
  404408:	eb 5d                	jmp    404467 <_ZN7barrier8internal19confidence_interval4meanEv+0x113>
				s += ((samples[i] - m)*(samples[i] - m));
  40440a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40440e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  404412:	48 89 d6             	mov    %rdx,%rsi
  404415:	48 89 c7             	mov    %rax,%rdi
  404418:	e8 9f 0d 00 00       	callq  4051bc <_ZNSt6vectorIdSaIdEEixEm>
  40441d:	f2 0f 10 00          	movsd  (%rax),%xmm0
  404421:	f2 0f 10 4d c8       	movsd  -0x38(%rbp),%xmm1
  404426:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  40442a:	f2 0f 11 45 a8       	movsd  %xmm0,-0x58(%rbp)
  40442f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  404433:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  404437:	48 89 d6             	mov    %rdx,%rsi
  40443a:	48 89 c7             	mov    %rax,%rdi
  40443d:	e8 7a 0d 00 00       	callq  4051bc <_ZNSt6vectorIdSaIdEEixEm>
  404442:	f2 0f 10 00          	movsd  (%rax),%xmm0
  404446:	f2 0f 10 4d c8       	movsd  -0x38(%rbp),%xmm1
  40444b:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  40444f:	f2 0f 59 45 a8       	mulsd  -0x58(%rbp),%xmm0
  404454:	f2 0f 10 4d e8       	movsd  -0x18(%rbp),%xmm1
  404459:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  40445d:	f2 0f 11 45 e8       	movsd  %xmm0,-0x18(%rbp)
				m += samples[i];
			}
			m /= (double)samples.size();

			double s{0.0};
			for (std::size_t i = 0; i < samples.size(); ++i){
  404462:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  404467:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40446b:	48 89 c7             	mov    %rax,%rdi
  40446e:	e8 23 0d 00 00       	callq  405196 <_ZNKSt6vectorIdSaIdEE4sizeEv>
  404473:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  404477:	0f 97 c0             	seta   %al
  40447a:	84 c0                	test   %al,%al
  40447c:	75 8c                	jne    40440a <_ZN7barrier8internal19confidence_interval4meanEv+0xb6>
				s += ((samples[i] - m)*(samples[i] - m));
			}
			s /= (double)(samples.size() - 1); // divide by n-1 because i use sample standard deviation
  40447e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  404482:	48 89 c7             	mov    %rax,%rdi
  404485:	e8 0c 0d 00 00       	callq  405196 <_ZNKSt6vectorIdSaIdEE4sizeEv>
  40448a:	48 83 e8 01          	sub    $0x1,%rax
  40448e:	48 85 c0             	test   %rax,%rax
  404491:	78 07                	js     40449a <_ZN7barrier8internal19confidence_interval4meanEv+0x146>
  404493:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
  404498:	eb 15                	jmp    4044af <_ZN7barrier8internal19confidence_interval4meanEv+0x15b>
  40449a:	48 89 c2             	mov    %rax,%rdx
  40449d:	48 d1 ea             	shr    %rdx
  4044a0:	83 e0 01             	and    $0x1,%eax
  4044a3:	48 09 c2             	or     %rax,%rdx
  4044a6:	f2 48 0f 2a c2       	cvtsi2sd %rdx,%xmm0
  4044ab:	f2 0f 58 c0          	addsd  %xmm0,%xmm0
  4044af:	f2 0f 10 4d e8       	movsd  -0x18(%rbp),%xmm1
  4044b4:	f2 0f 5e c8          	divsd  %xmm0,%xmm1
  4044b8:	66 0f 28 c1          	movapd %xmm1,%xmm0
  4044bc:	f2 0f 11 45 e8       	movsd  %xmm0,-0x18(%rbp)

			double margin_of_error = t_critical_value[samples.size() - 1]*(std::sqrt(s)/std::sqrt((double)samples.size()));
  4044c1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4044c5:	48 89 c7             	mov    %rax,%rdi
  4044c8:	e8 c9 0c 00 00       	callq  405196 <_ZNKSt6vectorIdSaIdEE4sizeEv>
  4044cd:	48 83 e8 01          	sub    $0x1,%rax
  4044d1:	f2 0f 10 1c c5 c0 bb 	movsd  0x40bbc0(,%rax,8),%xmm3
  4044d8:	40 00 
  4044da:	f2 0f 11 5d a8       	movsd  %xmm3,-0x58(%rbp)
  4044df:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4044e3:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  4044e7:	f2 0f 10 45 a0       	movsd  -0x60(%rbp),%xmm0
  4044ec:	e8 3f d4 ff ff       	callq  401930 <sqrt@plt>
  4044f1:	f2 0f 11 45 a0       	movsd  %xmm0,-0x60(%rbp)
  4044f6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4044fa:	48 89 c7             	mov    %rax,%rdi
  4044fd:	e8 94 0c 00 00       	callq  405196 <_ZNKSt6vectorIdSaIdEE4sizeEv>
  404502:	48 85 c0             	test   %rax,%rax
  404505:	78 07                	js     40450e <_ZN7barrier8internal19confidence_interval4meanEv+0x1ba>
  404507:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
  40450c:	eb 15                	jmp    404523 <_ZN7barrier8internal19confidence_interval4meanEv+0x1cf>
  40450e:	48 89 c2             	mov    %rax,%rdx
  404511:	48 d1 ea             	shr    %rdx
  404514:	83 e0 01             	and    $0x1,%eax
  404517:	48 09 c2             	or     %rax,%rdx
  40451a:	f2 48 0f 2a c2       	cvtsi2sd %rdx,%xmm0
  40451f:	f2 0f 58 c0          	addsd  %xmm0,%xmm0
  404523:	e8 08 d4 ff ff       	callq  401930 <sqrt@plt>
  404528:	f2 0f 10 55 a0       	movsd  -0x60(%rbp),%xmm2
  40452d:	f2 0f 5e d0          	divsd  %xmm0,%xmm2
  404531:	66 0f 28 c2          	movapd %xmm2,%xmm0
  404535:	f2 0f 59 45 a8       	mulsd  -0x58(%rbp),%xmm0
  40453a:	f2 0f 11 45 f8       	movsd  %xmm0,-0x8(%rbp)

			return std::make_tuple(m - margin_of_error, m, m + margin_of_error);
  40453f:	f2 0f 10 45 c8       	movsd  -0x38(%rbp),%xmm0
  404544:	f2 0f 58 45 f8       	addsd  -0x8(%rbp),%xmm0
  404549:	f2 0f 11 45 d8       	movsd  %xmm0,-0x28(%rbp)
  40454e:	f2 0f 10 45 c8       	movsd  -0x38(%rbp),%xmm0
  404553:	f2 0f 5c 45 f8       	subsd  -0x8(%rbp),%xmm0
  404558:	f2 0f 11 45 d0       	movsd  %xmm0,-0x30(%rbp)
  40455d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  404561:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  404565:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  404569:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  40456d:	48 89 c7             	mov    %rax,%rdi
  404570:	e8 78 fd ff ff       	callq  4042ed <_ZSt10make_tupleIIdRddEESt5tupleIIDpNSt17__decay_and_stripIT_E6__typeEEEDpOS3_>
		}
  404575:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  404579:	c9                   	leaveq 
  40457a:	c3                   	retq   
  40457b:	90                   	nop

000000000040457c <_ZNK7barrier8internal11cache_wiperclEi>:

	// Used to wipe a cache. Code taken from tbb source code perf.cpp
	struct cache_wiper{
		static const std::uintptr_t CacheSize = 8*1024*1024; 

		void operator()(int core) const{
  40457c:	55                   	push   %rbp
  40457d:	48 89 e5             	mov    %rsp,%rbp
  404580:	53                   	push   %rbx
  404581:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
  404588:	48 89 bd 48 ff ff ff 	mov    %rdi,-0xb8(%rbp)
  40458f:	89 b5 44 ff ff ff    	mov    %esi,-0xbc(%rbp)
			cpu_set_t cpuset;
			CPU_ZERO(&cpuset);
  404595:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  40459c:	48 89 c6             	mov    %rax,%rsi
  40459f:	b8 00 00 00 00       	mov    $0x0,%eax
  4045a4:	ba 10 00 00 00       	mov    $0x10,%edx
  4045a9:	48 89 f7             	mov    %rsi,%rdi
  4045ac:	48 89 d1             	mov    %rdx,%rcx
  4045af:	f3 48 ab             	rep stos %rax,%es:(%rdi)
			CPU_SET(core, &cpuset);
  4045b2:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
  4045b8:	48 98                	cltq   
  4045ba:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  4045c1:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4045c8:	48 c1 e8 03          	shr    $0x3,%rax
  4045cc:	48 3d 80 00 00 00    	cmp    $0x80,%rax
  4045d2:	73 4e                	jae    404622 <_ZNK7barrier8internal11cache_wiperclEi+0xa6>
  4045d4:	bb 40 00 00 00       	mov    $0x40,%ebx
  4045d9:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4045e0:	ba 00 00 00 00       	mov    $0x0,%edx
  4045e5:	48 f7 f3             	div    %rbx
  4045e8:	48 89 c6             	mov    %rax,%rsi
  4045eb:	48 8b bc f5 70 ff ff 	mov    -0x90(%rbp,%rsi,8),%rdi
  4045f2:	ff 
  4045f3:	b9 40 00 00 00       	mov    $0x40,%ecx
  4045f8:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4045ff:	ba 00 00 00 00       	mov    $0x0,%edx
  404604:	48 f7 f1             	div    %rcx
  404607:	48 89 d0             	mov    %rdx,%rax
  40460a:	ba 01 00 00 00       	mov    $0x1,%edx
  40460f:	89 c1                	mov    %eax,%ecx
  404611:	48 d3 e2             	shl    %cl,%rdx
  404614:	48 89 d0             	mov    %rdx,%rax
  404617:	48 09 f8             	or     %rdi,%rax
  40461a:	48 89 84 f5 70 ff ff 	mov    %rax,-0x90(%rbp,%rsi,8)
  404621:	ff 

			if (pthread_setaffinity_np(pthread_self(), sizeof(cpu_set_t), &cpuset)){
  404622:	e8 29 d1 ff ff       	callq  401750 <pthread_self@plt>
  404627:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
  40462e:	be 80 00 00 00       	mov    $0x80,%esi
  404633:	48 89 c7             	mov    %rax,%rdi
  404636:	e8 05 d3 ff ff       	callq  401940 <pthread_setaffinity_np@plt>
  40463b:	85 c0                	test   %eax,%eax
  40463d:	0f 95 c0             	setne  %al
  404640:	84 c0                	test   %al,%al
  404642:	74 19                	je     40465d <_ZNK7barrier8internal11cache_wiperclEi+0xe1>
				assert(0);
  404644:	b9 a0 c1 40 00       	mov    $0x40c1a0,%ecx
  404649:	ba 1b 00 00 00       	mov    $0x1b,%edx
  40464e:	be c3 bc 40 00       	mov    $0x40bcc3,%esi
  404653:	bf cf bc 40 00       	mov    $0x40bccf,%edi
  404658:	e8 13 d0 ff ff       	callq  401670 <__assert_fail@plt>
			}

			volatile std::intptr_t* W = new volatile std::intptr_t[CacheSize];
  40465d:	bf 00 00 00 04       	mov    $0x4000000,%edi
  404662:	e8 e9 cf ff ff       	callq  401650 <_Znam@plt>
  404667:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)

			volatile std::intptr_t sink = 0;
  40466e:	48 c7 85 50 ff ff ff 	movq   $0x0,-0xb0(%rbp)
  404675:	00 00 00 00 
			for (std::uintptr_t i = 0; i < CacheSize; ++i){
  404679:	48 c7 85 58 ff ff ff 	movq   $0x0,-0xa8(%rbp)
  404680:	00 00 00 00 
  404684:	eb 35                	jmp    4046bb <_ZNK7barrier8internal11cache_wiperclEi+0x13f>
				sink += W[i];
  404686:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  40468d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  404694:	00 
  404695:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  40469c:	48 01 d0             	add    %rdx,%rax
  40469f:	48 8b 00             	mov    (%rax),%rax
  4046a2:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  4046a9:	48 01 d0             	add    %rdx,%rax
  4046ac:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
			}

			volatile std::intptr_t* W = new volatile std::intptr_t[CacheSize];

			volatile std::intptr_t sink = 0;
			for (std::uintptr_t i = 0; i < CacheSize; ++i){
  4046b3:	48 83 85 58 ff ff ff 	addq   $0x1,-0xa8(%rbp)
  4046ba:	01 
  4046bb:	48 81 bd 58 ff ff ff 	cmpq   $0x7fffff,-0xa8(%rbp)
  4046c2:	ff ff 7f 00 
  4046c6:	76 be                	jbe    404686 <_ZNK7barrier8internal11cache_wiperclEi+0x10a>
				sink += W[i];
			}

			delete [] W;
  4046c8:	48 83 bd 68 ff ff ff 	cmpq   $0x0,-0x98(%rbp)
  4046cf:	00 
  4046d0:	74 0f                	je     4046e1 <_ZNK7barrier8internal11cache_wiperclEi+0x165>
  4046d2:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  4046d9:	48 89 c7             	mov    %rax,%rdi
  4046dc:	e8 6f d1 ff ff       	callq  401850 <_ZdaPv@plt>
		}
  4046e1:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
  4046e8:	5b                   	pop    %rbx
  4046e9:	5d                   	pop    %rbp
  4046ea:	c3                   	retq   
  4046eb:	90                   	nop

00000000004046ec <_ZN7barrier8internal11cache_wiper12clear_cachesEv>:

		// This function is used to clear the caches from all cores.
		// the strategy is to run a cache_wiper on all cores
		void clear_caches(){
  4046ec:	55                   	push   %rbp
  4046ed:	48 89 e5             	mov    %rsp,%rbp
  4046f0:	41 55                	push   %r13
  4046f2:	41 54                	push   %r12
  4046f4:	53                   	push   %rbx
  4046f5:	48 83 ec 58          	sub    $0x58,%rsp
  4046f9:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
			// get number of hardware contexts.
			unsigned int hardware_threads = std::thread::hardware_concurrency();
  4046fd:	e8 fe cf ff ff       	callq  401700 <_ZNSt6thread20hardware_concurrencyEv@plt>
  404702:	89 45 ac             	mov    %eax,-0x54(%rbp)

			assert(hardware_threads >= 1);
  404705:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  404709:	75 19                	jne    404724 <_ZN7barrier8internal11cache_wiper12clear_cachesEv+0x38>
  40470b:	b9 60 c1 40 00       	mov    $0x40c160,%ecx
  404710:	ba 2e 00 00 00       	mov    $0x2e,%edx
  404715:	be c3 bc 40 00       	mov    $0x40bcc3,%esi
  40471a:	bf d1 bc 40 00       	mov    $0x40bcd1,%edi
  40471f:	e8 4c cf ff ff       	callq  401670 <__assert_fail@plt>

			// start a thread to run a cache_wiper per hardware context
			// this is overkill since some contexts will share the same cache but it is the
			// most sure thing to do
			std::vector<std::thread> threads;
  404724:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  404728:	48 89 c7             	mov    %rax,%rdi
  40472b:	e8 ac 0a 00 00       	callq  4051dc <_ZNSt6vectorISt6threadSaIS0_EEC1Ev>

			for (unsigned int i = 0; i < hardware_threads; ++i){
  404730:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%rbp)
  404737:	eb 3f                	jmp    404778 <_ZN7barrier8internal11cache_wiper12clear_cachesEv+0x8c>
				threads.push_back(std::thread{cache_wiper{}, i});
  404739:	48 8d 55 a8          	lea    -0x58(%rbp),%rdx
  40473d:	48 8d 4d a7          	lea    -0x59(%rbp),%rcx
  404741:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  404745:	48 89 ce             	mov    %rcx,%rsi
  404748:	48 89 c7             	mov    %rax,%rdi
  40474b:	e8 3e 0b 00 00       	callq  40528e <_ZNSt6threadC1IN7barrier8internal11cache_wiperEIRjEEEOT_DpOT0_>
  404750:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
  404754:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  404758:	48 89 d6             	mov    %rdx,%rsi
  40475b:	48 89 c7             	mov    %rax,%rdi
  40475e:	e8 01 0c 00 00       	callq  405364 <_ZNSt6vectorISt6threadSaIS0_EE9push_backEOS0_>
  404763:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  404767:	48 89 c7             	mov    %rax,%rdi
  40476a:	e8 25 f5 ff ff       	callq  403c94 <_ZNSt6threadD1Ev>
			// start a thread to run a cache_wiper per hardware context
			// this is overkill since some contexts will share the same cache but it is the
			// most sure thing to do
			std::vector<std::thread> threads;

			for (unsigned int i = 0; i < hardware_threads; ++i){
  40476f:	8b 45 a8             	mov    -0x58(%rbp),%eax
  404772:	83 c0 01             	add    $0x1,%eax
  404775:	89 45 a8             	mov    %eax,-0x58(%rbp)
  404778:	8b 45 a8             	mov    -0x58(%rbp),%eax
  40477b:	3b 45 ac             	cmp    -0x54(%rbp),%eax
  40477e:	72 b9                	jb     404739 <_ZN7barrier8internal11cache_wiper12clear_cachesEv+0x4d>
				threads.push_back(std::thread{cache_wiper{}, i});
			}

			// wait for the threads to finish
			std::for_each(threads.begin(), threads.end(), std::mem_fn(&std::thread::join));
  404780:	41 bc 70 17 40 00    	mov    $0x401770,%r12d
  404786:	41 bd 00 00 00 00    	mov    $0x0,%r13d
  40478c:	4c 89 e1             	mov    %r12,%rcx
  40478f:	4c 89 eb             	mov    %r13,%rbx
  404792:	4c 89 e0             	mov    %r12,%rax
  404795:	4c 89 ea             	mov    %r13,%rdx
  404798:	48 89 d0             	mov    %rdx,%rax
  40479b:	48 89 cf             	mov    %rcx,%rdi
  40479e:	48 89 c6             	mov    %rax,%rsi
  4047a1:	e8 3d 0c 00 00       	callq  4053e3 <_ZSt6mem_fnIFvvESt6threadESt7_Mem_fnIMT0_T_ES5_>
  4047a6:	49 89 c4             	mov    %rax,%r12
  4047a9:	49 89 d5             	mov    %rdx,%r13
  4047ac:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  4047b0:	48 89 c7             	mov    %rax,%rdi
  4047b3:	e8 02 0c 00 00       	callq  4053ba <_ZNSt6vectorISt6threadSaIS0_EE3endEv>
  4047b8:	48 89 c3             	mov    %rax,%rbx
  4047bb:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  4047bf:	48 89 c7             	mov    %rax,%rdi
  4047c2:	e8 cd 0b 00 00       	callq  405394 <_ZNSt6vectorISt6threadSaIS0_EE5beginEv>
  4047c7:	4c 89 e2             	mov    %r12,%rdx
  4047ca:	4c 89 e9             	mov    %r13,%rcx
  4047cd:	48 89 de             	mov    %rbx,%rsi
  4047d0:	48 89 c7             	mov    %rax,%rdi
  4047d3:	e8 53 0c 00 00       	callq  40542b <_ZSt8for_eachIN9__gnu_cxx17__normal_iteratorIPSt6threadSt6vectorIS2_SaIS2_EEEESt7_Mem_fnIMS2_FvvEEET0_T_SD_SC_>
  4047d8:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  4047dc:	48 89 c7             	mov    %rax,%rdi
  4047df:	e8 12 0a 00 00       	callq  4051f6 <_ZNSt6vectorISt6threadSaIS0_EED1Ev>
  4047e4:	eb 2b                	jmp    404811 <_ZN7barrier8internal11cache_wiper12clear_cachesEv+0x125>
  4047e6:	48 89 c3             	mov    %rax,%rbx
			// this is overkill since some contexts will share the same cache but it is the
			// most sure thing to do
			std::vector<std::thread> threads;

			for (unsigned int i = 0; i < hardware_threads; ++i){
				threads.push_back(std::thread{cache_wiper{}, i});
  4047e9:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  4047ed:	48 89 c7             	mov    %rax,%rdi
  4047f0:	e8 9f f4 ff ff       	callq  403c94 <_ZNSt6threadD1Ev>
  4047f5:	eb 03                	jmp    4047fa <_ZN7barrier8internal11cache_wiper12clear_cachesEv+0x10e>
  4047f7:	48 89 c3             	mov    %rax,%rbx
			}

			// wait for the threads to finish
			std::for_each(threads.begin(), threads.end(), std::mem_fn(&std::thread::join));
  4047fa:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  4047fe:	48 89 c7             	mov    %rax,%rdi
  404801:	e8 f0 09 00 00       	callq  4051f6 <_ZNSt6vectorISt6threadSaIS0_EED1Ev>
  404806:	48 89 d8             	mov    %rbx,%rax
  404809:	48 89 c7             	mov    %rax,%rdi
  40480c:	e8 0f d1 ff ff       	callq  401920 <_Unwind_Resume@plt>
		}
  404811:	48 83 c4 58          	add    $0x58,%rsp
  404815:	5b                   	pop    %rbx
  404816:	41 5c                	pop    %r12
  404818:	41 5d                	pop    %r13
  40481a:	5d                   	pop    %rbp
  40481b:	c3                   	retq   

000000000040481c <_ZN7barrier8internal8affinityclEim>:
		 *
		 * \param core The core to which to set the affinity of the current thread
		 * \param id The identifier of the thread.
		 * \throw runtime_error If the affinity cannot be set
		 */
		void operator()(int core, pthread_t id){
  40481c:	55                   	push   %rbp
  40481d:	48 89 e5             	mov    %rsp,%rbp
  404820:	41 54                	push   %r12
  404822:	53                   	push   %rbx
  404823:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  40482a:	48 89 bd 48 ff ff ff 	mov    %rdi,-0xb8(%rbp)
  404831:	89 b5 44 ff ff ff    	mov    %esi,-0xbc(%rbp)
  404837:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
			cpu_set_t cpuset;
			CPU_ZERO(&cpuset);
  40483e:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  404845:	48 89 c6             	mov    %rax,%rsi
  404848:	b8 00 00 00 00       	mov    $0x0,%eax
  40484d:	ba 10 00 00 00       	mov    $0x10,%edx
  404852:	48 89 f7             	mov    %rsi,%rdi
  404855:	48 89 d1             	mov    %rdx,%rcx
  404858:	f3 48 ab             	rep stos %rax,%es:(%rdi)
			CPU_SET(core, &cpuset);
  40485b:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
  404861:	48 98                	cltq   
  404863:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  40486a:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  404871:	48 c1 e8 03          	shr    $0x3,%rax
  404875:	48 3d 80 00 00 00    	cmp    $0x80,%rax
  40487b:	73 4e                	jae    4048cb <_ZN7barrier8internal8affinityclEim+0xaf>
  40487d:	bb 40 00 00 00       	mov    $0x40,%ebx
  404882:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  404889:	ba 00 00 00 00       	mov    $0x0,%edx
  40488e:	48 f7 f3             	div    %rbx
  404891:	48 89 c6             	mov    %rax,%rsi
  404894:	48 8b bc f5 70 ff ff 	mov    -0x90(%rbp,%rsi,8),%rdi
  40489b:	ff 
  40489c:	b9 40 00 00 00       	mov    $0x40,%ecx
  4048a1:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  4048a8:	ba 00 00 00 00       	mov    $0x0,%edx
  4048ad:	48 f7 f1             	div    %rcx
  4048b0:	48 89 d0             	mov    %rdx,%rax
  4048b3:	ba 01 00 00 00       	mov    $0x1,%edx
  4048b8:	89 c1                	mov    %eax,%ecx
  4048ba:	48 d3 e2             	shl    %cl,%rdx
  4048bd:	48 89 d0             	mov    %rdx,%rax
  4048c0:	48 09 f8             	or     %rdi,%rax
  4048c3:	48 89 84 f5 70 ff ff 	mov    %rax,-0x90(%rbp,%rsi,8)
  4048ca:	ff 

			if (pthread_setaffinity_np(id, sizeof(cpu_set_t), &cpuset)){
  4048cb:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
  4048d2:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  4048d9:	be 80 00 00 00       	mov    $0x80,%esi
  4048de:	48 89 c7             	mov    %rax,%rdi
  4048e1:	e8 5a d0 ff ff       	callq  401940 <pthread_setaffinity_np@plt>
  4048e6:	85 c0                	test   %eax,%eax
  4048e8:	0f 95 c0             	setne  %al
  4048eb:	84 c0                	test   %al,%al
  4048ed:	0f 84 b2 00 00 00    	je     4049a5 <_ZN7barrier8internal8affinityclEim+0x189>
				throw std::runtime_error("failed to set affinity: call to pthread_setaffinity_np() failed");
  4048f3:	bf 10 00 00 00       	mov    $0x10,%edi
  4048f8:	e8 13 cf ff ff       	callq  401810 <__cxa_allocate_exception@plt>
  4048fd:	48 89 c3             	mov    %rax,%rbx
  404900:	48 8d 85 5f ff ff ff 	lea    -0xa1(%rbp),%rax
  404907:	48 89 c7             	mov    %rax,%rdi
  40490a:	e8 e1 cf ff ff       	callq  4018f0 <_ZNSaIcEC1Ev@plt>
  40490f:	48 8d 95 5f ff ff ff 	lea    -0xa1(%rbp),%rdx
  404916:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
  40491d:	be e8 bc 40 00       	mov    $0x40bce8,%esi
  404922:	48 89 c7             	mov    %rax,%rdi
  404925:	e8 36 ce ff ff       	callq  401760 <_ZNSsC1EPKcRKSaIcE@plt>
  40492a:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
  404931:	48 89 c6             	mov    %rax,%rsi
  404934:	48 89 df             	mov    %rbx,%rdi
  404937:	e8 a4 cd ff ff       	callq  4016e0 <_ZNSt13runtime_errorC1ERKSs@plt>
  40493c:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
  404943:	48 89 c7             	mov    %rax,%rdi
  404946:	e8 e5 cd ff ff       	callq  401730 <_ZNSsD1Ev@plt>
  40494b:	48 8d 85 5f ff ff ff 	lea    -0xa1(%rbp),%rax
  404952:	48 89 c7             	mov    %rax,%rdi
  404955:	e8 c6 ce ff ff       	callq  401820 <_ZNSaIcED1Ev@plt>
  40495a:	ba 40 18 40 00       	mov    $0x401840,%edx
  40495f:	be 40 42 61 00       	mov    $0x614240,%esi
  404964:	48 89 df             	mov    %rbx,%rdi
  404967:	e8 f4 ce ff ff       	callq  401860 <__cxa_throw@plt>
  40496c:	49 89 c4             	mov    %rax,%r12
  40496f:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
  404976:	48 89 c7             	mov    %rax,%rdi
  404979:	e8 b2 cd ff ff       	callq  401730 <_ZNSsD1Ev@plt>
  40497e:	eb 03                	jmp    404983 <_ZN7barrier8internal8affinityclEim+0x167>
  404980:	49 89 c4             	mov    %rax,%r12
  404983:	48 8d 85 5f ff ff ff 	lea    -0xa1(%rbp),%rax
  40498a:	48 89 c7             	mov    %rax,%rdi
  40498d:	e8 8e ce ff ff       	callq  401820 <_ZNSaIcED1Ev@plt>
  404992:	48 89 df             	mov    %rbx,%rdi
  404995:	e8 96 ce ff ff       	callq  401830 <__cxa_free_exception@plt>
  40499a:	4c 89 e0             	mov    %r12,%rax
  40499d:	48 89 c7             	mov    %rax,%rdi
  4049a0:	e8 7b cf ff ff       	callq  401920 <_Unwind_Resume@plt>
			}
		}
  4049a5:	48 81 c4 c0 00 00 00 	add    $0xc0,%rsp
  4049ac:	5b                   	pop    %rbx
  4049ad:	41 5c                	pop    %r12
  4049af:	5d                   	pop    %rbp
  4049b0:	c3                   	retq   
  4049b1:	90                   	nop

00000000004049b2 <_ZN7barrier8internal8affinityclEiim>:

		void operator()(int num_threads, int core, pthread_t id){
  4049b2:	55                   	push   %rbp
  4049b3:	48 89 e5             	mov    %rsp,%rbp
  4049b6:	48 83 ec 20          	sub    $0x20,%rsp
  4049ba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4049be:	89 75 f4             	mov    %esi,-0xc(%rbp)
  4049c1:	89 55 f0             	mov    %edx,-0x10(%rbp)
  4049c4:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
			// first fill cores then fill second threads (from left to right)
			// it just happens that the mapping is ok
			(*this)(core, id);
  4049c8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4049cc:	8b 4d f0             	mov    -0x10(%rbp),%ecx
  4049cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4049d3:	89 ce                	mov    %ecx,%esi
  4049d5:	48 89 c7             	mov    %rax,%rdi
  4049d8:	e8 3f fe ff ff       	callq  40481c <_ZN7barrier8internal8affinityclEim>
		}
  4049dd:	c9                   	leaveq 
  4049de:	c3                   	retq   
  4049df:	90                   	nop

00000000004049e0 <_ZN7barrier35centralized_sense_reversing_barrierC1Ej>:
class centralized_sense_reversing_barrier{
public:
	using size_type = unsigned int;

	// Initialization is not atomic!
	explicit centralized_sense_reversing_barrier(size_type n) : counter{0}, sense{true}, num_threads{n} {}
  4049e0:	55                   	push   %rbp
  4049e1:	48 89 e5             	mov    %rsp,%rbp
  4049e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4049e8:	89 75 f4             	mov    %esi,-0xc(%rbp)
  4049eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4049ef:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  4049f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4049f9:	c6 40 40 01          	movb   $0x1,0x40(%rax)
  4049fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404a01:	8b 55 f4             	mov    -0xc(%rbp),%edx
  404a04:	89 50 44             	mov    %edx,0x44(%rax)
  404a07:	5d                   	pop    %rbp
  404a08:	c3                   	retq   
  404a09:	90                   	nop

0000000000404a0a <_ZN7barrier35centralized_sense_reversing_barrier5awaitEv>:
		local_sense = !local_sense;
	}
	#endif

	#if 1
	void await(){
  404a0a:	55                   	push   %rbp
  404a0b:	48 89 e5             	mov    %rsp,%rbp
  404a0e:	53                   	push   %rbx
  404a0f:	48 83 ec 38          	sub    $0x38,%rsp
  404a13:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
		// arrive at the barrier
		const size_type pre_arrived = counter.fetch_add(1, std::memory_order_acq_rel);
  404a17:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  404a1b:	ba 04 00 00 00       	mov    $0x4,%edx
  404a20:	be 01 00 00 00       	mov    $0x1,%esi
  404a25:	48 89 c7             	mov    %rax,%rdi
  404a28:	e8 6f 0a 00 00       	callq  40549c <_ZNSt13__atomic_baseIjE9fetch_addEjSt12memory_order>
  404a2d:	89 45 dc             	mov    %eax,-0x24(%rbp)

		if (pre_arrived + 1 == num_threads){
  404a30:	8b 45 dc             	mov    -0x24(%rbp),%eax
  404a33:	8d 50 01             	lea    0x1(%rax),%edx
  404a36:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  404a3a:	8b 40 44             	mov    0x44(%rax),%eax
  404a3d:	39 c2                	cmp    %eax,%edx
  404a3f:	75 3a                	jne    404a7b <_ZN7barrier35centralized_sense_reversing_barrier5awaitEv+0x71>
			// i am the last to arrive so reset and signal departure
			counter.store(0, std::memory_order_relaxed);
  404a41:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  404a45:	ba 00 00 00 00       	mov    $0x0,%edx
  404a4a:	be 00 00 00 00       	mov    $0x0,%esi
  404a4f:	48 89 c7             	mov    %rax,%rdi
  404a52:	e8 63 0a 00 00       	callq  4054ba <_ZNSt13__atomic_baseIjE5storeEjSt12memory_order>
			sense.store(local_sense, std::memory_order_release);
  404a57:	e8 c0 6c 00 00       	callq  40b71c <_ZTWN7barrier35centralized_sense_reversing_barrier11local_senseE>
  404a5c:	0f b6 00             	movzbl (%rax),%eax
  404a5f:	0f b6 c0             	movzbl %al,%eax
  404a62:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  404a66:	48 8d 4a 40          	lea    0x40(%rdx),%rcx
  404a6a:	ba 03 00 00 00       	mov    $0x3,%edx
  404a6f:	89 c6                	mov    %eax,%esi
  404a71:	48 89 cf             	mov    %rcx,%rdi
  404a74:	e8 7d f3 ff ff       	callq  403df6 <_ZNSt11atomic_bool5storeEbSt12memory_order>
  404a79:	eb 31                	jmp    404aac <_ZN7barrier35centralized_sense_reversing_barrier5awaitEv+0xa2>
		}
		else{
			barrier::internal::default_atomic_backoff backoff;
  404a7b:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  404a82:	00 

			// wait until the last one arrives
			while (sense.load(std::memory_order_acquire) != local_sense){
  404a83:	90                   	nop
  404a84:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  404a88:	48 83 c0 40          	add    $0x40,%rax
  404a8c:	be 02 00 00 00       	mov    $0x2,%esi
  404a91:	48 89 c7             	mov    %rax,%rdi
  404a94:	e8 89 f3 ff ff       	callq  403e22 <_ZNKSt11atomic_bool4loadESt12memory_order>
  404a99:	89 c3                	mov    %eax,%ebx
  404a9b:	e8 7c 6c 00 00       	callq  40b71c <_ZTWN7barrier35centralized_sense_reversing_barrier11local_senseE>
  404aa0:	0f b6 00             	movzbl (%rax),%eax
  404aa3:	38 c3                	cmp    %al,%bl
  404aa5:	0f 95 c0             	setne  %al
  404aa8:	84 c0                	test   %al,%al
  404aaa:	75 d8                	jne    404a84 <_ZN7barrier35centralized_sense_reversing_barrier5awaitEv+0x7a>
				//backoff();				
			}
		}

		local_sense = !local_sense;
  404aac:	e8 6b 6c 00 00       	callq  40b71c <_ZTWN7barrier35centralized_sense_reversing_barrier11local_senseE>
  404ab1:	48 89 c3             	mov    %rax,%rbx
  404ab4:	e8 63 6c 00 00       	callq  40b71c <_ZTWN7barrier35centralized_sense_reversing_barrier11local_senseE>
  404ab9:	0f b6 00             	movzbl (%rax),%eax
  404abc:	83 f0 01             	xor    $0x1,%eax
  404abf:	88 03                	mov    %al,(%rbx)
	}
  404ac1:	48 83 c4 38          	add    $0x38,%rsp
  404ac5:	5b                   	pop    %rbx
  404ac6:	5d                   	pop    %rbp
  404ac7:	c3                   	retq   

0000000000404ac8 <_ZN15random_workloadC1Emm>:
	std::uniform_int_distribution<size_type> dis;
	std::mt19937 gen;

	// random workload generation in the range [1,workload]. Random numbers start with the given seed.
 	// This is needed for reproducability of the results.
	random_workload(size_type workload, std::mt19937::result_type seed) : W{workload}, dis{1,W}, gen{seed} {}
  404ac8:	55                   	push   %rbp
  404ac9:	48 89 e5             	mov    %rsp,%rbp
  404acc:	48 83 ec 20          	sub    $0x20,%rsp
  404ad0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404ad4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404ad8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  404adc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404ae0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  404ae4:	48 89 10             	mov    %rdx,(%rax)
  404ae7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404aeb:	48 8b 00             	mov    (%rax),%rax
  404aee:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  404af2:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  404af6:	48 89 c2             	mov    %rax,%rdx
  404af9:	be 01 00 00 00       	mov    $0x1,%esi
  404afe:	48 89 cf             	mov    %rcx,%rdi
  404b01:	e8 e6 09 00 00       	callq  4054ec <_ZNSt24uniform_int_distributionImEC1Emm>
  404b06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404b0a:	48 8d 50 18          	lea    0x18(%rax),%rdx
  404b0e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404b12:	48 89 c6             	mov    %rax,%rsi
  404b15:	48 89 d7             	mov    %rdx,%rdi
  404b18:	e8 fd 09 00 00       	callq  40551a <_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEC1Em>
  404b1d:	c9                   	leaveq 
  404b1e:	c3                   	retq   
  404b1f:	90                   	nop

0000000000404b20 <_ZN15random_workloadclEv>:

	// produce random workload
	void operator()(){
  404b20:	55                   	push   %rbp
  404b21:	48 89 e5             	mov    %rsp,%rbp
  404b24:	48 83 ec 20          	sub    $0x20,%rsp
  404b28:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
		const size_type rnd_workload{dis(gen)};
  404b2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404b30:	48 8d 50 18          	lea    0x18(%rax),%rdx
  404b34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404b38:	48 83 c0 08          	add    $0x8,%rax
  404b3c:	48 89 d6             	mov    %rdx,%rsi
  404b3f:	48 89 c7             	mov    %rax,%rdi
  404b42:	e8 f9 09 00 00       	callq  405540 <_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_>
  404b47:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

		// volatile is needed to disable compiler optimizations
		for (volatile size_type i = 0; i < rnd_workload; ++i){}
  404b4b:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  404b52:	00 
  404b53:	eb 0c                	jmp    404b61 <_ZN15random_workloadclEv+0x41>
  404b55:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404b59:	48 83 c0 01          	add    $0x1,%rax
  404b5d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  404b61:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404b65:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  404b69:	0f 92 c0             	setb   %al
  404b6c:	84 c0                	test   %al,%al
  404b6e:	75 e5                	jne    404b55 <_ZN15random_workloadclEv+0x35>
	}
  404b70:	c9                   	leaveq 
  404b71:	c3                   	retq   

0000000000404b72 <_ZN7barrier8internal19confidence_intervalD1Ev>:
	/**
	 * This implementation is rather simple because i assume a priori confidence level of 99.9%.
	 * The critical values for the t-distributions are taken from: http://www.stat.tamu.edu/~lzhou/stat302/T-Table.pdf 
	 * Also, the degrees of freedom is limited to a maximum of 30.
	 */
	class confidence_interval{
  404b72:	55                   	push   %rbp
  404b73:	48 89 e5             	mov    %rsp,%rbp
  404b76:	48 83 ec 10          	sub    $0x10,%rsp
  404b7a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404b7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404b82:	48 89 c7             	mov    %rax,%rdi
  404b85:	e8 10 04 00 00       	callq  404f9a <_ZNSt6vectorIdSaIdEED1Ev>
  404b8a:	c9                   	leaveq 
  404b8b:	c3                   	retq   

0000000000404b8c <_ZSt4moveIRSt6threadEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
  404b8c:	55                   	push   %rbp
  404b8d:	48 89 e5             	mov    %rsp,%rbp
  404b90:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  404b94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404b98:	5d                   	pop    %rbp
  404b99:	c3                   	retq   

0000000000404b9a <_ZNKSt6chrono10time_pointINS_3_V212steady_clockENS_8durationIlSt5ratioILl1ELl1000000000EEEEE16time_since_epochEv>:
	  : __d(__t.time_since_epoch())
	  { }

	// observer
	constexpr duration
	time_since_epoch() const
  404b9a:	55                   	push   %rbp
  404b9b:	48 89 e5             	mov    %rsp,%rbp
  404b9e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{ return __d; }
  404ba2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404ba6:	48 8b 00             	mov    (%rax),%rax
  404ba9:	5d                   	pop    %rbp
  404baa:	c3                   	retq   

0000000000404bab <_ZNSt6chronomiIlSt5ratioILl1ELl1000000000EElS2_EENSt11common_typeIINS_8durationIT_T0_EENS4_IT1_T2_EEEE4typeERKS7_RKSA_>:

    template<typename _Rep1, typename _Period1,
	     typename _Rep2, typename _Period2>
      constexpr typename common_type<duration<_Rep1, _Period1>,
				     duration<_Rep2, _Period2>>::type
      operator-(const duration<_Rep1, _Period1>& __lhs,
  404bab:	55                   	push   %rbp
  404bac:	48 89 e5             	mov    %rsp,%rbp
  404baf:	53                   	push   %rbx
  404bb0:	48 83 ec 48          	sub    $0x48,%rsp
  404bb4:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  404bb8:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
		const duration<_Rep2, _Period2>& __rhs)
      {
	typedef duration<_Rep1, _Period1>			__dur1;
	typedef duration<_Rep2, _Period2>			__dur2;
	typedef typename common_type<__dur1,__dur2>::type	__cd;
	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
  404bbc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  404bc0:	48 8b 00             	mov    (%rax),%rax
  404bc3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  404bc7:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  404bcb:	48 89 c7             	mov    %rax,%rdi
  404bce:	e8 db ef ff ff       	callq  403bae <_ZNKSt6chrono8durationIlSt5ratioILl1ELl1000000000EEE5countEv>
  404bd3:	48 89 c3             	mov    %rax,%rbx
  404bd6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  404bda:	48 8b 00             	mov    (%rax),%rax
  404bdd:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  404be1:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  404be5:	48 89 c7             	mov    %rax,%rdi
  404be8:	e8 c1 ef ff ff       	callq  403bae <_ZNKSt6chrono8durationIlSt5ratioILl1ELl1000000000EEE5countEv>
  404bed:	48 29 c3             	sub    %rax,%rbx
  404bf0:	48 89 d8             	mov    %rbx,%rax
  404bf3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  404bf7:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
  404bfb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  404bff:	48 89 d6             	mov    %rdx,%rsi
  404c02:	48 89 c7             	mov    %rax,%rdi
  404c05:	e8 88 ef ff ff       	callq  403b92 <_ZNSt6chrono8durationIlSt5ratioILl1ELl1000000000EEEC1IlvEERKT_>
  404c0a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
      }
  404c0e:	48 83 c4 48          	add    $0x48,%rsp
  404c12:	5b                   	pop    %rbx
  404c13:	5d                   	pop    %rbp
  404c14:	c3                   	retq   

0000000000404c15 <_ZNSt6chronomiINS_3_V212steady_clockENS_8durationIlSt5ratioILl1ELl1000000000EEEES6_EENSt11common_typeIIT0_T1_EE4typeERKNS_10time_pointIT_S8_EERKNSC_ISD_S9_EE>:
	return __time_point(__lhs.time_since_epoch() -__rhs); 
      }

    template<typename _Clock, typename _Dur1, typename _Dur2>
      constexpr typename common_type<_Dur1, _Dur2>::type
      operator-(const time_point<_Clock, _Dur1>& __lhs,
  404c15:	55                   	push   %rbp
  404c16:	48 89 e5             	mov    %rsp,%rbp
  404c19:	48 83 ec 30          	sub    $0x30,%rsp
  404c1d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  404c21:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
		const time_point<_Clock, _Dur2>& __rhs)
      { return __lhs.time_since_epoch() - __rhs.time_since_epoch(); }
  404c25:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  404c29:	48 89 c7             	mov    %rax,%rdi
  404c2c:	e8 69 ff ff ff       	callq  404b9a <_ZNKSt6chrono10time_pointINS_3_V212steady_clockENS_8durationIlSt5ratioILl1ELl1000000000EEEEE16time_since_epochEv>
  404c31:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  404c35:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  404c39:	48 89 c7             	mov    %rax,%rdi
  404c3c:	e8 59 ff ff ff       	callq  404b9a <_ZNKSt6chrono10time_pointINS_3_V212steady_clockENS_8durationIlSt5ratioILl1ELl1000000000EEEEE16time_since_epochEv>
  404c41:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  404c45:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  404c49:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  404c4d:	48 89 d6             	mov    %rdx,%rsi
  404c50:	48 89 c7             	mov    %rax,%rdi
  404c53:	e8 53 ff ff ff       	callq  404bab <_ZNSt6chronomiIlSt5ratioILl1ELl1000000000EElS2_EENSt11common_typeIINS_8durationIT_T0_EENS4_IT1_T2_EEEE4typeERKS7_RKSA_>
  404c58:	c9                   	leaveq 
  404c59:	c3                   	retq   

0000000000404c5a <_ZNSt6chrono8durationIdSt5ratioILl1ELl1000000000EEEC1IdvEERKT_>:

	template<typename _Rep2, typename = typename
	       enable_if<is_convertible<_Rep2, rep>::value
			 && (treat_as_floating_point<rep>::value
			     || !treat_as_floating_point<_Rep2>::value)>::type>
	  constexpr explicit duration(const _Rep2& __rep)
  404c5a:	55                   	push   %rbp
  404c5b:	48 89 e5             	mov    %rsp,%rbp
  404c5e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404c62:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  : __r(static_cast<rep>(__rep)) { }
  404c66:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404c6a:	48 8b 00             	mov    (%rax),%rax
  404c6d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  404c71:	48 89 02             	mov    %rax,(%rdx)
  404c74:	5d                   	pop    %rbp
  404c75:	c3                   	retq   

0000000000404c76 <_ZNSt6chrono20__duration_cast_implINS_8durationIdSt5ratioILl1ELl1000000000EEEES2_ILl1ELl1EEdLb1ELb1EE6__castIlS3_EES4_RKNS1_IT_T0_EE>:
    template<typename _ToDur, typename _CF, typename _CR>
      struct __duration_cast_impl<_ToDur, _CF, _CR, true, true>
      {
	template<typename _Rep, typename _Period>
	  static constexpr _ToDur
	  __cast(const duration<_Rep, _Period>& __d)
  404c76:	55                   	push   %rbp
  404c77:	48 89 e5             	mov    %rsp,%rbp
  404c7a:	48 83 ec 20          	sub    $0x20,%rsp
  404c7e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	  {
	    typedef typename _ToDur::rep			__to_rep;
	    return _ToDur(static_cast<__to_rep>(__d.count()));
  404c82:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404c86:	48 89 c7             	mov    %rax,%rdi
  404c89:	e8 20 ef ff ff       	callq  403bae <_ZNKSt6chrono8durationIlSt5ratioILl1ELl1000000000EEE5countEv>
  404c8e:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
  404c93:	f2 0f 11 45 f8       	movsd  %xmm0,-0x8(%rbp)
  404c98:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx
  404c9c:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  404ca0:	48 89 d6             	mov    %rdx,%rsi
  404ca3:	48 89 c7             	mov    %rax,%rdi
  404ca6:	e8 af ff ff ff       	callq  404c5a <_ZNSt6chrono8durationIdSt5ratioILl1ELl1000000000EEEC1IdvEERKT_>
  404cab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
	  }
  404caf:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  404cb3:	f2 0f 10 45 e0       	movsd  -0x20(%rbp),%xmm0
  404cb8:	c9                   	leaveq 
  404cb9:	c3                   	retq   

0000000000404cba <_ZNSt6chrono13duration_castINS_8durationIdSt5ratioILl1ELl1000000000EEEElS3_EENSt9enable_ifIXsrNS_13__is_durationIT_EE5valueES7_E4typeERKNS1_IT0_T1_EE>:

    /// duration_cast
    template<typename _ToDur, typename _Rep, typename _Period>
      constexpr typename enable_if<__is_duration<_ToDur>::value,
				   _ToDur>::type
      duration_cast(const duration<_Rep, _Period>& __d)
  404cba:	55                   	push   %rbp
  404cbb:	48 89 e5             	mov    %rsp,%rbp
  404cbe:	48 83 ec 10          	sub    $0x10,%rsp
  404cc2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	typedef ratio_divide<_Period, __to_period> 		__cf;
	typedef typename common_type<__to_rep, _Rep, intmax_t>::type
	  							__cr;
	typedef  __duration_cast_impl<_ToDur, __cf, __cr,
				      __cf::num == 1, __cf::den == 1> __dc;
	return __dc::__cast(__d);
  404cc6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404cca:	48 89 c7             	mov    %rax,%rdi
  404ccd:	e8 a4 ff ff ff       	callq  404c76 <_ZNSt6chrono20__duration_cast_implINS_8durationIdSt5ratioILl1ELl1000000000EEEES2_ILl1ELl1EEdLb1ELb1EE6__castIlS3_EES4_RKNS1_IT_T0_EE>
  404cd2:	f2 0f 11 45 f0       	movsd  %xmm0,-0x10(%rbp)
  404cd7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
      }
  404cdb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  404cdf:	f2 0f 10 45 f0       	movsd  -0x10(%rbp),%xmm0
  404ce4:	c9                   	leaveq 
  404ce5:	c3                   	retq   

0000000000404ce6 <_ZNKSt6chrono8durationIdSt5ratioILl1ELl1000000000EEE5countEv>:
	~duration() = default;
	duration& operator=(const duration&) = default;

	// 20.11.5.2 observer
	constexpr rep
	count() const
  404ce6:	55                   	push   %rbp
  404ce7:	48 89 e5             	mov    %rsp,%rbp
  404cea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{ return __r; }
  404cee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404cf2:	48 8b 00             	mov    (%rax),%rax
  404cf5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  404cf9:	f2 0f 10 45 f0       	movsd  -0x10(%rbp),%xmm0
  404cfe:	5d                   	pop    %rbp
  404cff:	c3                   	retq   

0000000000404d00 <_ZNSt6chrono8durationIdSt5ratioILl1ELl1000000000EEEC1IlS2_vEERKNS0_IT_T0_EE>:

	template<typename _Rep2, typename _Period2, typename = typename
	       enable_if<treat_as_floating_point<rep>::value
			 || (ratio_divide<_Period2, period>::den == 1
			     && !treat_as_floating_point<_Rep2>::value)>::type>
	  constexpr duration(const duration<_Rep2, _Period2>& __d)
  404d00:	55                   	push   %rbp
  404d01:	48 89 e5             	mov    %rsp,%rbp
  404d04:	48 83 ec 30          	sub    $0x30,%rsp
  404d08:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  404d0c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  : __r(duration_cast<duration>(__d).count()) { }
  404d10:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  404d14:	48 89 c7             	mov    %rax,%rdi
  404d17:	e8 9e ff ff ff       	callq  404cba <_ZNSt6chrono13duration_castINS_8durationIdSt5ratioILl1ELl1000000000EEEElS3_EENSt9enable_ifIXsrNS_13__is_durationIT_EE5valueES7_E4typeERKNS1_IT0_T1_EE>
  404d1c:	f2 0f 11 45 d8       	movsd  %xmm0,-0x28(%rbp)
  404d21:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  404d25:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  404d29:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  404d2d:	48 89 c7             	mov    %rax,%rdi
  404d30:	e8 b1 ff ff ff       	callq  404ce6 <_ZNKSt6chrono8durationIdSt5ratioILl1ELl1000000000EEE5countEv>
  404d35:	f2 0f 11 45 d8       	movsd  %xmm0,-0x28(%rbp)
  404d3a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  404d3e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  404d42:	48 89 02             	mov    %rax,(%rdx)
  404d45:	c9                   	leaveq 
  404d46:	c3                   	retq   

0000000000404d47 <_ZNSt10_Head_baseILm0EdLb0EE7_M_headERKS0_>:

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }

      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
  404d47:	55                   	push   %rbp
  404d48:	48 89 e5             	mov    %rsp,%rbp
  404d4b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404d4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404d53:	5d                   	pop    %rbp
  404d54:	c3                   	retq   

0000000000404d55 <_ZNSt11_Tuple_implILm0EIdddEE7_M_headERKS0_>:

      static constexpr _Head&  
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr const _Head&
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
  404d55:	55                   	push   %rbp
  404d56:	48 89 e5             	mov    %rsp,%rbp
  404d59:	48 83 ec 10          	sub    $0x10,%rsp
  404d5d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404d61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404d65:	48 83 c0 10          	add    $0x10,%rax
  404d69:	48 89 c7             	mov    %rax,%rdi
  404d6c:	e8 d6 ff ff ff       	callq  404d47 <_ZNSt10_Head_baseILm0EdLb0EE7_M_headERKS0_>
  404d71:	c9                   	leaveq 
  404d72:	c3                   	retq   

0000000000404d73 <_ZSt12__get_helperILm0EdIddEENSt11__add_c_refIT0_E4typeERKSt11_Tuple_implIXT_EIS1_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  template<std::size_t __i, typename _Head, typename... _Tail>
    constexpr typename __add_c_ref<_Head>::type
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
  404d73:	55                   	push   %rbp
  404d74:	48 89 e5             	mov    %rsp,%rbp
  404d77:	48 83 ec 10          	sub    $0x10,%rsp
  404d7b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
  404d7f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404d83:	48 89 c7             	mov    %rax,%rdi
  404d86:	e8 ca ff ff ff       	callq  404d55 <_ZNSt11_Tuple_implILm0EIdddEE7_M_headERKS0_>
  404d8b:	c9                   	leaveq 
  404d8c:	c3                   	retq   

0000000000404d8d <_ZSt3getILm0EIdddEENSt11__add_c_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERKS5_>:

  template<std::size_t __i, typename... _Elements>
    constexpr typename __add_c_ref<
                      typename tuple_element<__i, tuple<_Elements...>>::type
                    >::type
    get(const tuple<_Elements...>& __t) noexcept
  404d8d:	55                   	push   %rbp
  404d8e:	48 89 e5             	mov    %rsp,%rbp
  404d91:	48 83 ec 10          	sub    $0x10,%rsp
  404d95:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __get_helper<__i>(__t); }
  404d99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404d9d:	48 89 c7             	mov    %rax,%rdi
  404da0:	e8 ce ff ff ff       	callq  404d73 <_ZSt12__get_helperILm0EdIddEENSt11__add_c_refIT0_E4typeERKSt11_Tuple_implIXT_EIS1_DpT1_EE>
  404da5:	c9                   	leaveq 
  404da6:	c3                   	retq   

0000000000404da7 <_ZNSt10_Head_baseILm1EdLb0EE7_M_headERKS0_>:

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }

      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
  404da7:	55                   	push   %rbp
  404da8:	48 89 e5             	mov    %rsp,%rbp
  404dab:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404daf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404db3:	5d                   	pop    %rbp
  404db4:	c3                   	retq   

0000000000404db5 <_ZNSt11_Tuple_implILm1EIddEE7_M_headERKS0_>:

      static constexpr _Head&  
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr const _Head&
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
  404db5:	55                   	push   %rbp
  404db6:	48 89 e5             	mov    %rsp,%rbp
  404db9:	48 83 ec 10          	sub    $0x10,%rsp
  404dbd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404dc1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404dc5:	48 83 c0 08          	add    $0x8,%rax
  404dc9:	48 89 c7             	mov    %rax,%rdi
  404dcc:	e8 d6 ff ff ff       	callq  404da7 <_ZNSt10_Head_baseILm1EdLb0EE7_M_headERKS0_>
  404dd1:	c9                   	leaveq 
  404dd2:	c3                   	retq   

0000000000404dd3 <_ZSt12__get_helperILm1EdIdEENSt11__add_c_refIT0_E4typeERKSt11_Tuple_implIXT_EIS1_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  template<std::size_t __i, typename _Head, typename... _Tail>
    constexpr typename __add_c_ref<_Head>::type
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
  404dd3:	55                   	push   %rbp
  404dd4:	48 89 e5             	mov    %rsp,%rbp
  404dd7:	48 83 ec 10          	sub    $0x10,%rsp
  404ddb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
  404ddf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404de3:	48 89 c7             	mov    %rax,%rdi
  404de6:	e8 ca ff ff ff       	callq  404db5 <_ZNSt11_Tuple_implILm1EIddEE7_M_headERKS0_>
  404deb:	c9                   	leaveq 
  404dec:	c3                   	retq   

0000000000404ded <_ZSt3getILm1EIdddEENSt11__add_c_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERKS5_>:

  template<std::size_t __i, typename... _Elements>
    constexpr typename __add_c_ref<
                      typename tuple_element<__i, tuple<_Elements...>>::type
                    >::type
    get(const tuple<_Elements...>& __t) noexcept
  404ded:	55                   	push   %rbp
  404dee:	48 89 e5             	mov    %rsp,%rbp
  404df1:	48 83 ec 10          	sub    $0x10,%rsp
  404df5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __get_helper<__i>(__t); }
  404df9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404dfd:	48 89 c7             	mov    %rax,%rdi
  404e00:	e8 ce ff ff ff       	callq  404dd3 <_ZSt12__get_helperILm1EdIdEENSt11__add_c_refIT0_E4typeERKSt11_Tuple_implIXT_EIS1_DpT1_EE>
  404e05:	c9                   	leaveq 
  404e06:	c3                   	retq   

0000000000404e07 <_ZNSt10_Head_baseILm2EdLb0EE7_M_headERKS0_>:

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }

      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
  404e07:	55                   	push   %rbp
  404e08:	48 89 e5             	mov    %rsp,%rbp
  404e0b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404e0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404e13:	5d                   	pop    %rbp
  404e14:	c3                   	retq   

0000000000404e15 <_ZNSt11_Tuple_implILm2EIdEE7_M_headERKS0_>:

      static constexpr _Head&  
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr const _Head&
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
  404e15:	55                   	push   %rbp
  404e16:	48 89 e5             	mov    %rsp,%rbp
  404e19:	48 83 ec 10          	sub    $0x10,%rsp
  404e1d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404e21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404e25:	48 89 c7             	mov    %rax,%rdi
  404e28:	e8 da ff ff ff       	callq  404e07 <_ZNSt10_Head_baseILm2EdLb0EE7_M_headERKS0_>
  404e2d:	c9                   	leaveq 
  404e2e:	c3                   	retq   

0000000000404e2f <_ZSt12__get_helperILm2EdIEENSt11__add_c_refIT0_E4typeERKSt11_Tuple_implIXT_EIS1_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  template<std::size_t __i, typename _Head, typename... _Tail>
    constexpr typename __add_c_ref<_Head>::type
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
  404e2f:	55                   	push   %rbp
  404e30:	48 89 e5             	mov    %rsp,%rbp
  404e33:	48 83 ec 10          	sub    $0x10,%rsp
  404e37:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
  404e3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404e3f:	48 89 c7             	mov    %rax,%rdi
  404e42:	e8 ce ff ff ff       	callq  404e15 <_ZNSt11_Tuple_implILm2EIdEE7_M_headERKS0_>
  404e47:	c9                   	leaveq 
  404e48:	c3                   	retq   

0000000000404e49 <_ZSt3getILm2EIdddEENSt11__add_c_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERKS5_>:

  template<std::size_t __i, typename... _Elements>
    constexpr typename __add_c_ref<
                      typename tuple_element<__i, tuple<_Elements...>>::type
                    >::type
    get(const tuple<_Elements...>& __t) noexcept
  404e49:	55                   	push   %rbp
  404e4a:	48 89 e5             	mov    %rsp,%rbp
  404e4d:	48 83 ec 10          	sub    $0x10,%rsp
  404e51:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __get_helper<__i>(__t); }
  404e55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404e59:	48 89 c7             	mov    %rax,%rdi
  404e5c:	e8 ce ff ff ff       	callq  404e2f <_ZSt12__get_helperILm2EdIEENSt11__add_c_refIT0_E4typeERKSt11_Tuple_implIXT_EIS1_DpT1_EE>
  404e61:	c9                   	leaveq 
  404e62:	c3                   	retq   

0000000000404e63 <_ZSt4moveIRNSt6thread2idEEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
  404e63:	55                   	push   %rbp
  404e64:	48 89 e5             	mov    %rsp,%rbp
  404e67:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  404e6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404e6f:	5d                   	pop    %rbp
  404e70:	c3                   	retq   

0000000000404e71 <_ZSt4swapINSt6thread2idEEvRT_S3_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
  404e71:	55                   	push   %rbp
  404e72:	48 89 e5             	mov    %rsp,%rbp
  404e75:	48 83 ec 20          	sub    $0x20,%rsp
  404e79:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  404e7d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
  404e81:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404e85:	48 89 c7             	mov    %rax,%rdi
  404e88:	e8 d6 ff ff ff       	callq  404e63 <_ZSt4moveIRNSt6thread2idEEONSt16remove_referenceIT_E4typeEOS4_>
  404e8d:	48 8b 00             	mov    (%rax),%rax
  404e90:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
      __a = _GLIBCXX_MOVE(__b);
  404e94:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  404e98:	48 89 c7             	mov    %rax,%rdi
  404e9b:	e8 c3 ff ff ff       	callq  404e63 <_ZSt4moveIRNSt6thread2idEEONSt16remove_referenceIT_E4typeEOS4_>
  404ea0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  404ea4:	48 8b 00             	mov    (%rax),%rax
  404ea7:	48 89 02             	mov    %rax,(%rdx)
      __b = _GLIBCXX_MOVE(__tmp);
  404eaa:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  404eae:	48 89 c7             	mov    %rax,%rdi
  404eb1:	e8 ad ff ff ff       	callq  404e63 <_ZSt4moveIRNSt6thread2idEEONSt16remove_referenceIT_E4typeEOS4_>
  404eb6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  404eba:	48 8b 00             	mov    (%rax),%rax
  404ebd:	48 89 02             	mov    %rax,(%rdx)
    }
  404ec0:	c9                   	leaveq 
  404ec1:	c3                   	retq   

0000000000404ec2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EED1Ev>:
	}

      // Throw bad_weak_ptr when __r._M_get_use_count() == 0.
      explicit __shared_count(const __weak_count<_Lp>& __r);

      ~__shared_count() noexcept
  404ec2:	55                   	push   %rbp
  404ec3:	48 89 e5             	mov    %rsp,%rbp
  404ec6:	48 83 ec 10          	sub    $0x10,%rsp
  404eca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	if (_M_pi != nullptr)
  404ece:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404ed2:	48 8b 00             	mov    (%rax),%rax
  404ed5:	48 85 c0             	test   %rax,%rax
  404ed8:	74 0f                	je     404ee9 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EED1Ev+0x27>
	  _M_pi->_M_release();
  404eda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404ede:	48 8b 00             	mov    (%rax),%rax
  404ee1:	48 89 c7             	mov    %rax,%rdi
  404ee4:	e8 53 0c 00 00       	callq  405b3c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv>
      }
  404ee9:	c9                   	leaveq 
  404eea:	c3                   	retq   
  404eeb:	90                   	nop

0000000000404eec <_ZNSt13__atomic_baseIbEaSEb>:

      operator __int_type() const volatile noexcept
      { return load(); }

      __int_type
      operator=(__int_type __i) noexcept
  404eec:	55                   	push   %rbp
  404eed:	48 89 e5             	mov    %rsp,%rbp
  404ef0:	48 83 ec 10          	sub    $0x10,%rsp
  404ef4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404ef8:	89 f0                	mov    %esi,%eax
  404efa:	88 45 f4             	mov    %al,-0xc(%rbp)
      {
	store(__i);
  404efd:	0f b6 4d f4          	movzbl -0xc(%rbp),%ecx
  404f01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404f05:	ba 05 00 00 00       	mov    $0x5,%edx
  404f0a:	89 ce                	mov    %ecx,%esi
  404f0c:	48 89 c7             	mov    %rax,%rdi
  404f0f:	e8 36 00 00 00       	callq  404f4a <_ZNSt13__atomic_baseIbE5storeEbSt12memory_order>
	return __i;
  404f14:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
      }
  404f18:	c9                   	leaveq 
  404f19:	c3                   	retq   

0000000000404f1a <_ZNKSt13__atomic_baseIbE4loadESt12memory_order>:

	__atomic_store_n(&_M_i, __i, __m);
      }

      __int_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
  404f1a:	55                   	push   %rbp
  404f1b:	48 89 e5             	mov    %rsp,%rbp
  404f1e:	48 83 ec 20          	sub    $0x20,%rsp
  404f22:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  404f26:	89 75 e4             	mov    %esi,-0x1c(%rbp)
      {
       memory_order __b = __m & __memory_order_mask;
  404f29:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  404f2c:	be ff ff 00 00       	mov    $0xffff,%esi
  404f31:	89 c7                	mov    %eax,%edi
  404f33:	e8 84 ee ff ff       	callq  403dbc <_ZStanSt12memory_orderSt23__memory_order_modifier>
  404f38:	89 45 fc             	mov    %eax,-0x4(%rbp)
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
  404f3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404f3f:	0f b6 00             	movzbl (%rax),%eax
  404f42:	84 c0                	test   %al,%al
  404f44:	0f 95 c0             	setne  %al
      }
  404f47:	c9                   	leaveq 
  404f48:	c3                   	retq   
  404f49:	90                   	nop

0000000000404f4a <_ZNSt13__atomic_baseIbE5storeEbSt12memory_order>:
      bool
      is_lock_free() const volatile noexcept
      { return __atomic_is_lock_free(sizeof(_M_i), nullptr); }

      void
      store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept
  404f4a:	55                   	push   %rbp
  404f4b:	48 89 e5             	mov    %rsp,%rbp
  404f4e:	48 83 ec 20          	sub    $0x20,%rsp
  404f52:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  404f56:	89 f0                	mov    %esi,%eax
  404f58:	89 55 e0             	mov    %edx,-0x20(%rbp)
  404f5b:	88 45 e4             	mov    %al,-0x1c(%rbp)
      {
        memory_order __b = __m & __memory_order_mask;
  404f5e:	8b 45 e0             	mov    -0x20(%rbp),%eax
  404f61:	be ff ff 00 00       	mov    $0xffff,%esi
  404f66:	89 c7                	mov    %eax,%edi
  404f68:	e8 4f ee ff ff       	callq  403dbc <_ZStanSt12memory_orderSt23__memory_order_modifier>
  404f6d:	89 45 fc             	mov    %eax,-0x4(%rbp)
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
  404f70:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
  404f74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404f78:	88 10                	mov    %dl,(%rax)
  404f7a:	0f ae f0             	mfence 
      }
  404f7d:	c9                   	leaveq 
  404f7e:	c3                   	retq   
  404f7f:	90                   	nop

0000000000404f80 <_ZNSt6vectorIdSaIdEEC1Ev>:
      // [23.2.4.1] construct/copy/destroy
      // (assign() and get_allocator() are also listed in this section)
      /**
       *  @brief  Default constructor creates no elements.
       */
      vector()
  404f80:	55                   	push   %rbp
  404f81:	48 89 e5             	mov    %rsp,%rbp
  404f84:	48 83 ec 10          	sub    $0x10,%rsp
  404f88:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Base() { }
  404f8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404f90:	48 89 c7             	mov    %rax,%rdi
  404f93:	e8 52 0c 00 00       	callq  405bea <_ZNSt12_Vector_baseIdSaIdEEC1Ev>
  404f98:	c9                   	leaveq 
  404f99:	c3                   	retq   

0000000000404f9a <_ZNSt6vectorIdSaIdEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
  404f9a:	55                   	push   %rbp
  404f9b:	48 89 e5             	mov    %rsp,%rbp
  404f9e:	48 83 ec 10          	sub    $0x10,%rsp
  404fa2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator()); }
  404fa6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404faa:	48 89 c7             	mov    %rax,%rdi
  404fad:	e8 a2 0c 00 00       	callq  405c54 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
  404fb2:	48 89 c2             	mov    %rax,%rdx
  404fb5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404fb9:	48 8b 48 08          	mov    0x8(%rax),%rcx
  404fbd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404fc1:	48 8b 00             	mov    (%rax),%rax
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  404fc4:	48 89 ce             	mov    %rcx,%rsi
  404fc7:	48 89 c7             	mov    %rax,%rdi
  404fca:	e8 93 0c 00 00       	callq  405c62 <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>
		      _M_get_Tp_allocator()); }
  404fcf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404fd3:	48 89 c7             	mov    %rax,%rdi
  404fd6:	e8 29 0c 00 00       	callq  405c04 <_ZNSt12_Vector_baseIdSaIdEED1Ev>
  404fdb:	c9                   	leaveq 
  404fdc:	c3                   	retq   
  404fdd:	90                   	nop

0000000000404fde <_ZNSt6vectorIdSaIdEE7reserveEm>:
{
_GLIBCXX_BEGIN_NAMESPACE_CONTAINER

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
  404fde:	55                   	push   %rbp
  404fdf:	48 89 e5             	mov    %rsp,%rbp
  404fe2:	53                   	push   %rbx
  404fe3:	48 83 ec 28          	sub    $0x28,%rsp
  404fe7:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  404feb:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    reserve(size_type __n)
    {
      if (__n > this->max_size())
  404fef:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  404ff3:	48 89 c7             	mov    %rax,%rdi
  404ff6:	e8 91 0c 00 00       	callq  405c8c <_ZNKSt6vectorIdSaIdEE8max_sizeEv>
  404ffb:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  404fff:	0f 92 c0             	setb   %al
  405002:	84 c0                	test   %al,%al
  405004:	74 0a                	je     405010 <_ZNSt6vectorIdSaIdEE7reserveEm+0x32>
	__throw_length_error(__N("vector::reserve"));
  405006:	bf 90 be 40 00       	mov    $0x40be90,%edi
  40500b:	e8 00 c6 ff ff       	callq  401610 <_ZSt20__throw_length_errorPKc@plt>
      if (this->capacity() < __n)
  405010:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405014:	48 89 c7             	mov    %rax,%rdi
  405017:	e8 92 0c 00 00       	callq  405cae <_ZNKSt6vectorIdSaIdEE8capacityEv>
  40501c:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  405020:	0f 92 c0             	setb   %al
  405023:	84 c0                	test   %al,%al
  405025:	0f 84 ea 00 00 00    	je     405115 <_ZNSt6vectorIdSaIdEE7reserveEm+0x137>
	{
	  const size_type __old_size = size();
  40502b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40502f:	48 89 c7             	mov    %rax,%rdi
  405032:	e8 5f 01 00 00       	callq  405196 <_ZNKSt6vectorIdSaIdEE4sizeEv>
  405037:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  pointer __tmp = _M_allocate_and_copy(__n,
	    _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_start),
	    _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
  40503b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40503f:	48 8b 40 08          	mov    0x8(%rax),%rax
  405043:	48 89 c7             	mov    %rax,%rdi
  405046:	e8 89 0c 00 00       	callq  405cd4 <_ZSt32__make_move_if_noexcept_iteratorIPdSt13move_iteratorIS0_EET0_T_>
  40504b:	48 89 c3             	mov    %rax,%rbx
  40504e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405052:	48 8b 00             	mov    (%rax),%rax
  405055:	48 89 c7             	mov    %rax,%rdi
  405058:	e8 77 0c 00 00       	callq  405cd4 <_ZSt32__make_move_if_noexcept_iteratorIPdSt13move_iteratorIS0_EET0_T_>
  40505d:	48 89 c2             	mov    %rax,%rdx
  405060:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  405064:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405068:	48 89 d9             	mov    %rbx,%rcx
  40506b:	48 89 c7             	mov    %rax,%rdi
  40506e:	e8 87 0c 00 00       	callq  405cfa <_ZNSt6vectorIdSaIdEE20_M_allocate_and_copyISt13move_iteratorIPdEEES4_mT_S6_>
  405073:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			_M_get_Tp_allocator());
  405077:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40507b:	48 89 c7             	mov    %rax,%rdi
  40507e:	e8 d1 0b 00 00       	callq  405c54 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
  405083:	48 89 c2             	mov    %rax,%rdx
  405086:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40508a:	48 8b 48 08          	mov    0x8(%rax),%rcx
  40508e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405092:	48 8b 00             	mov    (%rax),%rax
	{
	  const size_type __old_size = size();
	  pointer __tmp = _M_allocate_and_copy(__n,
	    _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_start),
	    _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
	  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  405095:	48 89 ce             	mov    %rcx,%rsi
  405098:	48 89 c7             	mov    %rax,%rdi
  40509b:	e8 c2 0b 00 00       	callq  405c62 <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>
			_M_get_Tp_allocator());
	  _M_deallocate(this->_M_impl._M_start,
			this->_M_impl._M_end_of_storage
			- this->_M_impl._M_start);
  4050a0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4050a4:	48 8b 40 10          	mov    0x10(%rax),%rax
  4050a8:	48 89 c2             	mov    %rax,%rdx
  4050ab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4050af:	48 8b 00             	mov    (%rax),%rax
  4050b2:	48 29 c2             	sub    %rax,%rdx
  4050b5:	48 89 d0             	mov    %rdx,%rax
  4050b8:	48 c1 f8 03          	sar    $0x3,%rax
  4050bc:	48 89 c2             	mov    %rax,%rdx
  4050bf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4050c3:	48 8b 08             	mov    (%rax),%rcx
  4050c6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
	  pointer __tmp = _M_allocate_and_copy(__n,
	    _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_start),
	    _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
	  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			_M_get_Tp_allocator());
	  _M_deallocate(this->_M_impl._M_start,
  4050ca:	48 89 ce             	mov    %rcx,%rsi
  4050cd:	48 89 c7             	mov    %rax,%rdi
  4050d0:	e8 bd 0c 00 00       	callq  405d92 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdm>
			this->_M_impl._M_end_of_storage
			- this->_M_impl._M_start);
	  this->_M_impl._M_start = __tmp;
  4050d5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4050d9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4050dd:	48 89 10             	mov    %rdx,(%rax)
	  this->_M_impl._M_finish = __tmp + __old_size;
  4050e0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4050e4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  4050eb:	00 
  4050ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4050f0:	48 01 c2             	add    %rax,%rdx
  4050f3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4050f7:	48 89 50 08          	mov    %rdx,0x8(%rax)
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  4050fb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4050ff:	48 8b 00             	mov    (%rax),%rax
  405102:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  405106:	48 c1 e2 03          	shl    $0x3,%rdx
  40510a:	48 01 c2             	add    %rax,%rdx
  40510d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405111:	48 89 50 10          	mov    %rdx,0x10(%rax)
	}
    }
  405115:	48 83 c4 28          	add    $0x28,%rsp
  405119:	5b                   	pop    %rbx
  40511a:	5d                   	pop    %rbp
  40511b:	c3                   	retq   

000000000040511c <_ZSt7forwardIRKdEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  40511c:	55                   	push   %rbp
  40511d:	48 89 e5             	mov    %rsp,%rbp
  405120:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  405124:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405128:	5d                   	pop    %rbp
  405129:	c3                   	retq   

000000000040512a <_ZNSt6vectorIdSaIdEE9push_backERKd>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
  40512a:	55                   	push   %rbp
  40512b:	48 89 e5             	mov    %rsp,%rbp
  40512e:	48 83 ec 10          	sub    $0x10,%rsp
  405132:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405136:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  40513a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40513e:	48 8b 50 08          	mov    0x8(%rax),%rdx
  405142:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405146:	48 8b 40 10          	mov    0x10(%rax),%rax
  40514a:	48 39 c2             	cmp    %rax,%rdx
  40514d:	74 31                	je     405180 <_ZNSt6vectorIdSaIdEE9push_backERKd+0x56>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
	                             __x);
  40514f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405153:	48 8b 48 08          	mov    0x8(%rax),%rcx
  405157:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
  40515b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40515f:	48 89 ce             	mov    %rcx,%rsi
  405162:	48 89 c7             	mov    %rax,%rdi
  405165:	e8 5c 0c 00 00       	callq  405dc6 <_ZNSt16allocator_traitsISaIdEE9constructIdIRKdEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS0_PT_DpOS5_>
	                             __x);
	    ++this->_M_impl._M_finish;
  40516a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40516e:	48 8b 40 08          	mov    0x8(%rax),%rax
  405172:	48 8d 50 08          	lea    0x8(%rax),%rdx
  405176:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40517a:	48 89 50 08          	mov    %rdx,0x8(%rax)
  40517e:	eb 13                	jmp    405193 <_ZNSt6vectorIdSaIdEE9push_backERKd+0x69>
	  }
	else
#if __cplusplus >= 201103L
	  _M_emplace_back_aux(__x);
  405180:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  405184:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405188:	48 89 d6             	mov    %rdx,%rsi
  40518b:	48 89 c7             	mov    %rax,%rdi
  40518e:	e8 6b 0c 00 00       	callq  405dfe <_ZNSt6vectorIdSaIdEE19_M_emplace_back_auxIIRKdEEEvDpOT_>
#else
	  _M_insert_aux(end(), __x);
#endif
      }
  405193:	c9                   	leaveq 
  405194:	c3                   	retq   
  405195:	90                   	nop

0000000000405196 <_ZNKSt6vectorIdSaIdEE4sizeEv>:
#endif

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
  405196:	55                   	push   %rbp
  405197:	48 89 e5             	mov    %rsp,%rbp
  40519a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  40519e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4051a2:	48 8b 40 08          	mov    0x8(%rax),%rax
  4051a6:	48 89 c2             	mov    %rax,%rdx
  4051a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4051ad:	48 8b 00             	mov    (%rax),%rax
  4051b0:	48 29 c2             	sub    %rax,%rdx
  4051b3:	48 89 d0             	mov    %rdx,%rax
  4051b6:	48 c1 f8 03          	sar    $0x3,%rax
  4051ba:	5d                   	pop    %rbp
  4051bb:	c3                   	retq   

00000000004051bc <_ZNSt6vectorIdSaIdEEixEm>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n)
  4051bc:	55                   	push   %rbp
  4051bd:	48 89 e5             	mov    %rsp,%rbp
  4051c0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4051c4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return *(this->_M_impl._M_start + __n); }
  4051c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4051cc:	48 8b 00             	mov    (%rax),%rax
  4051cf:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4051d3:	48 c1 e2 03          	shl    $0x3,%rdx
  4051d7:	48 01 d0             	add    %rdx,%rax
  4051da:	5d                   	pop    %rbp
  4051db:	c3                   	retq   

00000000004051dc <_ZNSt6vectorISt6threadSaIS0_EEC1Ev>:
      // [23.2.4.1] construct/copy/destroy
      // (assign() and get_allocator() are also listed in this section)
      /**
       *  @brief  Default constructor creates no elements.
       */
      vector()
  4051dc:	55                   	push   %rbp
  4051dd:	48 89 e5             	mov    %rsp,%rbp
  4051e0:	48 83 ec 10          	sub    $0x10,%rsp
  4051e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Base() { }
  4051e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4051ec:	48 89 c7             	mov    %rax,%rdi
  4051ef:	e8 0e 0e 00 00       	callq  406002 <_ZNSt12_Vector_baseISt6threadSaIS0_EEC1Ev>
  4051f4:	c9                   	leaveq 
  4051f5:	c3                   	retq   

00000000004051f6 <_ZNSt6vectorISt6threadSaIS0_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
  4051f6:	55                   	push   %rbp
  4051f7:	48 89 e5             	mov    %rsp,%rbp
  4051fa:	48 83 ec 10          	sub    $0x10,%rsp
  4051fe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator()); }
  405202:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405206:	48 89 c7             	mov    %rax,%rdi
  405209:	e8 5e 0e 00 00       	callq  40606c <_ZNSt12_Vector_baseISt6threadSaIS0_EE19_M_get_Tp_allocatorEv>
  40520e:	48 89 c2             	mov    %rax,%rdx
  405211:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405215:	48 8b 48 08          	mov    0x8(%rax),%rcx
  405219:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40521d:	48 8b 00             	mov    (%rax),%rax
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  405220:	48 89 ce             	mov    %rcx,%rsi
  405223:	48 89 c7             	mov    %rax,%rdi
  405226:	e8 4f 0e 00 00       	callq  40607a <_ZSt8_DestroyIPSt6threadS0_EvT_S2_RSaIT0_E>
		      _M_get_Tp_allocator()); }
  40522b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40522f:	48 89 c7             	mov    %rax,%rdi
  405232:	e8 e5 0d 00 00       	callq  40601c <_ZNSt12_Vector_baseISt6threadSaIS0_EED1Ev>
  405237:	c9                   	leaveq 
  405238:	c3                   	retq   

0000000000405239 <_ZSt7forwardIN7barrier8internal11cache_wiperEEOT_RNSt16remove_referenceIS3_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  405239:	55                   	push   %rbp
  40523a:	48 89 e5             	mov    %rsp,%rbp
  40523d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  405241:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405245:	5d                   	pop    %rbp
  405246:	c3                   	retq   

0000000000405247 <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  405247:	55                   	push   %rbp
  405248:	48 89 e5             	mov    %rsp,%rbp
  40524b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  40524f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405253:	5d                   	pop    %rbp
  405254:	c3                   	retq   
  405255:	90                   	nop

0000000000405256 <_ZNSt12__shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEELN9__gnu_cxx12_Lock_policyE2EED1Ev>:
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
  405256:	55                   	push   %rbp
  405257:	48 89 e5             	mov    %rsp,%rbp
  40525a:	48 83 ec 10          	sub    $0x10,%rsp
  40525e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405262:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405266:	48 83 c0 08          	add    $0x8,%rax
  40526a:	48 89 c7             	mov    %rax,%rdi
  40526d:	e8 50 fc ff ff       	callq  404ec2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EED1Ev>
  405272:	c9                   	leaveq 
  405273:	c3                   	retq   

0000000000405274 <_ZNSt10shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEED1Ev>:
  405274:	55                   	push   %rbp
  405275:	48 89 e5             	mov    %rsp,%rbp
  405278:	48 83 ec 10          	sub    $0x10,%rsp
  40527c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405280:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405284:	48 89 c7             	mov    %rax,%rdi
  405287:	e8 ca ff ff ff       	callq  405256 <_ZNSt12__shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEELN9__gnu_cxx12_Lock_policyE2EED1Ev>
  40528c:	c9                   	leaveq 
  40528d:	c3                   	retq   

000000000040528e <_ZNSt6threadC1IN7barrier8internal11cache_wiperEIRjEEEOT_DpOT0_>:
    thread(thread&& __t) noexcept
    { swap(__t); }

    template<typename _Callable, typename... _Args>
      explicit 
      thread(_Callable&& __f, _Args&&... __args)
  40528e:	55                   	push   %rbp
  40528f:	48 89 e5             	mov    %rsp,%rbp
  405292:	53                   	push   %rbx
  405293:	48 83 ec 58          	sub    $0x58,%rsp
  405297:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  40529b:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  40529f:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
      {
  4052a3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4052a7:	48 89 c7             	mov    %rax,%rdi
  4052aa:	e8 73 e9 ff ff       	callq  403c22 <_ZNSt6thread2idC1Ev>
        _M_start_thread(_M_make_routine(std::__bind_simple(
                std::forward<_Callable>(__f),
                std::forward<_Args>(__args)...)));
  4052af:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4052b3:	48 89 c7             	mov    %rax,%rdi
  4052b6:	e8 8c ff ff ff       	callq  405247 <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
  4052bb:	48 89 c3             	mov    %rax,%rbx
    template<typename _Callable, typename... _Args>
      explicit 
      thread(_Callable&& __f, _Args&&... __args)
      {
        _M_start_thread(_M_make_routine(std::__bind_simple(
                std::forward<_Callable>(__f),
  4052be:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4052c2:	48 89 c7             	mov    %rax,%rdi
  4052c5:	e8 6f ff ff ff       	callq  405239 <_ZSt7forwardIN7barrier8internal11cache_wiperEEOT_RNSt16remove_referenceIS3_E4typeE>
  4052ca:	48 89 c1             	mov    %rax,%rcx

    template<typename _Callable, typename... _Args>
      explicit 
      thread(_Callable&& __f, _Args&&... __args)
      {
        _M_start_thread(_M_make_routine(std::__bind_simple(
  4052cd:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  4052d1:	48 89 da             	mov    %rbx,%rdx
  4052d4:	48 89 ce             	mov    %rcx,%rsi
  4052d7:	48 89 c7             	mov    %rax,%rdi
  4052da:	e8 94 0f 00 00       	callq  406273 <_ZSt13__bind_simpleIN7barrier8internal11cache_wiperEIRjEENSt19_Bind_simple_helperIT_IDpT0_EE6__typeEOS5_DpOS6_>
  4052df:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4052e3:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  4052e7:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  4052eb:	48 89 ce             	mov    %rcx,%rsi
  4052ee:	48 89 c7             	mov    %rax,%rdi
  4052f1:	e8 e4 0f 00 00       	callq  4062da <_ZNSt6thread15_M_make_routineISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESt10shared_ptrINS_5_ImplIT_EEEOS9_>
  4052f6:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  4052fa:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4052fe:	48 89 d6             	mov    %rdx,%rsi
  405301:	48 89 c7             	mov    %rax,%rdi
  405304:	e8 17 10 00 00       	callq  406320 <_ZNSt10shared_ptrINSt6thread10_Impl_baseEEC1INS0_5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEvEEOS_IT_E>
  405309:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  40530d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  405311:	48 89 d6             	mov    %rdx,%rsi
  405314:	48 89 c7             	mov    %rax,%rdi
  405317:	e8 d4 c3 ff ff       	callq  4016f0 <_ZNSt6thread15_M_start_threadESt10shared_ptrINS_10_Impl_baseEE@plt>
  40531c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  405320:	48 89 c7             	mov    %rax,%rdi
  405323:	e8 16 ea ff ff       	callq  403d3e <_ZNSt10shared_ptrINSt6thread10_Impl_baseEED1Ev>
  405328:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40532c:	48 89 c7             	mov    %rax,%rdi
  40532f:	e8 40 ff ff ff       	callq  405274 <_ZNSt10shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEED1Ev>
  405334:	eb 26                	jmp    40535c <_ZNSt6threadC1IN7barrier8internal11cache_wiperEIRjEEEOT_DpOT0_+0xce>
  405336:	48 89 c3             	mov    %rax,%rbx
  405339:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40533d:	48 89 c7             	mov    %rax,%rdi
  405340:	e8 f9 e9 ff ff       	callq  403d3e <_ZNSt10shared_ptrINSt6thread10_Impl_baseEED1Ev>
  405345:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  405349:	48 89 c7             	mov    %rax,%rdi
  40534c:	e8 23 ff ff ff       	callq  405274 <_ZNSt10shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEED1Ev>
  405351:	48 89 d8             	mov    %rbx,%rax
  405354:	48 89 c7             	mov    %rax,%rdi
  405357:	e8 c4 c5 ff ff       	callq  401920 <_Unwind_Resume@plt>
                std::forward<_Callable>(__f),
                std::forward<_Args>(__args)...)));
      }
  40535c:	48 83 c4 58          	add    $0x58,%rsp
  405360:	5b                   	pop    %rbx
  405361:	5d                   	pop    %rbp
  405362:	c3                   	retq   
  405363:	90                   	nop

0000000000405364 <_ZNSt6vectorISt6threadSaIS0_EE9push_backEOS0_>:
#endif
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
  405364:	55                   	push   %rbp
  405365:	48 89 e5             	mov    %rsp,%rbp
  405368:	48 83 ec 10          	sub    $0x10,%rsp
  40536c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405370:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { emplace_back(std::move(__x)); }
  405374:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405378:	48 89 c7             	mov    %rax,%rdi
  40537b:	e8 0c f8 ff ff       	callq  404b8c <_ZSt4moveIRSt6threadEONSt16remove_referenceIT_E4typeEOS3_>
  405380:	48 89 c2             	mov    %rax,%rdx
  405383:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405387:	48 89 d6             	mov    %rdx,%rsi
  40538a:	48 89 c7             	mov    %rax,%rdi
  40538d:	e8 cc 0f 00 00       	callq  40635e <_ZNSt6vectorISt6threadSaIS0_EE12emplace_backIIS0_EEEvDpOT_>
  405392:	c9                   	leaveq 
  405393:	c3                   	retq   

0000000000405394 <_ZNSt6vectorISt6threadSaIS0_EE5beginEv>:
       *  Returns a read/write iterator that points to the first
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
  405394:	55                   	push   %rbp
  405395:	48 89 e5             	mov    %rsp,%rbp
  405398:	48 83 ec 20          	sub    $0x20,%rsp
  40539c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
  4053a0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4053a4:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  4053a8:	48 89 d6             	mov    %rdx,%rsi
  4053ab:	48 89 c7             	mov    %rax,%rdi
  4053ae:	e8 2d 10 00 00       	callq  4063e0 <_ZN9__gnu_cxx17__normal_iteratorIPSt6threadSt6vectorIS1_SaIS1_EEEC1ERKS2_>
  4053b3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4053b7:	c9                   	leaveq 
  4053b8:	c3                   	retq   
  4053b9:	90                   	nop

00000000004053ba <_ZNSt6vectorISt6threadSaIS0_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
  4053ba:	55                   	push   %rbp
  4053bb:	48 89 e5             	mov    %rsp,%rbp
  4053be:	48 83 ec 20          	sub    $0x20,%rsp
  4053c2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
  4053c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4053ca:	48 8d 50 08          	lea    0x8(%rax),%rdx
  4053ce:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  4053d2:	48 89 d6             	mov    %rdx,%rsi
  4053d5:	48 89 c7             	mov    %rax,%rdi
  4053d8:	e8 03 10 00 00       	callq  4063e0 <_ZN9__gnu_cxx17__normal_iteratorIPSt6threadSt6vectorIS1_SaIS1_EEEC1ERKS2_>
  4053dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4053e1:	c9                   	leaveq 
  4053e2:	c3                   	retq   

00000000004053e3 <_ZSt6mem_fnIFvvESt6threadESt7_Mem_fnIMT0_T_ES5_>:
   *  pointer @a pm.
   *  @ingroup functors
   */
  template<typename _Tp, typename _Class>
    inline _Mem_fn<_Tp _Class::*>
    mem_fn(_Tp _Class::* __pm) noexcept
  4053e3:	55                   	push   %rbp
  4053e4:	48 89 e5             	mov    %rsp,%rbp
  4053e7:	48 83 ec 20          	sub    $0x20,%rsp
  4053eb:	48 89 f8             	mov    %rdi,%rax
  4053ee:	48 89 f1             	mov    %rsi,%rcx
  4053f1:	48 89 ca             	mov    %rcx,%rdx
  4053f4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  4053f8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    {
      return _Mem_fn<_Tp _Class::*>(__pm);
  4053fc:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  405400:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  405404:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  405408:	48 89 ce             	mov    %rcx,%rsi
  40540b:	48 89 c7             	mov    %rax,%rdi
  40540e:	e8 0d 10 00 00       	callq  406420 <_ZNSt7_Mem_fnIMSt6threadFvvEEC1ES2_>
  405413:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405417:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    }
  40541b:	c9                   	leaveq 
  40541c:	c3                   	retq   

000000000040541d <_ZSt4moveIRSt7_Mem_fnIMSt6threadFvvEEEONSt16remove_referenceIT_E4typeEOS7_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
  40541d:	55                   	push   %rbp
  40541e:	48 89 e5             	mov    %rsp,%rbp
  405421:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  405425:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405429:	5d                   	pop    %rbp
  40542a:	c3                   	retq   

000000000040542b <_ZSt8for_eachIN9__gnu_cxx17__normal_iteratorIPSt6threadSt6vectorIS2_SaIS2_EEEESt7_Mem_fnIMS2_FvvEEET0_T_SD_SC_>:
   *  @p [first,last).  @p __f must not modify the order of the sequence.
   *  If @p __f has a return value it is ignored.
  */
  template<typename _InputIterator, typename _Function>
    _Function
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
  40542b:	55                   	push   %rbp
  40542c:	48 89 e5             	mov    %rsp,%rbp
  40542f:	48 83 ec 30          	sub    $0x30,%rsp
  405433:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  405437:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40543b:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40543f:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
    {
      // concept requirements
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_requires_valid_range(__first, __last);
      for (; __first != __last; ++__first)
  405443:	eb 2a                	jmp    40546f <_ZSt8for_eachIN9__gnu_cxx17__normal_iteratorIPSt6threadSt6vectorIS2_SaIS2_EEEESt7_Mem_fnIMS2_FvvEEET0_T_SD_SC_+0x44>
	__f(*__first);
  405445:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  405449:	48 89 c7             	mov    %rax,%rdi
  40544c:	e8 69 10 00 00       	callq  4064ba <_ZNK9__gnu_cxx17__normal_iteratorIPSt6threadSt6vectorIS1_SaIS1_EEEdeEv>
  405451:	48 89 c2             	mov    %rax,%rdx
  405454:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  405458:	48 89 d6             	mov    %rdx,%rsi
  40545b:	48 89 c7             	mov    %rax,%rdi
  40545e:	e8 69 10 00 00       	callq  4064cc <_ZNKSt7_Mem_fnIMSt6threadFvvEEclIIEvEEvRS0_DpOT_>
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
    {
      // concept requirements
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_requires_valid_range(__first, __last);
      for (; __first != __last; ++__first)
  405463:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  405467:	48 89 c7             	mov    %rax,%rdi
  40546a:	e8 2b 10 00 00       	callq  40649a <_ZN9__gnu_cxx17__normal_iteratorIPSt6threadSt6vectorIS1_SaIS1_EEEppEv>
  40546f:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  405473:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  405477:	48 89 d6             	mov    %rdx,%rsi
  40547a:	48 89 c7             	mov    %rax,%rdi
  40547d:	e8 dc 0f 00 00       	callq  40645e <_ZN9__gnu_cxxneIPSt6threadSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
  405482:	84 c0                	test   %al,%al
  405484:	75 bf                	jne    405445 <_ZSt8for_eachIN9__gnu_cxx17__normal_iteratorIPSt6threadSt6vectorIS2_SaIS2_EEEESt7_Mem_fnIMS2_FvvEEET0_T_SD_SC_+0x1a>
	__f(*__first);
      return _GLIBCXX_MOVE(__f);
  405486:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40548a:	48 89 c7             	mov    %rax,%rdi
  40548d:	e8 8b ff ff ff       	callq  40541d <_ZSt4moveIRSt7_Mem_fnIMSt6threadFvvEEEONSt16remove_referenceIT_E4typeEOS7_>
  405492:	48 8b 50 08          	mov    0x8(%rax),%rdx
  405496:	48 8b 00             	mov    (%rax),%rax
    }
  405499:	c9                   	leaveq 
  40549a:	c3                   	retq   
  40549b:	90                   	nop

000000000040549c <_ZNSt13__atomic_baseIjE9fetch_addEjSt12memory_order>:
	return compare_exchange_strong(__i1, __i2, __m,
				       __cmpexch_failure_order(__m));
      }

      __int_type
      fetch_add(__int_type __i,
  40549c:	55                   	push   %rbp
  40549d:	48 89 e5             	mov    %rsp,%rbp
  4054a0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4054a4:	89 75 f4             	mov    %esi,-0xc(%rbp)
  4054a7:	89 55 f0             	mov    %edx,-0x10(%rbp)
		memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_add(&_M_i, __i, __m); }
  4054aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4054ae:	8b 55 f4             	mov    -0xc(%rbp),%edx
  4054b1:	f0 0f c1 10          	lock xadd %edx,(%rax)
  4054b5:	89 d0                	mov    %edx,%eax
  4054b7:	5d                   	pop    %rbp
  4054b8:	c3                   	retq   
  4054b9:	90                   	nop

00000000004054ba <_ZNSt13__atomic_baseIjE5storeEjSt12memory_order>:
      bool
      is_lock_free() const volatile noexcept
      { return __atomic_is_lock_free(sizeof(_M_i), nullptr); }

      void
      store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept
  4054ba:	55                   	push   %rbp
  4054bb:	48 89 e5             	mov    %rsp,%rbp
  4054be:	48 83 ec 20          	sub    $0x20,%rsp
  4054c2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4054c6:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  4054c9:	89 55 e0             	mov    %edx,-0x20(%rbp)
      {
        memory_order __b = __m & __memory_order_mask;
  4054cc:	8b 45 e0             	mov    -0x20(%rbp),%eax
  4054cf:	be ff ff 00 00       	mov    $0xffff,%esi
  4054d4:	89 c7                	mov    %eax,%edi
  4054d6:	e8 e1 e8 ff ff       	callq  403dbc <_ZStanSt12memory_orderSt23__memory_order_modifier>
  4054db:	89 45 fc             	mov    %eax,-0x4(%rbp)
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
  4054de:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4054e2:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  4054e5:	89 10                	mov    %edx,(%rax)
  4054e7:	0f ae f0             	mfence 
      }
  4054ea:	c9                   	leaveq 
  4054eb:	c3                   	retq   

00000000004054ec <_ZNSt24uniform_int_distributionImEC1Emm>:
    public:
      /**
       * @brief Constructs a uniform distribution object.
       */
      explicit
      uniform_int_distribution(_IntType __a = 0,
  4054ec:	55                   	push   %rbp
  4054ed:	48 89 e5             	mov    %rsp,%rbp
  4054f0:	48 83 ec 20          	sub    $0x20,%rsp
  4054f4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4054f8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4054fc:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
			   _IntType __b = std::numeric_limits<_IntType>::max())
      : _M_param(__a, __b)
  405500:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405504:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  405508:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40550c:	48 89 ce             	mov    %rcx,%rsi
  40550f:	48 89 c7             	mov    %rax,%rdi
  405512:	e8 1d 10 00 00       	callq  406534 <_ZNSt24uniform_int_distributionImE10param_typeC1Emm>
      { }
  405517:	c9                   	leaveq 
  405518:	c3                   	retq   
  405519:	90                   	nop

000000000040551a <_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEC1Em>:
      static constexpr result_type initialization_multiplier = __f;
      static constexpr result_type default_seed = 5489u;

      // constructors and member function
      explicit
      mersenne_twister_engine(result_type __sd = default_seed)
  40551a:	55                   	push   %rbp
  40551b:	48 89 e5             	mov    %rsp,%rbp
  40551e:	48 83 ec 10          	sub    $0x10,%rsp
  405522:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405526:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { seed(__sd); }
  40552a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40552e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405532:	48 89 d6             	mov    %rdx,%rsi
  405535:	48 89 c7             	mov    %rax,%rdi
  405538:	e8 21 10 00 00       	callq  40655e <_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE4seedEm>
  40553d:	c9                   	leaveq 
  40553e:	c3                   	retq   
  40553f:	90                   	nop

0000000000405540 <_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_>:
      /**
       * @brief Generating functions.
       */
      template<typename _UniformRandomNumberGenerator>
	result_type
	operator()(_UniformRandomNumberGenerator& __urng)
  405540:	55                   	push   %rbp
  405541:	48 89 e5             	mov    %rsp,%rbp
  405544:	48 83 ec 10          	sub    $0x10,%rsp
  405548:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40554c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
        { return this->operator()(__urng, _M_param); }
  405550:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  405554:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  405558:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40555c:	48 89 ce             	mov    %rcx,%rsi
  40555f:	48 89 c7             	mov    %rax,%rdi
  405562:	e8 9b 10 00 00       	callq  406602 <_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE>
  405567:	c9                   	leaveq 
  405568:	c3                   	retq   
  405569:	90                   	nop

000000000040556a <_ZNSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EEC1Ev>:
      // [23.2.4.1] construct/copy/destroy
      // (assign() and get_allocator() are also listed in this section)
      /**
       *  @brief  Default constructor creates no elements.
       */
      vector()
  40556a:	55                   	push   %rbp
  40556b:	48 89 e5             	mov    %rsp,%rbp
  40556e:	48 83 ec 10          	sub    $0x10,%rsp
  405572:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Base() { }
  405576:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40557a:	48 89 c7             	mov    %rax,%rdi
  40557d:	e8 12 12 00 00       	callq  406794 <_ZNSt12_Vector_baseISt6vectorISt5tupleIIdddEESaIS2_EESaIS4_EEC1Ev>
  405582:	c9                   	leaveq 
  405583:	c3                   	retq   

0000000000405584 <_ZNSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
  405584:	55                   	push   %rbp
  405585:	48 89 e5             	mov    %rsp,%rbp
  405588:	48 83 ec 10          	sub    $0x10,%rsp
  40558c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator()); }
  405590:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405594:	48 89 c7             	mov    %rax,%rdi
  405597:	e8 72 12 00 00       	callq  40680e <_ZNSt12_Vector_baseISt6vectorISt5tupleIIdddEESaIS2_EESaIS4_EE19_M_get_Tp_allocatorEv>
  40559c:	48 89 c2             	mov    %rax,%rdx
  40559f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4055a3:	48 8b 48 08          	mov    0x8(%rax),%rcx
  4055a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4055ab:	48 8b 00             	mov    (%rax),%rax
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  4055ae:	48 89 ce             	mov    %rcx,%rsi
  4055b1:	48 89 c7             	mov    %rax,%rdi
  4055b4:	e8 63 12 00 00       	callq  40681c <_ZSt8_DestroyIPSt6vectorISt5tupleIIdddEESaIS2_EES4_EvT_S6_RSaIT0_E>
		      _M_get_Tp_allocator()); }
  4055b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4055bd:	48 89 c7             	mov    %rax,%rdi
  4055c0:	e8 e9 11 00 00       	callq  4067ae <_ZNSt12_Vector_baseISt6vectorISt5tupleIIdddEESaIS2_EESaIS4_EED1Ev>
  4055c5:	c9                   	leaveq 
  4055c6:	c3                   	retq   
  4055c7:	90                   	nop

00000000004055c8 <_ZNSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EE6resizeEm>:
       *  number of elements.  If the number is smaller than the
       *  %vector's current size the %vector is truncated, otherwise
       *  default constructed elements are appended.
       */
      void
      resize(size_type __new_size)
  4055c8:	55                   	push   %rbp
  4055c9:	48 89 e5             	mov    %rsp,%rbp
  4055cc:	48 83 ec 10          	sub    $0x10,%rsp
  4055d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4055d4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      {
	if (__new_size > size())
  4055d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4055dc:	48 89 c7             	mov    %rax,%rdi
  4055df:	e8 74 00 00 00       	callq  405658 <_ZNKSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EE4sizeEv>
  4055e4:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  4055e8:	0f 92 c0             	setb   %al
  4055eb:	84 c0                	test   %al,%al
  4055ed:	74 24                	je     405613 <_ZNSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EE6resizeEm+0x4b>
	  _M_default_append(__new_size - size());
  4055ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4055f3:	48 89 c7             	mov    %rax,%rdi
  4055f6:	e8 5d 00 00 00       	callq  405658 <_ZNKSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EE4sizeEv>
  4055fb:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4055ff:	48 29 c2             	sub    %rax,%rdx
  405602:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405606:	48 89 d6             	mov    %rdx,%rsi
  405609:	48 89 c7             	mov    %rax,%rdi
  40560c:	e8 35 12 00 00       	callq  406846 <_ZNSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EE17_M_default_appendEm>
  405611:	eb 42                	jmp    405655 <_ZNSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EE6resizeEm+0x8d>
	else if (__new_size < size())
  405613:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405617:	48 89 c7             	mov    %rax,%rdi
  40561a:	e8 39 00 00 00       	callq  405658 <_ZNKSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EE4sizeEv>
  40561f:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  405623:	0f 97 c0             	seta   %al
  405626:	84 c0                	test   %al,%al
  405628:	74 2b                	je     405655 <_ZNSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EE6resizeEm+0x8d>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
  40562a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40562e:	48 8b 08             	mov    (%rax),%rcx
  405631:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  405635:	48 89 d0             	mov    %rdx,%rax
  405638:	48 01 c0             	add    %rax,%rax
  40563b:	48 01 d0             	add    %rdx,%rax
  40563e:	48 c1 e0 03          	shl    $0x3,%rax
  405642:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  405646:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40564a:	48 89 d6             	mov    %rdx,%rsi
  40564d:	48 89 c7             	mov    %rax,%rdi
  405650:	e8 4d 14 00 00       	callq  406aa2 <_ZNSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EE15_M_erase_at_endEPS3_>
      }
  405655:	c9                   	leaveq 
  405656:	c3                   	retq   
  405657:	90                   	nop

0000000000405658 <_ZNKSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EE4sizeEv>:
#endif

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
  405658:	55                   	push   %rbp
  405659:	48 89 e5             	mov    %rsp,%rbp
  40565c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  405660:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405664:	48 8b 40 08          	mov    0x8(%rax),%rax
  405668:	48 89 c2             	mov    %rax,%rdx
  40566b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40566f:	48 8b 00             	mov    (%rax),%rax
  405672:	48 29 c2             	sub    %rax,%rdx
  405675:	48 89 d0             	mov    %rdx,%rax
  405678:	48 c1 f8 03          	sar    $0x3,%rax
  40567c:	48 89 c2             	mov    %rax,%rdx
  40567f:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
  405686:	aa aa aa 
  405689:	48 0f af c2          	imul   %rdx,%rax
  40568d:	5d                   	pop    %rbp
  40568e:	c3                   	retq   
  40568f:	90                   	nop

0000000000405690 <_ZNSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EEixEm>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n)
  405690:	55                   	push   %rbp
  405691:	48 89 e5             	mov    %rsp,%rbp
  405694:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405698:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return *(this->_M_impl._M_start + __n); }
  40569c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4056a0:	48 8b 08             	mov    (%rax),%rcx
  4056a3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4056a7:	48 89 d0             	mov    %rdx,%rax
  4056aa:	48 01 c0             	add    %rax,%rax
  4056ad:	48 01 d0             	add    %rdx,%rax
  4056b0:	48 c1 e0 03          	shl    $0x3,%rax
  4056b4:	48 01 c8             	add    %rcx,%rax
  4056b7:	5d                   	pop    %rbp
  4056b8:	c3                   	retq   
  4056b9:	90                   	nop

00000000004056ba <_ZNSt6vectorISt5tupleIIdddEESaIS1_EE6resizeEm>:
       *  number of elements.  If the number is smaller than the
       *  %vector's current size the %vector is truncated, otherwise
       *  default constructed elements are appended.
       */
      void
      resize(size_type __new_size)
  4056ba:	55                   	push   %rbp
  4056bb:	48 89 e5             	mov    %rsp,%rbp
  4056be:	48 83 ec 10          	sub    $0x10,%rsp
  4056c2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4056c6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      {
	if (__new_size > size())
  4056ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4056ce:	48 89 c7             	mov    %rax,%rdi
  4056d1:	e8 10 14 00 00       	callq  406ae6 <_ZNKSt6vectorISt5tupleIIdddEESaIS1_EE4sizeEv>
  4056d6:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  4056da:	0f 92 c0             	setb   %al
  4056dd:	84 c0                	test   %al,%al
  4056df:	74 24                	je     405705 <_ZNSt6vectorISt5tupleIIdddEESaIS1_EE6resizeEm+0x4b>
	  _M_default_append(__new_size - size());
  4056e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4056e5:	48 89 c7             	mov    %rax,%rdi
  4056e8:	e8 f9 13 00 00       	callq  406ae6 <_ZNKSt6vectorISt5tupleIIdddEESaIS1_EE4sizeEv>
  4056ed:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4056f1:	48 29 c2             	sub    %rax,%rdx
  4056f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4056f8:	48 89 d6             	mov    %rdx,%rsi
  4056fb:	48 89 c7             	mov    %rax,%rdi
  4056fe:	e8 1b 14 00 00       	callq  406b1e <_ZNSt6vectorISt5tupleIIdddEESaIS1_EE17_M_default_appendEm>
  405703:	eb 42                	jmp    405747 <_ZNSt6vectorISt5tupleIIdddEESaIS1_EE6resizeEm+0x8d>
	else if (__new_size < size())
  405705:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405709:	48 89 c7             	mov    %rax,%rdi
  40570c:	e8 d5 13 00 00       	callq  406ae6 <_ZNKSt6vectorISt5tupleIIdddEESaIS1_EE4sizeEv>
  405711:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  405715:	0f 97 c0             	seta   %al
  405718:	84 c0                	test   %al,%al
  40571a:	74 2b                	je     405747 <_ZNSt6vectorISt5tupleIIdddEESaIS1_EE6resizeEm+0x8d>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
  40571c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405720:	48 8b 08             	mov    (%rax),%rcx
  405723:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  405727:	48 89 d0             	mov    %rdx,%rax
  40572a:	48 01 c0             	add    %rax,%rax
  40572d:	48 01 d0             	add    %rdx,%rax
  405730:	48 c1 e0 03          	shl    $0x3,%rax
  405734:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  405738:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40573c:	48 89 d6             	mov    %rdx,%rsi
  40573f:	48 89 c7             	mov    %rax,%rdi
  405742:	e8 33 16 00 00       	callq  406d7a <_ZNSt6vectorISt5tupleIIdddEESaIS1_EE15_M_erase_at_endEPS1_>
      }
  405747:	c9                   	leaveq 
  405748:	c3                   	retq   
  405749:	90                   	nop

000000000040574a <_ZNSt6vectorImSaImEEC1Ev>:
      // [23.2.4.1] construct/copy/destroy
      // (assign() and get_allocator() are also listed in this section)
      /**
       *  @brief  Default constructor creates no elements.
       */
      vector()
  40574a:	55                   	push   %rbp
  40574b:	48 89 e5             	mov    %rsp,%rbp
  40574e:	48 83 ec 10          	sub    $0x10,%rsp
  405752:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Base() { }
  405756:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40575a:	48 89 c7             	mov    %rax,%rdi
  40575d:	e8 76 16 00 00       	callq  406dd8 <_ZNSt12_Vector_baseImSaImEEC1Ev>
  405762:	c9                   	leaveq 
  405763:	c3                   	retq   

0000000000405764 <_ZNSt6vectorImSaImEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
  405764:	55                   	push   %rbp
  405765:	48 89 e5             	mov    %rsp,%rbp
  405768:	48 83 ec 10          	sub    $0x10,%rsp
  40576c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator()); }
  405770:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405774:	48 89 c7             	mov    %rax,%rdi
  405777:	e8 c6 16 00 00       	callq  406e42 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
  40577c:	48 89 c2             	mov    %rax,%rdx
  40577f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405783:	48 8b 48 08          	mov    0x8(%rax),%rcx
  405787:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40578b:	48 8b 00             	mov    (%rax),%rax
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  40578e:	48 89 ce             	mov    %rcx,%rsi
  405791:	48 89 c7             	mov    %rax,%rdi
  405794:	e8 b7 16 00 00       	callq  406e50 <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>
		      _M_get_Tp_allocator()); }
  405799:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40579d:	48 89 c7             	mov    %rax,%rdi
  4057a0:	e8 4d 16 00 00       	callq  406df2 <_ZNSt12_Vector_baseImSaImEED1Ev>
  4057a5:	c9                   	leaveq 
  4057a6:	c3                   	retq   
  4057a7:	90                   	nop

00000000004057a8 <_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv>:
	   _UIntType __b, size_t __t, _UIntType __c, size_t __l,
	   _UIntType __f>
    typename
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
			    __s, __b, __t, __c, __l, __f>::result_type
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
  4057a8:	55                   	push   %rbp
  4057a9:	48 89 e5             	mov    %rsp,%rbp
  4057ac:	48 83 ec 20          	sub    $0x20,%rsp
  4057b0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
			    __s, __b, __t, __c, __l, __f>::
    operator()()
    {
      // Reload the vector - cost is O(n) amortized over n calls.
      if (_M_p >= state_size)
  4057b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4057b8:	48 8b 80 80 13 00 00 	mov    0x1380(%rax),%rax
  4057bf:	48 3d 6f 02 00 00    	cmp    $0x26f,%rax
  4057c5:	76 0c                	jbe    4057d3 <_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv+0x2b>
	_M_gen_rand();
  4057c7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4057cb:	48 89 c7             	mov    %rax,%rdi
  4057ce:	e8 a7 16 00 00       	callq  406e7a <_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE11_M_gen_randEv>

      // Calculate o(x(i)).
      result_type __z = _M_x[_M_p++];
  4057d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4057d7:	48 8b 80 80 13 00 00 	mov    0x1380(%rax),%rax
  4057de:	48 8d 48 01          	lea    0x1(%rax),%rcx
  4057e2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4057e6:	48 89 8a 80 13 00 00 	mov    %rcx,0x1380(%rdx)
  4057ed:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4057f1:	48 8b 04 c2          	mov    (%rdx,%rax,8),%rax
  4057f5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      __z ^= (__z >> __u) & __d;
  4057f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4057fd:	48 c1 e8 0b          	shr    $0xb,%rax
  405801:	89 c0                	mov    %eax,%eax
  405803:	48 31 45 f8          	xor    %rax,-0x8(%rbp)
      __z ^= (__z << __s) & __b;
  405807:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40580b:	48 c1 e0 07          	shl    $0x7,%rax
  40580f:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
  405814:	48 31 45 f8          	xor    %rax,-0x8(%rbp)
      __z ^= (__z << __t) & __c;
  405818:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40581c:	48 c1 e0 0f          	shl    $0xf,%rax
  405820:	25 00 00 c6 ef       	and    $0xefc60000,%eax
  405825:	48 31 45 f8          	xor    %rax,-0x8(%rbp)
      __z ^= (__z >> __l);
  405829:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40582d:	48 c1 e8 12          	shr    $0x12,%rax
  405831:	48 31 45 f8          	xor    %rax,-0x8(%rbp)

      return __z;
  405835:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  405839:	c9                   	leaveq 
  40583a:	c3                   	retq   

000000000040583b <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
  40583b:	55                   	push   %rbp
  40583c:	48 89 e5             	mov    %rsp,%rbp
  40583f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  405843:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405847:	5d                   	pop    %rbp
  405848:	c3                   	retq   
  405849:	90                   	nop

000000000040584a <_ZNSt6vectorImSaImEE9push_backEOm>:
#endif
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
  40584a:	55                   	push   %rbp
  40584b:	48 89 e5             	mov    %rsp,%rbp
  40584e:	48 83 ec 10          	sub    $0x10,%rsp
  405852:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405856:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { emplace_back(std::move(__x)); }
  40585a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40585e:	48 89 c7             	mov    %rax,%rdi
  405861:	e8 d5 ff ff ff       	callq  40583b <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
  405866:	48 89 c2             	mov    %rax,%rdx
  405869:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40586d:	48 89 d6             	mov    %rdx,%rsi
  405870:	48 89 c7             	mov    %rax,%rdi
  405873:	e8 c6 17 00 00       	callq  40703e <_ZNSt6vectorImSaImEE12emplace_backIImEEEvDpOT_>
  405878:	c9                   	leaveq 
  405879:	c3                   	retq   

000000000040587a <_ZSt3refIN7barrier35centralized_sense_reversing_barrierEESt17reference_wrapperIT_ERS3_>:


  /// Denotes a reference should be taken to a variable.
  template<typename _Tp>
    inline reference_wrapper<_Tp>
    ref(_Tp& __t) noexcept
  40587a:	55                   	push   %rbp
  40587b:	48 89 e5             	mov    %rsp,%rbp
  40587e:	48 83 ec 10          	sub    $0x10,%rsp
  405882:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405886:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return reference_wrapper<_Tp>(__t); }
  40588a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40588e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405892:	48 89 d6             	mov    %rdx,%rsi
  405895:	48 89 c7             	mov    %rax,%rdi
  405898:	e8 95 18 00 00       	callq  407132 <_ZNSt17reference_wrapperIN7barrier35centralized_sense_reversing_barrierEEC1ERS1_>
  40589d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4058a1:	c9                   	leaveq 
  4058a2:	c3                   	retq   
  4058a3:	90                   	nop

00000000004058a4 <_ZNSt6vectorImSaImEEixEm>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n)
  4058a4:	55                   	push   %rbp
  4058a5:	48 89 e5             	mov    %rsp,%rbp
  4058a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4058ac:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return *(this->_M_impl._M_start + __n); }
  4058b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4058b4:	48 8b 00             	mov    (%rax),%rax
  4058b7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4058bb:	48 c1 e2 03          	shl    $0x3,%rdx
  4058bf:	48 01 d0             	add    %rdx,%rax
  4058c2:	5d                   	pop    %rbp
  4058c3:	c3                   	retq   

00000000004058c4 <_ZSt3refISt6atomicIbEESt17reference_wrapperIT_ERS3_>:


  /// Denotes a reference should be taken to a variable.
  template<typename _Tp>
    inline reference_wrapper<_Tp>
    ref(_Tp& __t) noexcept
  4058c4:	55                   	push   %rbp
  4058c5:	48 89 e5             	mov    %rsp,%rbp
  4058c8:	48 83 ec 10          	sub    $0x10,%rsp
  4058cc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4058d0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return reference_wrapper<_Tp>(__t); }
  4058d4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4058d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4058dc:	48 89 d6             	mov    %rdx,%rsi
  4058df:	48 89 c7             	mov    %rax,%rdi
  4058e2:	e8 1b 19 00 00       	callq  407202 <_ZNSt17reference_wrapperISt6atomicIbEEC1ERS1_>
  4058e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4058eb:	c9                   	leaveq 
  4058ec:	c3                   	retq   

00000000004058ed <_ZSt7forwardISt17reference_wrapperIN7barrier35centralized_sense_reversing_barrierEEEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  4058ed:	55                   	push   %rbp
  4058ee:	48 89 e5             	mov    %rsp,%rbp
  4058f1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  4058f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4058f9:	5d                   	pop    %rbp
  4058fa:	c3                   	retq   

00000000004058fb <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  4058fb:	55                   	push   %rbp
  4058fc:	48 89 e5             	mov    %rsp,%rbp
  4058ff:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  405903:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405907:	5d                   	pop    %rbp
  405908:	c3                   	retq   

0000000000405909 <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  405909:	55                   	push   %rbp
  40590a:	48 89 e5             	mov    %rsp,%rbp
  40590d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  405911:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405915:	5d                   	pop    %rbp
  405916:	c3                   	retq   

0000000000405917 <_ZSt7forwardISt17reference_wrapperISt6atomicIbEEEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  405917:	55                   	push   %rbp
  405918:	48 89 e5             	mov    %rsp,%rbp
  40591b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  40591f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405923:	5d                   	pop    %rbp
  405924:	c3                   	retq   
  405925:	90                   	nop

0000000000405926 <_ZNSt6vectorISt5tupleIIdddEESaIS1_EEixEm>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n)
  405926:	55                   	push   %rbp
  405927:	48 89 e5             	mov    %rsp,%rbp
  40592a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40592e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return *(this->_M_impl._M_start + __n); }
  405932:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405936:	48 8b 08             	mov    (%rax),%rcx
  405939:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40593d:	48 89 d0             	mov    %rdx,%rax
  405940:	48 01 c0             	add    %rax,%rax
  405943:	48 01 d0             	add    %rdx,%rax
  405946:	48 c1 e0 03          	shl    $0x3,%rax
  40594a:	48 01 c8             	add    %rcx,%rax
  40594d:	5d                   	pop    %rbp
  40594e:	c3                   	retq   

000000000040594f <_ZSt4moveIRSt5tupleIIdddEEEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
  40594f:	55                   	push   %rbp
  405950:	48 89 e5             	mov    %rsp,%rbp
  405953:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  405957:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40595b:	5d                   	pop    %rbp
  40595c:	c3                   	retq   
  40595d:	90                   	nop

000000000040595e <_ZNSt5tupleIIdddEEaSEOS0_>:
	static_cast<_Inherited&>(*this) = __in;
	return *this;
      }

      tuple&
      operator=(tuple&& __in)
  40595e:	55                   	push   %rbp
  40595f:	48 89 e5             	mov    %rsp,%rbp
  405962:	48 83 ec 10          	sub    $0x10,%rsp
  405966:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40596a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      noexcept(is_nothrow_move_assignable<_Inherited>::value)
      {
	static_cast<_Inherited&>(*this) = std::move(__in);
  40596e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405972:	48 89 c7             	mov    %rax,%rdi
  405975:	e8 d5 ff ff ff       	callq  40594f <_ZSt4moveIRSt5tupleIIdddEEEONSt16remove_referenceIT_E4typeEOS4_>
  40597a:	48 89 c2             	mov    %rax,%rdx
  40597d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405981:	48 89 d6             	mov    %rdx,%rsi
  405984:	48 89 c7             	mov    %rax,%rdi
  405987:	e8 1a 1c 00 00       	callq  4075a6 <_ZNSt11_Tuple_implILm0EIdddEEaSEOS0_>
	return *this;
  40598c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  405990:	c9                   	leaveq 
  405991:	c3                   	retq   

0000000000405992 <_ZNSt6vectorISt5tupleIIdddEESaIS1_EE5beginEv>:
       *  Returns a read/write iterator that points to the first
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
  405992:	55                   	push   %rbp
  405993:	48 89 e5             	mov    %rsp,%rbp
  405996:	48 83 ec 20          	sub    $0x20,%rsp
  40599a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
  40599e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4059a2:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  4059a6:	48 89 d6             	mov    %rdx,%rsi
  4059a9:	48 89 c7             	mov    %rax,%rdi
  4059ac:	e8 69 1c 00 00       	callq  40761a <_ZN9__gnu_cxx17__normal_iteratorIPSt5tupleIIdddEESt6vectorIS2_SaIS2_EEEC1ERKS3_>
  4059b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4059b5:	c9                   	leaveq 
  4059b6:	c3                   	retq   
  4059b7:	90                   	nop

00000000004059b8 <_ZNSt6vectorISt5tupleIIdddEESaIS1_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
  4059b8:	55                   	push   %rbp
  4059b9:	48 89 e5             	mov    %rsp,%rbp
  4059bc:	48 83 ec 20          	sub    $0x20,%rsp
  4059c0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
  4059c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4059c8:	48 8d 50 08          	lea    0x8(%rax),%rdx
  4059cc:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  4059d0:	48 89 d6             	mov    %rdx,%rsi
  4059d3:	48 89 c7             	mov    %rax,%rdi
  4059d6:	e8 3f 1c 00 00       	callq  40761a <_ZN9__gnu_cxx17__normal_iteratorIPSt5tupleIIdddEESt6vectorIS2_SaIS2_EEEC1ERKS3_>
  4059db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4059df:	c9                   	leaveq 
  4059e0:	c3                   	retq   

00000000004059e1 <_ZN9__gnu_cxxneIPSt5tupleIIdddEESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
	       const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
  4059e1:	55                   	push   %rbp
  4059e2:	48 89 e5             	mov    %rsp,%rbp
  4059e5:	53                   	push   %rbx
  4059e6:	48 83 ec 18          	sub    $0x18,%rsp
  4059ea:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4059ee:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() != __rhs.base(); }
  4059f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4059f6:	48 89 c7             	mov    %rax,%rdi
  4059f9:	e8 38 1c 00 00       	callq  407636 <_ZNK9__gnu_cxx17__normal_iteratorIPSt5tupleIIdddEESt6vectorIS2_SaIS2_EEE4baseEv>
  4059fe:	48 8b 18             	mov    (%rax),%rbx
  405a01:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405a05:	48 89 c7             	mov    %rax,%rdi
  405a08:	e8 29 1c 00 00       	callq  407636 <_ZNK9__gnu_cxx17__normal_iteratorIPSt5tupleIIdddEESt6vectorIS2_SaIS2_EEE4baseEv>
  405a0d:	48 8b 00             	mov    (%rax),%rax
  405a10:	48 39 c3             	cmp    %rax,%rbx
  405a13:	0f 95 c0             	setne  %al
  405a16:	48 83 c4 18          	add    $0x18,%rsp
  405a1a:	5b                   	pop    %rbx
  405a1b:	5d                   	pop    %rbp
  405a1c:	c3                   	retq   
  405a1d:	90                   	nop

0000000000405a1e <_ZN9__gnu_cxx17__normal_iteratorIPSt5tupleIIdddEESt6vectorIS2_SaIS2_EEEppEv>:
      pointer
      operator->() const
      { return _M_current; }

      __normal_iterator&
      operator++()
  405a1e:	55                   	push   %rbp
  405a1f:	48 89 e5             	mov    %rsp,%rbp
  405a22:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	++_M_current;
  405a26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405a2a:	48 8b 00             	mov    (%rax),%rax
  405a2d:	48 8d 50 18          	lea    0x18(%rax),%rdx
  405a31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405a35:	48 89 10             	mov    %rdx,(%rax)
	return *this;
  405a38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  405a3c:	5d                   	pop    %rbp
  405a3d:	c3                   	retq   

0000000000405a3e <_ZNK9__gnu_cxx17__normal_iteratorIPSt5tupleIIdddEESt6vectorIS2_SaIS2_EEEdeEv>:
		      _Container>::__type>& __i)
        : _M_current(__i.base()) { }

      // Forward iterator requirements
      reference
      operator*() const
  405a3e:	55                   	push   %rbp
  405a3f:	48 89 e5             	mov    %rsp,%rbp
  405a42:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
  405a46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405a4a:	48 8b 00             	mov    (%rax),%rax
  405a4d:	5d                   	pop    %rbp
  405a4e:	c3                   	retq   
  405a4f:	90                   	nop

0000000000405a50 <_ZNSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EEC1ERKS5_>:
       *  The newly-created %vector uses a copy of the allocation
       *  object used by @a __x.  All the elements of @a __x are copied,
       *  but any extra memory in
       *  @a __x (for fast expansion) will not be copied.
       */
      vector(const vector& __x)
  405a50:	55                   	push   %rbp
  405a51:	48 89 e5             	mov    %rsp,%rbp
  405a54:	41 55                	push   %r13
  405a56:	41 54                	push   %r12
  405a58:	53                   	push   %rbx
  405a59:	48 83 ec 28          	sub    $0x28,%rsp
  405a5d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  405a61:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      : _Base(__x.size(),
        _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
  405a65:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  405a69:	48 89 c7             	mov    %rax,%rdi
  405a6c:	e8 fd 1b 00 00       	callq  40766e <_ZNKSt12_Vector_baseISt6vectorISt5tupleIIdddEESaIS2_EESaIS4_EE19_M_get_Tp_allocatorEv>
  405a71:	48 89 c2             	mov    %rax,%rdx
  405a74:	48 8d 45 df          	lea    -0x21(%rbp),%rax
  405a78:	48 89 d6             	mov    %rdx,%rsi
  405a7b:	48 89 c7             	mov    %rax,%rdi
  405a7e:	e8 c1 1b 00 00       	callq  407644 <_ZN9__gnu_cxx14__alloc_traitsISaISt6vectorISt5tupleIIdddEESaIS3_EEEE17_S_select_on_copyERKS6_>
  405a83:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  405a87:	48 89 c7             	mov    %rax,%rdi
  405a8a:	e8 c9 fb ff ff       	callq  405658 <_ZNKSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EE4sizeEv>
  405a8f:	48 89 c1             	mov    %rax,%rcx
  405a92:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  405a96:	48 8d 55 df          	lea    -0x21(%rbp),%rdx
  405a9a:	48 89 ce             	mov    %rcx,%rsi
  405a9d:	48 89 c7             	mov    %rax,%rdi
  405aa0:	e8 f1 1b 00 00       	callq  407696 <_ZNSt12_Vector_baseISt6vectorISt5tupleIIdddEESaIS2_EESaIS4_EEC1EmRKS5_>
  405aa5:	48 8d 45 df          	lea    -0x21(%rbp),%rax
  405aa9:	48 89 c7             	mov    %rax,%rdi
  405aac:	e8 cb 1b 00 00       	callq  40767c <_ZNSaISt6vectorISt5tupleIIdddEESaIS1_EEED1Ev>
      { this->_M_impl._M_finish =
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
				      this->_M_impl._M_start,
				      _M_get_Tp_allocator());
  405ab1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  405ab5:	48 89 c7             	mov    %rax,%rdi
  405ab8:	e8 51 0d 00 00       	callq  40680e <_ZNSt12_Vector_baseISt6vectorISt5tupleIIdddEESaIS2_EESaIS4_EE19_M_get_Tp_allocatorEv>
  405abd:	49 89 c5             	mov    %rax,%r13
  405ac0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  405ac4:	4c 8b 20             	mov    (%rax),%r12
  405ac7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  405acb:	48 89 c7             	mov    %rax,%rdi
  405ace:	e8 51 1c 00 00       	callq  407724 <_ZNKSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EE3endEv>
  405ad3:	48 89 c3             	mov    %rax,%rbx
  405ad6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  405ada:	48 89 c7             	mov    %rax,%rdi
  405add:	e8 12 1c 00 00       	callq  4076f4 <_ZNKSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EE5beginEv>
  405ae2:	4c 89 e9             	mov    %r13,%rcx
  405ae5:	4c 89 e2             	mov    %r12,%rdx
  405ae8:	48 89 de             	mov    %rbx,%rsi
  405aeb:	48 89 c7             	mov    %rax,%rdi
  405aee:	e8 62 1c 00 00       	callq  407755 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt6vectorISt5tupleIIdddEESaIS4_EES2_IS6_SaIS6_EEEEPS6_S6_ET0_T_SE_SD_RSaIT1_E>
       *  @a __x (for fast expansion) will not be copied.
       */
      vector(const vector& __x)
      : _Base(__x.size(),
        _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
      { this->_M_impl._M_finish =
  405af3:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  405af7:	48 89 42 08          	mov    %rax,0x8(%rdx)
  405afb:	eb 34                	jmp    405b31 <_ZNSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EEC1ERKS5_+0xe1>
  405afd:	48 89 c3             	mov    %rax,%rbx
       *  but any extra memory in
       *  @a __x (for fast expansion) will not be copied.
       */
      vector(const vector& __x)
      : _Base(__x.size(),
        _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
  405b00:	48 8d 45 df          	lea    -0x21(%rbp),%rax
  405b04:	48 89 c7             	mov    %rax,%rdi
  405b07:	e8 70 1b 00 00       	callq  40767c <_ZNSaISt6vectorISt5tupleIIdddEESaIS1_EEED1Ev>
  405b0c:	48 89 d8             	mov    %rbx,%rax
  405b0f:	48 89 c7             	mov    %rax,%rdi
  405b12:	e8 09 be ff ff       	callq  401920 <_Unwind_Resume@plt>
  405b17:	48 89 c3             	mov    %rax,%rbx
  405b1a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  405b1e:	48 89 c7             	mov    %rax,%rdi
  405b21:	e8 88 0c 00 00       	callq  4067ae <_ZNSt12_Vector_baseISt6vectorISt5tupleIIdddEESaIS2_EESaIS4_EED1Ev>
  405b26:	48 89 d8             	mov    %rbx,%rax
  405b29:	48 89 c7             	mov    %rax,%rdi
  405b2c:	e8 ef bd ff ff       	callq  401920 <_Unwind_Resume@plt>
      { this->_M_impl._M_finish =
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
				      this->_M_impl._M_start,
				      _M_get_Tp_allocator());
      }
  405b31:	48 83 c4 28          	add    $0x28,%rsp
  405b35:	5b                   	pop    %rbx
  405b36:	41 5c                	pop    %r12
  405b38:	41 5d                	pop    %r13
  405b3a:	5d                   	pop    %rbp
  405b3b:	c3                   	retq   

0000000000405b3c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv>:
  
      void
      _M_add_ref_lock();
      
      void
      _M_release() noexcept
  405b3c:	55                   	push   %rbp
  405b3d:	48 89 e5             	mov    %rsp,%rbp
  405b40:	48 83 ec 10          	sub    $0x10,%rsp
  405b44:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        // Be race-detector-friendly.  For more info see bits/c++config.
        _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&_M_use_count);
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
  405b48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405b4c:	48 83 c0 08          	add    $0x8,%rax
  405b50:	be ff ff ff ff       	mov    $0xffffffff,%esi
  405b55:	48 89 c7             	mov    %rax,%rdi
  405b58:	e8 c4 c2 ff ff       	callq  401e21 <_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii>
  405b5d:	83 f8 01             	cmp    $0x1,%eax
  405b60:	0f 94 c0             	sete   %al
  405b63:	84 c0                	test   %al,%al
  405b65:	74 4d                	je     405bb4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv+0x78>
	  {
            _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&_M_use_count);
	    _M_dispose();
  405b67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405b6b:	48 8b 00             	mov    (%rax),%rax
  405b6e:	48 83 c0 10          	add    $0x10,%rax
  405b72:	48 8b 00             	mov    (%rax),%rax
  405b75:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  405b79:	48 89 d7             	mov    %rdx,%rdi
  405b7c:	ff d0                	callq  *%rax
	      }

            // Be race-detector-friendly.  For more info see bits/c++config.
            _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&_M_weak_count);
	    if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
						       -1) == 1)
  405b7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405b82:	48 83 c0 0c          	add    $0xc,%rax
  405b86:	be ff ff ff ff       	mov    $0xffffffff,%esi
  405b8b:	48 89 c7             	mov    %rax,%rdi
  405b8e:	e8 8e c2 ff ff       	callq  401e21 <_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii>
	        _GLIBCXX_WRITE_MEM_BARRIER;
	      }

            // Be race-detector-friendly.  For more info see bits/c++config.
            _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&_M_weak_count);
	    if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
  405b93:	83 f8 01             	cmp    $0x1,%eax
  405b96:	0f 94 c0             	sete   %al
  405b99:	84 c0                	test   %al,%al
  405b9b:	74 17                	je     405bb4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv+0x78>
						       -1) == 1)
              {
                _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&_M_weak_count);
	        _M_destroy();
  405b9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405ba1:	48 8b 00             	mov    (%rax),%rax
  405ba4:	48 83 c0 18          	add    $0x18,%rax
  405ba8:	48 8b 00             	mov    (%rax),%rax
  405bab:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  405baf:	48 89 d7             	mov    %rdx,%rdi
  405bb2:	ff d0                	callq  *%rax
              }
	  }
      }
  405bb4:	c9                   	leaveq 
  405bb5:	c3                   	retq   

0000000000405bb6 <_ZSt12__niter_baseIPmENSt11_Niter_baseIT_E13iterator_typeES2_>:
    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Niter_base<_Iterator>::iterator_type
    __niter_base(_Iterator __it)
  405bb6:	55                   	push   %rbp
  405bb7:	48 89 e5             	mov    %rsp,%rbp
  405bba:	48 83 ec 10          	sub    $0x10,%rsp
  405bbe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::_Niter_base<_Iterator>::_S_base(__it); }
  405bc2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405bc6:	48 89 c7             	mov    %rax,%rdi
  405bc9:	e8 e4 1b 00 00       	callq  4077b2 <_ZNSt10_Iter_baseIPmLb0EE7_S_baseES0_>
  405bce:	c9                   	leaveq 
  405bcf:	c3                   	retq   

0000000000405bd0 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implD1Ev>:
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
        rebind<_Tp>::other _Tp_alloc_type;
      typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
       	pointer;

      struct _Vector_impl 
  405bd0:	55                   	push   %rbp
  405bd1:	48 89 e5             	mov    %rsp,%rbp
  405bd4:	48 83 ec 10          	sub    $0x10,%rsp
  405bd8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405bdc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405be0:	48 89 c7             	mov    %rax,%rdi
  405be3:	e8 16 1c 00 00       	callq  4077fe <_ZNSaIdED1Ev>
  405be8:	c9                   	leaveq 
  405be9:	c3                   	retq   

0000000000405bea <_ZNSt12_Vector_baseIdSaIdEEC1Ev>:

      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

      _Vector_base()
  405bea:	55                   	push   %rbp
  405beb:	48 89 e5             	mov    %rsp,%rbp
  405bee:	48 83 ec 10          	sub    $0x10,%rsp
  405bf2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_impl() { }
  405bf6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405bfa:	48 89 c7             	mov    %rax,%rdi
  405bfd:	e8 be 1b 00 00       	callq  4077c0 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1Ev>
  405c02:	c9                   	leaveq 
  405c03:	c3                   	retq   

0000000000405c04 <_ZNSt12_Vector_baseIdSaIdEED1Ev>:
	    _M_create_storage(__n);
	  }
      }
#endif

      ~_Vector_base()
  405c04:	55                   	push   %rbp
  405c05:	48 89 e5             	mov    %rsp,%rbp
  405c08:	48 83 ec 10          	sub    $0x10,%rsp
  405c0c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start); }
  405c10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405c14:	48 8b 40 10          	mov    0x10(%rax),%rax
  405c18:	48 89 c2             	mov    %rax,%rdx
  405c1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405c1f:	48 8b 00             	mov    (%rax),%rax
  405c22:	48 29 c2             	sub    %rax,%rdx
  405c25:	48 89 d0             	mov    %rdx,%rax
  405c28:	48 c1 f8 03          	sar    $0x3,%rax
  405c2c:	48 89 c2             	mov    %rax,%rdx
  405c2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405c33:	48 8b 08             	mov    (%rax),%rcx
	  }
      }
#endif

      ~_Vector_base()
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
  405c36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405c3a:	48 89 ce             	mov    %rcx,%rsi
  405c3d:	48 89 c7             	mov    %rax,%rdi
  405c40:	e8 4d 01 00 00       	callq  405d92 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdm>
		      - this->_M_impl._M_start); }
  405c45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405c49:	48 89 c7             	mov    %rax,%rdi
  405c4c:	e8 7f ff ff ff       	callq  405bd0 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implD1Ev>
  405c51:	c9                   	leaveq 
  405c52:	c3                   	retq   
  405c53:	90                   	nop

0000000000405c54 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>:
      
    public:
      typedef _Alloc allocator_type;

      _Tp_alloc_type&
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
  405c54:	55                   	push   %rbp
  405c55:	48 89 e5             	mov    %rsp,%rbp
  405c58:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
  405c5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405c60:	5d                   	pop    %rbp
  405c61:	c3                   	retq   

0000000000405c62 <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
  405c62:	55                   	push   %rbp
  405c63:	48 89 e5             	mov    %rsp,%rbp
  405c66:	48 83 ec 20          	sub    $0x20,%rsp
  405c6a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405c6e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405c72:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
  405c76:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  405c7a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405c7e:	48 89 d6             	mov    %rdx,%rsi
  405c81:	48 89 c7             	mov    %rax,%rdi
  405c84:	e8 8f 1b 00 00       	callq  407818 <_ZSt8_DestroyIPdEvT_S1_>
    }
  405c89:	c9                   	leaveq 
  405c8a:	c3                   	retq   
  405c8b:	90                   	nop

0000000000405c8c <_ZNKSt6vectorIdSaIdEE8max_sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }

      /**  Returns the size() of the largest possible %vector.  */
      size_type
      max_size() const _GLIBCXX_NOEXCEPT
  405c8c:	55                   	push   %rbp
  405c8d:	48 89 e5             	mov    %rsp,%rbp
  405c90:	48 83 ec 10          	sub    $0x10,%rsp
  405c94:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
  405c98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405c9c:	48 89 c7             	mov    %rax,%rdi
  405c9f:	e8 b4 1b 00 00       	callq  407858 <_ZNKSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
  405ca4:	48 89 c7             	mov    %rax,%rdi
  405ca7:	e8 91 1b 00 00       	callq  40783d <_ZNSt16allocator_traitsISaIdEE8max_sizeERKS0_>
  405cac:	c9                   	leaveq 
  405cad:	c3                   	retq   

0000000000405cae <_ZNKSt6vectorIdSaIdEE8capacityEv>:
      /**
       *  Returns the total number of elements that the %vector can
       *  hold before needing to allocate more memory.
       */
      size_type
      capacity() const _GLIBCXX_NOEXCEPT
  405cae:	55                   	push   %rbp
  405caf:	48 89 e5             	mov    %rsp,%rbp
  405cb2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_end_of_storage
			 - this->_M_impl._M_start); }
  405cb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405cba:	48 8b 40 10          	mov    0x10(%rax),%rax
  405cbe:	48 89 c2             	mov    %rax,%rdx
  405cc1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405cc5:	48 8b 00             	mov    (%rax),%rax
  405cc8:	48 29 c2             	sub    %rax,%rdx
  405ccb:	48 89 d0             	mov    %rdx,%rax
  405cce:	48 c1 f8 03          	sar    $0x3,%rax
  405cd2:	5d                   	pop    %rbp
  405cd3:	c3                   	retq   

0000000000405cd4 <_ZSt32__make_move_if_noexcept_iteratorIPdSt13move_iteratorIS0_EET0_T_>:
  template<typename _Iterator, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond
      <typename iterator_traits<_Iterator>::value_type>::value,
                _Iterator, move_iterator<_Iterator>>::type>
    inline _ReturnType
    __make_move_if_noexcept_iterator(_Iterator __i)
  405cd4:	55                   	push   %rbp
  405cd5:	48 89 e5             	mov    %rsp,%rbp
  405cd8:	48 83 ec 20          	sub    $0x20,%rsp
  405cdc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return _ReturnType(__i); }
  405ce0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  405ce4:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  405ce8:	48 89 d6             	mov    %rdx,%rsi
  405ceb:	48 89 c7             	mov    %rax,%rdi
  405cee:	e8 73 1b 00 00       	callq  407866 <_ZNSt13move_iteratorIPdEC1ES0_>
  405cf3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405cf7:	c9                   	leaveq 
  405cf8:	c3                   	retq   
  405cf9:	90                   	nop

0000000000405cfa <_ZNSt6vectorIdSaIdEE20_M_allocate_and_copyISt13move_iteratorIPdEEES4_mT_S6_>:
       *  Memory expansion handler.  Uses the member allocation function to
       *  obtain @a n bytes of memory, and then copies [first,last) into it.
       */
      template<typename _ForwardIterator>
        pointer
        _M_allocate_and_copy(size_type __n,
  405cfa:	55                   	push   %rbp
  405cfb:	48 89 e5             	mov    %rsp,%rbp
  405cfe:	53                   	push   %rbx
  405cff:	48 83 ec 48          	sub    $0x48,%rsp
  405d03:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  405d07:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  405d0b:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  405d0f:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
			     _ForwardIterator __first, _ForwardIterator __last)
        {
	  pointer __result = this->_M_allocate(__n);
  405d13:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405d17:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  405d1b:	48 89 d6             	mov    %rdx,%rsi
  405d1e:	48 89 c7             	mov    %rax,%rdi
  405d21:	e8 5a 1b 00 00       	callq  407880 <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEm>
  405d26:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __try
	    {
	      std::__uninitialized_copy_a(__first, __last, __result,
					  _M_get_Tp_allocator());
  405d2a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405d2e:	48 89 c7             	mov    %rax,%rdi
  405d31:	e8 1e ff ff ff       	callq  405c54 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
  405d36:	48 89 c1             	mov    %rax,%rcx
			     _ForwardIterator __first, _ForwardIterator __last)
        {
	  pointer __result = this->_M_allocate(__n);
	  __try
	    {
	      std::__uninitialized_copy_a(__first, __last, __result,
  405d39:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  405d3d:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  405d41:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  405d45:	48 89 c7             	mov    %rax,%rdi
  405d48:	e8 6b 1b 00 00       	callq  4078b8 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPdES1_dET0_T_S4_S3_RSaIT1_E>
					  _M_get_Tp_allocator());
	      return __result;
  405d4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405d51:	eb 37                	jmp    405d8a <_ZNSt6vectorIdSaIdEE20_M_allocate_and_copyISt13move_iteratorIPdEEES4_mT_S6_+0x90>
  405d53:	48 89 c3             	mov    %rax,%rbx
	    }
	  __catch(...)
  405d56:	e8 35 bb ff ff       	callq  401890 <__cxa_end_catch@plt>
  405d5b:	48 89 d8             	mov    %rbx,%rax
  405d5e:	48 89 c7             	mov    %rax,%rdi
  405d61:	e8 ba bb ff ff       	callq  401920 <_Unwind_Resume@plt>
  405d66:	48 89 c7             	mov    %rax,%rdi
  405d69:	e8 62 bb ff ff       	callq  4018d0 <__cxa_begin_catch@plt>
	    {
	      _M_deallocate(__result, __n);
  405d6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405d72:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  405d76:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  405d7a:	48 89 ce             	mov    %rcx,%rsi
  405d7d:	48 89 c7             	mov    %rax,%rdi
  405d80:	e8 0d 00 00 00       	callq  405d92 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdm>
	      __throw_exception_again;
  405d85:	e8 f6 b8 ff ff       	callq  401680 <__cxa_rethrow@plt>
	    }
	}
  405d8a:	48 83 c4 48          	add    $0x48,%rsp
  405d8e:	5b                   	pop    %rbx
  405d8f:	5d                   	pop    %rbp
  405d90:	c3                   	retq   
  405d91:	90                   	nop

0000000000405d92 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdm>:
      pointer
      _M_allocate(size_t __n)
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }

      void
      _M_deallocate(pointer __p, size_t __n)
  405d92:	55                   	push   %rbp
  405d93:	48 89 e5             	mov    %rsp,%rbp
  405d96:	48 83 ec 20          	sub    $0x20,%rsp
  405d9a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405d9e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405da2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      {
	if (__p)
  405da6:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  405dab:	74 17                	je     405dc4 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdm+0x32>
	  _M_impl.deallocate(__p, __n);
  405dad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405db1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  405db5:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  405db9:	48 89 ce             	mov    %rcx,%rsi
  405dbc:	48 89 c7             	mov    %rax,%rdi
  405dbf:	e8 26 1b 00 00       	callq  4078ea <_ZN9__gnu_cxx13new_allocatorIdE10deallocateEPdm>
      }
  405dc4:	c9                   	leaveq 
  405dc5:	c3                   	retq   

0000000000405dc6 <_ZNSt16allocator_traitsISaIdEE9constructIdIRKdEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS0_PT_DpOS5_>:
       *  if that expression is well-formed, otherwise uses placement-new
       *  to construct an object of type @a _Tp at location @a __p from the
       *  arguments @a __args...
      */
      template<typename _Tp, typename... _Args>
	static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
  405dc6:	55                   	push   %rbp
  405dc7:	48 89 e5             	mov    %rsp,%rbp
  405dca:	48 83 ec 20          	sub    $0x20,%rsp
  405dce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405dd2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405dd6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	-> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
  405dda:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405dde:	48 89 c7             	mov    %rax,%rdi
  405de1:	e8 36 f3 ff ff       	callq  40511c <_ZSt7forwardIRKdEOT_RNSt16remove_referenceIS2_E4typeE>
  405de6:	48 89 c2             	mov    %rax,%rdx
  405de9:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  405ded:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405df1:	48 89 ce             	mov    %rcx,%rsi
  405df4:	48 89 c7             	mov    %rax,%rdi
  405df7:	e8 10 1b 00 00       	callq  40790c <_ZNSt16allocator_traitsISaIdEE12_S_constructIdIRKdEEENSt9enable_ifIXsrNS1_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS0_PS7_DpOS8_>
  405dfc:	c9                   	leaveq 
  405dfd:	c3                   	retq   

0000000000405dfe <_ZNSt6vectorIdSaIdEE19_M_emplace_back_auxIIRKdEEEvDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
  405dfe:	55                   	push   %rbp
  405dff:	48 89 e5             	mov    %rsp,%rbp
  405e02:	53                   	push   %rbx
  405e03:	48 83 ec 38          	sub    $0x38,%rsp
  405e07:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  405e0b:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      _M_emplace_back_aux(_Args&&... __args)
      {
	const size_type __len =
	  _M_check_len(size_type(1), "vector::_M_emplace_back_aux");
  405e0f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  405e13:	ba a0 be 40 00       	mov    $0x40bea0,%edx
  405e18:	be 01 00 00 00       	mov    $0x1,%esi
  405e1d:	48 89 c7             	mov    %rax,%rdi
  405e20:	e8 1f 1b 00 00       	callq  407944 <_ZNKSt6vectorIdSaIdEE12_M_check_lenEmPKc>
  405e25:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	pointer __new_start(this->_M_allocate(__len));
  405e29:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  405e2d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  405e31:	48 89 d6             	mov    %rdx,%rsi
  405e34:	48 89 c7             	mov    %rax,%rdi
  405e37:	e8 44 1a 00 00       	callq  407880 <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEm>
  405e3c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	pointer __new_finish(__new_start);
  405e40:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405e44:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	__try
	  {
	    _Alloc_traits::construct(this->_M_impl, __new_start + size(),
				     std::forward<_Args>(__args)...);
  405e48:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  405e4c:	48 89 c7             	mov    %rax,%rdi
  405e4f:	e8 c8 f2 ff ff       	callq  40511c <_ZSt7forwardIRKdEOT_RNSt16remove_referenceIS2_E4typeE>
  405e54:	48 89 c3             	mov    %rax,%rbx
	  _M_check_len(size_type(1), "vector::_M_emplace_back_aux");
	pointer __new_start(this->_M_allocate(__len));
	pointer __new_finish(__new_start);
	__try
	  {
	    _Alloc_traits::construct(this->_M_impl, __new_start + size(),
  405e57:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  405e5b:	48 89 c7             	mov    %rax,%rdi
  405e5e:	e8 33 f3 ff ff       	callq  405196 <_ZNKSt6vectorIdSaIdEE4sizeEv>
				     std::forward<_Args>(__args)...);
  405e63:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  405e6a:	00 
  405e6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405e6f:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  405e73:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
	  _M_check_len(size_type(1), "vector::_M_emplace_back_aux");
	pointer __new_start(this->_M_allocate(__len));
	pointer __new_finish(__new_start);
	__try
	  {
	    _Alloc_traits::construct(this->_M_impl, __new_start + size(),
  405e77:	48 89 da             	mov    %rbx,%rdx
  405e7a:	48 89 ce             	mov    %rcx,%rsi
  405e7d:	48 89 c7             	mov    %rax,%rdi
  405e80:	e8 41 ff ff ff       	callq  405dc6 <_ZNSt16allocator_traitsISaIdEE9constructIdIRKdEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS0_PT_DpOS5_>
				     std::forward<_Args>(__args)...);
	    __new_finish = 0;
  405e85:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  405e8c:	00 

	    __new_finish
	      = std::__uninitialized_move_if_noexcept_a
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
	       __new_start, _M_get_Tp_allocator());
  405e8d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  405e91:	48 89 c7             	mov    %rax,%rdi
  405e94:	e8 bb fd ff ff       	callq  405c54 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
  405e99:	48 89 c1             	mov    %rax,%rcx
  405e9c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  405ea0:	48 8b 70 08          	mov    0x8(%rax),%rsi
  405ea4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  405ea8:	48 8b 00             	mov    (%rax),%rax
	  {
	    _Alloc_traits::construct(this->_M_impl, __new_start + size(),
				     std::forward<_Args>(__args)...);
	    __new_finish = 0;

	    __new_finish
  405eab:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  405eaf:	48 89 c7             	mov    %rax,%rdi
  405eb2:	e8 56 1b 00 00       	callq  407a0d <_ZSt34__uninitialized_move_if_noexcept_aIPdS0_SaIdEET0_T_S3_S2_RT1_>
  405eb7:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	      = std::__uninitialized_move_if_noexcept_a
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
	       __new_start, _M_get_Tp_allocator());

	    ++__new_finish;
  405ebb:	48 83 45 d8 08       	addq   $0x8,-0x28(%rbp)
	      std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	    _M_deallocate(__new_start, __len);
	    __throw_exception_again;
	  }
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
  405ec0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  405ec4:	48 89 c7             	mov    %rax,%rdi
  405ec7:	e8 88 fd ff ff       	callq  405c54 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
  405ecc:	48 89 c2             	mov    %rax,%rdx
  405ecf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  405ed3:	48 8b 48 08          	mov    0x8(%rax),%rcx
  405ed7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  405edb:	48 8b 00             	mov    (%rax),%rax
	    else
	      std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	    _M_deallocate(__new_start, __len);
	    __throw_exception_again;
	  }
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  405ede:	48 89 ce             	mov    %rcx,%rsi
  405ee1:	48 89 c7             	mov    %rax,%rdi
  405ee4:	e8 79 fd ff ff       	callq  405c62 <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
  405ee9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  405eed:	48 8b 40 10          	mov    0x10(%rax),%rax
  405ef1:	48 89 c2             	mov    %rax,%rdx
  405ef4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  405ef8:	48 8b 00             	mov    (%rax),%rax
  405efb:	48 29 c2             	sub    %rax,%rdx
  405efe:	48 89 d0             	mov    %rdx,%rax
  405f01:	48 c1 f8 03          	sar    $0x3,%rax
  405f05:	48 89 c2             	mov    %rax,%rdx
  405f08:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  405f0c:	48 8b 08             	mov    (%rax),%rcx
  405f0f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
	    _M_deallocate(__new_start, __len);
	    __throw_exception_again;
	  }
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
  405f13:	48 89 ce             	mov    %rcx,%rsi
  405f16:	48 89 c7             	mov    %rax,%rdi
  405f19:	e8 74 fe ff ff       	callq  405d92 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdm>
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
  405f1e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  405f22:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  405f26:	48 89 10             	mov    %rdx,(%rax)
	this->_M_impl._M_finish = __new_finish;
  405f29:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  405f2d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  405f31:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_impl._M_end_of_storage = __new_start + __len;
  405f35:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405f39:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  405f40:	00 
  405f41:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405f45:	48 01 c2             	add    %rax,%rdx
  405f48:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  405f4c:	48 89 50 10          	mov    %rdx,0x10(%rax)
  405f50:	e9 8c 00 00 00       	jmpq   405fe1 <_ZNSt6vectorIdSaIdEE19_M_emplace_back_auxIIRKdEEEvDpOT_+0x1e3>
  405f55:	48 89 c3             	mov    %rax,%rbx
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
	       __new_start, _M_get_Tp_allocator());

	    ++__new_finish;
	  }
	__catch(...)
  405f58:	e8 33 b9 ff ff       	callq  401890 <__cxa_end_catch@plt>
  405f5d:	48 89 d8             	mov    %rbx,%rax
  405f60:	48 89 c7             	mov    %rax,%rdi
  405f63:	e8 b8 b9 ff ff       	callq  401920 <_Unwind_Resume@plt>
  405f68:	48 89 c7             	mov    %rax,%rdi
  405f6b:	e8 60 b9 ff ff       	callq  4018d0 <__cxa_begin_catch@plt>
	  {
	    if (!__new_finish)
  405f70:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  405f75:	75 2c                	jne    405fa3 <_ZNSt6vectorIdSaIdEE19_M_emplace_back_auxIIRKdEEEvDpOT_+0x1a5>
	      _Alloc_traits::destroy(this->_M_impl, __new_start + size());
  405f77:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  405f7b:	48 89 c7             	mov    %rax,%rdi
  405f7e:	e8 13 f2 ff ff       	callq  405196 <_ZNKSt6vectorIdSaIdEE4sizeEv>
  405f83:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  405f8a:	00 
  405f8b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405f8f:	48 01 c2             	add    %rax,%rdx
  405f92:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  405f96:	48 89 d6             	mov    %rdx,%rsi
  405f99:	48 89 c7             	mov    %rax,%rdi
  405f9c:	e8 ba 1a 00 00       	callq  407a5b <_ZNSt16allocator_traitsISaIdEE7destroyIdEEvRS0_PT_>
  405fa1:	eb 22                	jmp    405fc5 <_ZNSt6vectorIdSaIdEE19_M_emplace_back_auxIIRKdEEEvDpOT_+0x1c7>
	    else
	      std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
  405fa3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  405fa7:	48 89 c7             	mov    %rax,%rdi
  405faa:	e8 a5 fc ff ff       	callq  405c54 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
  405faf:	48 89 c2             	mov    %rax,%rdx
  405fb2:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  405fb6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405fba:	48 89 ce             	mov    %rcx,%rsi
  405fbd:	48 89 c7             	mov    %rax,%rdi
  405fc0:	e8 9d fc ff ff       	callq  405c62 <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>
	    _M_deallocate(__new_start, __len);
  405fc5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  405fc9:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  405fcd:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  405fd1:	48 89 ce             	mov    %rcx,%rsi
  405fd4:	48 89 c7             	mov    %rax,%rdi
  405fd7:	e8 b6 fd ff ff       	callq  405d92 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdm>
	    __throw_exception_again;
  405fdc:	e8 9f b6 ff ff       	callq  401680 <__cxa_rethrow@plt>
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
	this->_M_impl._M_finish = __new_finish;
	this->_M_impl._M_end_of_storage = __new_start + __len;
      }
  405fe1:	48 83 c4 38          	add    $0x38,%rsp
  405fe5:	5b                   	pop    %rbx
  405fe6:	5d                   	pop    %rbp
  405fe7:	c3                   	retq   

0000000000405fe8 <_ZNSt12_Vector_baseISt6threadSaIS0_EE12_Vector_implD1Ev>:
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
        rebind<_Tp>::other _Tp_alloc_type;
      typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
       	pointer;

      struct _Vector_impl 
  405fe8:	55                   	push   %rbp
  405fe9:	48 89 e5             	mov    %rsp,%rbp
  405fec:	48 83 ec 10          	sub    $0x10,%rsp
  405ff0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405ff4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405ff8:	48 89 c7             	mov    %rax,%rdi
  405ffb:	e8 be 1a 00 00       	callq  407abe <_ZNSaISt6threadED1Ev>
  406000:	c9                   	leaveq 
  406001:	c3                   	retq   

0000000000406002 <_ZNSt12_Vector_baseISt6threadSaIS0_EEC1Ev>:

      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

      _Vector_base()
  406002:	55                   	push   %rbp
  406003:	48 89 e5             	mov    %rsp,%rbp
  406006:	48 83 ec 10          	sub    $0x10,%rsp
  40600a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_impl() { }
  40600e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406012:	48 89 c7             	mov    %rax,%rdi
  406015:	e8 66 1a 00 00       	callq  407a80 <_ZNSt12_Vector_baseISt6threadSaIS0_EE12_Vector_implC1Ev>
  40601a:	c9                   	leaveq 
  40601b:	c3                   	retq   

000000000040601c <_ZNSt12_Vector_baseISt6threadSaIS0_EED1Ev>:
	    _M_create_storage(__n);
	  }
      }
#endif

      ~_Vector_base()
  40601c:	55                   	push   %rbp
  40601d:	48 89 e5             	mov    %rsp,%rbp
  406020:	48 83 ec 10          	sub    $0x10,%rsp
  406024:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start); }
  406028:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40602c:	48 8b 40 10          	mov    0x10(%rax),%rax
  406030:	48 89 c2             	mov    %rax,%rdx
  406033:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406037:	48 8b 00             	mov    (%rax),%rax
  40603a:	48 29 c2             	sub    %rax,%rdx
  40603d:	48 89 d0             	mov    %rdx,%rax
  406040:	48 c1 f8 03          	sar    $0x3,%rax
  406044:	48 89 c2             	mov    %rax,%rdx
  406047:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40604b:	48 8b 08             	mov    (%rax),%rcx
	  }
      }
#endif

      ~_Vector_base()
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
  40604e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406052:	48 89 ce             	mov    %rcx,%rsi
  406055:	48 89 c7             	mov    %rax,%rdi
  406058:	e8 7b 1a 00 00       	callq  407ad8 <_ZNSt12_Vector_baseISt6threadSaIS0_EE13_M_deallocateEPS0_m>
		      - this->_M_impl._M_start); }
  40605d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406061:	48 89 c7             	mov    %rax,%rdi
  406064:	e8 7f ff ff ff       	callq  405fe8 <_ZNSt12_Vector_baseISt6threadSaIS0_EE12_Vector_implD1Ev>
  406069:	c9                   	leaveq 
  40606a:	c3                   	retq   
  40606b:	90                   	nop

000000000040606c <_ZNSt12_Vector_baseISt6threadSaIS0_EE19_M_get_Tp_allocatorEv>:
      
    public:
      typedef _Alloc allocator_type;

      _Tp_alloc_type&
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
  40606c:	55                   	push   %rbp
  40606d:	48 89 e5             	mov    %rsp,%rbp
  406070:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
  406074:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406078:	5d                   	pop    %rbp
  406079:	c3                   	retq   

000000000040607a <_ZSt8_DestroyIPSt6threadS0_EvT_S2_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
  40607a:	55                   	push   %rbp
  40607b:	48 89 e5             	mov    %rsp,%rbp
  40607e:	48 83 ec 20          	sub    $0x20,%rsp
  406082:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406086:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40608a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
  40608e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  406092:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406096:	48 89 d6             	mov    %rdx,%rsi
  406099:	48 89 c7             	mov    %rax,%rdi
  40609c:	e8 6b 1a 00 00       	callq  407b0c <_ZSt8_DestroyIPSt6threadEvT_S2_>
    }
  4060a1:	c9                   	leaveq 
  4060a2:	c3                   	retq   

00000000004060a3 <_ZNSt11_Tuple_implILm1EIjEE7_M_tailERS0_>:

      static constexpr const _Head&
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr _Inherited&
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
  4060a3:	55                   	push   %rbp
  4060a4:	48 89 e5             	mov    %rsp,%rbp
  4060a7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4060ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4060af:	5d                   	pop    %rbp
  4060b0:	c3                   	retq   

00000000004060b1 <_ZSt4moveIRSt11_Tuple_implILm2EIEEEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
  4060b1:	55                   	push   %rbp
  4060b2:	48 89 e5             	mov    %rsp,%rbp
  4060b5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  4060b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4060bd:	5d                   	pop    %rbp
  4060be:	c3                   	retq   

00000000004060bf <_ZNSt10_Head_baseILm1EjLb0EE7_M_headERS0_>:
      template<typename _Alloc, typename _UHead>
	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
  4060bf:	55                   	push   %rbp
  4060c0:	48 89 e5             	mov    %rsp,%rbp
  4060c3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4060c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4060cb:	5d                   	pop    %rbp
  4060cc:	c3                   	retq   

00000000004060cd <_ZNSt11_Tuple_implILm1EIjEE7_M_headERS0_>:

      typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
      typedef _Head_base<_Idx, _Head, __empty_not_final<_Head>::value> _Base;

      static constexpr _Head&  
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
  4060cd:	55                   	push   %rbp
  4060ce:	48 89 e5             	mov    %rsp,%rbp
  4060d1:	48 83 ec 10          	sub    $0x10,%rsp
  4060d5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4060d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4060dd:	48 89 c7             	mov    %rax,%rdi
  4060e0:	e8 da ff ff ff       	callq  4060bf <_ZNSt10_Head_baseILm1EjLb0EE7_M_headERS0_>
  4060e5:	c9                   	leaveq 
  4060e6:	c3                   	retq   

00000000004060e7 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  4060e7:	55                   	push   %rbp
  4060e8:	48 89 e5             	mov    %rsp,%rbp
  4060eb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  4060ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4060f3:	5d                   	pop    %rbp
  4060f4:	c3                   	retq   
  4060f5:	90                   	nop

00000000004060f6 <_ZNSt10_Head_baseILm1EjLb0EEC1IjvEEOT_>:
      : _M_head_impl(__h) { }

      template<typename _UHead, typename = typename
	       enable_if<!is_convertible<_UHead,
	                                 __uses_alloc_base>::value>::type>
        constexpr _Head_base(_UHead&& __h)
  4060f6:	55                   	push   %rbp
  4060f7:	48 89 e5             	mov    %rsp,%rbp
  4060fa:	48 83 ec 10          	sub    $0x10,%rsp
  4060fe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406102:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
  406106:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40610a:	48 89 c7             	mov    %rax,%rdi
  40610d:	e8 d5 ff ff ff       	callq  4060e7 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
  406112:	8b 10                	mov    (%rax),%edx
  406114:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406118:	89 10                	mov    %edx,(%rax)
  40611a:	c9                   	leaveq 
  40611b:	c3                   	retq   

000000000040611c <_ZNSt11_Tuple_implILm1EIjEEC1EOS0_>:
	  _Base(std::forward<_UHead>(__head)) { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;

      constexpr
      _Tuple_impl(_Tuple_impl&& __in)
  40611c:	55                   	push   %rbp
  40611d:	48 89 e5             	mov    %rsp,%rbp
  406120:	48 83 ec 10          	sub    $0x10,%rsp
  406124:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406128:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      noexcept(__and_<is_nothrow_move_constructible<_Head>,
	              is_nothrow_move_constructible<_Inherited>>::value)
      : _Inherited(std::move(_M_tail(__in))), 
  40612c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406130:	48 89 c7             	mov    %rax,%rdi
  406133:	e8 6b ff ff ff       	callq  4060a3 <_ZNSt11_Tuple_implILm1EIjEE7_M_tailERS0_>
  406138:	48 89 c7             	mov    %rax,%rdi
  40613b:	e8 71 ff ff ff       	callq  4060b1 <_ZSt4moveIRSt11_Tuple_implILm2EIEEEONSt16remove_referenceIT_E4typeEOS4_>
	_Base(std::forward<_Head>(_M_head(__in))) { }
  406140:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406144:	48 89 c7             	mov    %rax,%rdi
  406147:	e8 81 ff ff ff       	callq  4060cd <_ZNSt11_Tuple_implILm1EIjEE7_M_headERS0_>
  40614c:	48 89 c7             	mov    %rax,%rdi
  40614f:	e8 93 ff ff ff       	callq  4060e7 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
  406154:	48 89 c2             	mov    %rax,%rdx
  406157:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40615b:	48 89 d6             	mov    %rdx,%rsi
  40615e:	48 89 c7             	mov    %rax,%rdi
  406161:	e8 90 ff ff ff       	callq  4060f6 <_ZNSt10_Head_baseILm1EjLb0EEC1IjvEEOT_>
  406166:	c9                   	leaveq 
  406167:	c3                   	retq   

0000000000406168 <_ZNSt11_Tuple_implILm0EIN7barrier8internal11cache_wiperEjEE7_M_tailERS3_>:

      static constexpr const _Head&
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr _Inherited&
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
  406168:	55                   	push   %rbp
  406169:	48 89 e5             	mov    %rsp,%rbp
  40616c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406170:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406174:	5d                   	pop    %rbp
  406175:	c3                   	retq   

0000000000406176 <_ZSt4moveIRSt11_Tuple_implILm1EIjEEEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
  406176:	55                   	push   %rbp
  406177:	48 89 e5             	mov    %rsp,%rbp
  40617a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  40617e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406182:	5d                   	pop    %rbp
  406183:	c3                   	retq   

0000000000406184 <_ZNSt10_Head_baseILm0EN7barrier8internal11cache_wiperELb1EE7_M_headERS3_>:
      template<typename _Alloc, typename _UHead>
	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
	: _Head(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b; }
  406184:	55                   	push   %rbp
  406185:	48 89 e5             	mov    %rsp,%rbp
  406188:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40618c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406190:	5d                   	pop    %rbp
  406191:	c3                   	retq   

0000000000406192 <_ZNSt11_Tuple_implILm0EIN7barrier8internal11cache_wiperEjEE7_M_headERS3_>:

      typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
      typedef _Head_base<_Idx, _Head, __empty_not_final<_Head>::value> _Base;

      static constexpr _Head&  
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
  406192:	55                   	push   %rbp
  406193:	48 89 e5             	mov    %rsp,%rbp
  406196:	48 83 ec 10          	sub    $0x10,%rsp
  40619a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40619e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4061a2:	48 89 c7             	mov    %rax,%rdi
  4061a5:	e8 da ff ff ff       	callq  406184 <_ZNSt10_Head_baseILm0EN7barrier8internal11cache_wiperELb1EE7_M_headERS3_>
  4061aa:	c9                   	leaveq 
  4061ab:	c3                   	retq   

00000000004061ac <_ZNSt10_Head_baseILm0EN7barrier8internal11cache_wiperELb1EEC1IS2_vEEOT_>:
      : _Head(__h) { }

      template<typename _UHead, typename = typename
	       enable_if<!is_convertible<_UHead,
	                                 __uses_alloc_base>::value>::type>
        constexpr _Head_base(_UHead&& __h)
  4061ac:	55                   	push   %rbp
  4061ad:	48 89 e5             	mov    %rsp,%rbp
  4061b0:	48 83 ec 10          	sub    $0x10,%rsp
  4061b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4061b8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Head(std::forward<_UHead>(__h)) { }
  4061bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4061c0:	48 89 c7             	mov    %rax,%rdi
  4061c3:	e8 71 f0 ff ff       	callq  405239 <_ZSt7forwardIN7barrier8internal11cache_wiperEEOT_RNSt16remove_referenceIS3_E4typeE>
  4061c8:	c9                   	leaveq 
  4061c9:	c3                   	retq   

00000000004061ca <_ZNSt11_Tuple_implILm0EIN7barrier8internal11cache_wiperEjEEC1EOS3_>:
	  _Base(std::forward<_UHead>(__head)) { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;

      constexpr
      _Tuple_impl(_Tuple_impl&& __in)
  4061ca:	55                   	push   %rbp
  4061cb:	48 89 e5             	mov    %rsp,%rbp
  4061ce:	48 83 ec 10          	sub    $0x10,%rsp
  4061d2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4061d6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      noexcept(__and_<is_nothrow_move_constructible<_Head>,
	              is_nothrow_move_constructible<_Inherited>>::value)
      : _Inherited(std::move(_M_tail(__in))), 
  4061da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4061de:	48 89 c7             	mov    %rax,%rdi
  4061e1:	e8 82 ff ff ff       	callq  406168 <_ZNSt11_Tuple_implILm0EIN7barrier8internal11cache_wiperEjEE7_M_tailERS3_>
  4061e6:	48 89 c7             	mov    %rax,%rdi
  4061e9:	e8 88 ff ff ff       	callq  406176 <_ZSt4moveIRSt11_Tuple_implILm1EIjEEEONSt16remove_referenceIT_E4typeEOS4_>
  4061ee:	48 89 c2             	mov    %rax,%rdx
	_Base(std::forward<_Head>(_M_head(__in))) { }
  4061f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4061f5:	48 89 d6             	mov    %rdx,%rsi
  4061f8:	48 89 c7             	mov    %rax,%rdi
  4061fb:	e8 1c ff ff ff       	callq  40611c <_ZNSt11_Tuple_implILm1EIjEEC1EOS0_>
  406200:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406204:	48 89 c7             	mov    %rax,%rdi
  406207:	e8 86 ff ff ff       	callq  406192 <_ZNSt11_Tuple_implILm0EIN7barrier8internal11cache_wiperEjEE7_M_headERS3_>
  40620c:	48 89 c7             	mov    %rax,%rdi
  40620f:	e8 25 f0 ff ff       	callq  405239 <_ZSt7forwardIN7barrier8internal11cache_wiperEEOT_RNSt16remove_referenceIS3_E4typeE>
  406214:	48 89 c2             	mov    %rax,%rdx
  406217:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40621b:	48 89 d6             	mov    %rdx,%rsi
  40621e:	48 89 c7             	mov    %rax,%rdi
  406221:	e8 86 ff ff ff       	callq  4061ac <_ZNSt10_Head_baseILm0EN7barrier8internal11cache_wiperELb1EEC1IS2_vEEOT_>
  406226:	c9                   	leaveq 
  406227:	c3                   	retq   

0000000000406228 <_ZNSt5tupleIIN7barrier8internal11cache_wiperEjEEC1EOS3_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
  406228:	55                   	push   %rbp
  406229:	48 89 e5             	mov    %rsp,%rbp
  40622c:	48 83 ec 10          	sub    $0x10,%rsp
  406230:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406234:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406238:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40623c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406240:	48 89 d6             	mov    %rdx,%rsi
  406243:	48 89 c7             	mov    %rax,%rdi
  406246:	e8 7f ff ff ff       	callq  4061ca <_ZNSt11_Tuple_implILm0EIN7barrier8internal11cache_wiperEjEEC1EOS3_>
  40624b:	c9                   	leaveq 
  40624c:	c3                   	retq   
  40624d:	90                   	nop

000000000040624e <_ZNSt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEC1EOS4_>:
        _Bind_simple(_Callable&& __callable, _Args2&&... __args)
        : _M_bound(std::move(__callable), std::forward<_Args2>(__args)...)
        { }

      _Bind_simple(const _Bind_simple&) = default;
      _Bind_simple(_Bind_simple&&) = default;
  40624e:	55                   	push   %rbp
  40624f:	48 89 e5             	mov    %rsp,%rbp
  406252:	48 83 ec 10          	sub    $0x10,%rsp
  406256:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40625a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40625e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  406262:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406266:	48 89 d6             	mov    %rdx,%rsi
  406269:	48 89 c7             	mov    %rax,%rdi
  40626c:	e8 b7 ff ff ff       	callq  406228 <_ZNSt5tupleIIN7barrier8internal11cache_wiperEjEEC1EOS3_>
  406271:	c9                   	leaveq 
  406272:	c3                   	retq   

0000000000406273 <_ZSt13__bind_simpleIN7barrier8internal11cache_wiperEIRjEENSt19_Bind_simple_helperIT_IDpT0_EE6__typeEOS5_DpOS6_>:

  // Simplified version of std::bind for internal use, without support for
  // unbound arguments, placeholders or nested bind expressions.
  template<typename _Callable, typename... _Args>
    typename _Bind_simple_helper<_Callable, _Args...>::__type
    __bind_simple(_Callable&& __callable, _Args&&... __args)
  406273:	55                   	push   %rbp
  406274:	48 89 e5             	mov    %rsp,%rbp
  406277:	53                   	push   %rbx
  406278:	48 83 ec 28          	sub    $0x28,%rsp
  40627c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  406280:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  406284:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      typedef _Bind_simple_helper<_Callable, _Args...> __helper_type;
      typedef typename __helper_type::__maybe_type __maybe_type;
      typedef typename __helper_type::__type __result_type;
      return __result_type(
          __maybe_type::__do_wrap( std::forward<_Callable>(__callable)),
          std::forward<_Args>(__args)...);
  406288:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40628c:	48 89 c7             	mov    %rax,%rdi
  40628f:	e8 b3 ef ff ff       	callq  405247 <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
  406294:	48 89 c3             	mov    %rax,%rbx
    {
      typedef _Bind_simple_helper<_Callable, _Args...> __helper_type;
      typedef typename __helper_type::__maybe_type __maybe_type;
      typedef typename __helper_type::__type __result_type;
      return __result_type(
          __maybe_type::__do_wrap( std::forward<_Callable>(__callable)),
  406297:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40629b:	48 89 c7             	mov    %rax,%rdi
  40629e:	e8 96 ef ff ff       	callq  405239 <_ZSt7forwardIN7barrier8internal11cache_wiperEEOT_RNSt16remove_referenceIS3_E4typeE>
  4062a3:	48 89 c7             	mov    %rax,%rdi
  4062a6:	e8 86 18 00 00       	callq  407b31 <_ZNSt26_Maybe_wrap_member_pointerIN7barrier8internal11cache_wiperEE9__do_wrapEOS2_>
  4062ab:	48 89 c1             	mov    %rax,%rcx
          std::forward<_Args>(__args)...);
  4062ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4062b2:	48 89 da             	mov    %rbx,%rdx
  4062b5:	48 89 ce             	mov    %rcx,%rsi
  4062b8:	48 89 c7             	mov    %rax,%rdi
  4062bb:	e8 98 19 00 00       	callq  407c58 <_ZNSt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEC1IIRjEvEEOS2_DpOT_>
    }
  4062c0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4062c4:	48 83 c4 28          	add    $0x28,%rsp
  4062c8:	5b                   	pop    %rbx
  4062c9:	5d                   	pop    %rbp
  4062ca:	c3                   	retq   

00000000004062cb <_ZSt7forwardISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEOT_RNSt16remove_referenceIS6_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  4062cb:	55                   	push   %rbp
  4062cc:	48 89 e5             	mov    %rsp,%rbp
  4062cf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  4062d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4062d7:	5d                   	pop    %rbp
  4062d8:	c3                   	retq   
  4062d9:	90                   	nop

00000000004062da <_ZNSt6thread15_M_make_routineISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESt10shared_ptrINS_5_ImplIT_EEEOS9_>:
    void
    _M_start_thread(__shared_base_type);

    template<typename _Callable>
      shared_ptr<_Impl<_Callable>>
      _M_make_routine(_Callable&& __f)
  4062da:	55                   	push   %rbp
  4062db:	48 89 e5             	mov    %rsp,%rbp
  4062de:	48 83 ec 20          	sub    $0x20,%rsp
  4062e2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4062e6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4062ea:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      {
	// Create and allocate full data structure, not base.
	return std::make_shared<_Impl<_Callable>>(std::forward<_Callable>(__f));
  4062ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4062f2:	48 89 c7             	mov    %rax,%rdi
  4062f5:	e8 d1 ff ff ff       	callq  4062cb <_ZSt7forwardISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEOT_RNSt16remove_referenceIS6_E4typeE>
  4062fa:	48 89 c2             	mov    %rax,%rdx
  4062fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406301:	48 89 d6             	mov    %rdx,%rsi
  406304:	48 89 c7             	mov    %rax,%rdi
  406307:	e8 98 19 00 00       	callq  407ca4 <_ZSt11make_sharedINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEIS7_EESt10shared_ptrIT_EDpOT0_>
      }
  40630c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406310:	c9                   	leaveq 
  406311:	c3                   	retq   

0000000000406312 <_ZSt4moveIRSt10shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEEEONSt16remove_referenceIT_E4typeEOSD_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
  406312:	55                   	push   %rbp
  406313:	48 89 e5             	mov    %rsp,%rbp
  406316:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  40631a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40631e:	5d                   	pop    %rbp
  40631f:	c3                   	retq   

0000000000406320 <_ZNSt10shared_ptrINSt6thread10_Impl_baseEEC1INS0_5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEvEEOS_IT_E>:
       *  @param  __r  A %shared_ptr rvalue.
       *  @post   *this contains the old value of @a __r, @a __r is empty.
       */
      template<typename _Tp1, typename = typename
	       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>
	shared_ptr(shared_ptr<_Tp1>&& __r) noexcept
  406320:	55                   	push   %rbp
  406321:	48 89 e5             	mov    %rsp,%rbp
  406324:	48 83 ec 10          	sub    $0x10,%rsp
  406328:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40632c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: __shared_ptr<_Tp>(std::move(__r)) { }
  406330:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406334:	48 89 c7             	mov    %rax,%rdi
  406337:	e8 d6 ff ff ff       	callq  406312 <_ZSt4moveIRSt10shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEEEONSt16remove_referenceIT_E4typeEOSD_>
  40633c:	48 89 c2             	mov    %rax,%rdx
  40633f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406343:	48 89 d6             	mov    %rdx,%rsi
  406346:	48 89 c7             	mov    %rax,%rdi
  406349:	e8 e2 19 00 00       	callq  407d30 <_ZNSt12__shared_ptrINSt6thread10_Impl_baseELN9__gnu_cxx12_Lock_policyE2EEC1INS0_5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEvEEOS_IT_LS3_2EE>
  40634e:	c9                   	leaveq 
  40634f:	c3                   	retq   

0000000000406350 <_ZSt7forwardISt6threadEOT_RNSt16remove_referenceIS1_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  406350:	55                   	push   %rbp
  406351:	48 89 e5             	mov    %rsp,%rbp
  406354:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  406358:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40635c:	5d                   	pop    %rbp
  40635d:	c3                   	retq   

000000000040635e <_ZNSt6vectorISt6threadSaIS0_EE12emplace_backIIS0_EEEvDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
  40635e:	55                   	push   %rbp
  40635f:	48 89 e5             	mov    %rsp,%rbp
  406362:	48 83 ec 10          	sub    $0x10,%rsp
  406366:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40636a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  40636e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406372:	48 8b 50 08          	mov    0x8(%rax),%rdx
  406376:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40637a:	48 8b 40 10          	mov    0x10(%rax),%rax
  40637e:	48 39 c2             	cmp    %rax,%rdx
  406381:	74 3c                	je     4063bf <_ZNSt6vectorISt6threadSaIS0_EE12emplace_backIIS0_EEEvDpOT_+0x61>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
				     std::forward<_Args>(__args)...);
  406383:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406387:	48 89 c7             	mov    %rax,%rdi
  40638a:	e8 c1 ff ff ff       	callq  406350 <_ZSt7forwardISt6threadEOT_RNSt16remove_referenceIS1_E4typeE>
  40638f:	48 89 c2             	mov    %rax,%rdx
  406392:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406396:	48 8b 48 08          	mov    0x8(%rax),%rcx
  40639a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      vector<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
  40639e:	48 89 ce             	mov    %rcx,%rsi
  4063a1:	48 89 c7             	mov    %rax,%rdi
  4063a4:	e8 dd 19 00 00       	callq  407d86 <_ZNSt16allocator_traitsISaISt6threadEE9constructIS0_IS0_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS1_PT_DpOS4_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
  4063a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4063ad:	48 8b 40 08          	mov    0x8(%rax),%rax
  4063b1:	48 8d 50 08          	lea    0x8(%rax),%rdx
  4063b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4063b9:	48 89 50 08          	mov    %rdx,0x8(%rax)
  4063bd:	eb 1e                	jmp    4063dd <_ZNSt6vectorISt6threadSaIS0_EE12emplace_backIIS0_EEEvDpOT_+0x7f>
	  }
	else
	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
  4063bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4063c3:	48 89 c7             	mov    %rax,%rdi
  4063c6:	e8 85 ff ff ff       	callq  406350 <_ZSt7forwardISt6threadEOT_RNSt16remove_referenceIS1_E4typeE>
  4063cb:	48 89 c2             	mov    %rax,%rdx
  4063ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4063d2:	48 89 d6             	mov    %rdx,%rsi
  4063d5:	48 89 c7             	mov    %rax,%rdi
  4063d8:	e8 e1 19 00 00       	callq  407dbe <_ZNSt6vectorISt6threadSaIS0_EE19_M_emplace_back_auxIIS0_EEEvDpOT_>
      }
  4063dd:	c9                   	leaveq 
  4063de:	c3                   	retq   
  4063df:	90                   	nop

00000000004063e0 <_ZN9__gnu_cxx17__normal_iteratorIPSt6threadSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      typedef typename __traits_type::pointer   	pointer;

      _GLIBCXX_CONSTEXPR __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
  4063e0:	55                   	push   %rbp
  4063e1:	48 89 e5             	mov    %rsp,%rbp
  4063e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4063e8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4063ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4063f0:	48 8b 10             	mov    (%rax),%rdx
  4063f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4063f7:	48 89 10             	mov    %rdx,(%rax)
  4063fa:	5d                   	pop    %rbp
  4063fb:	c3                   	retq   

00000000004063fc <_ZNSt14unary_functionIPSt6threadvEC1Ev>:
   */
  /**
   *  This is one of the @link functors functor base classes@endlink.
   */
  template<typename _Arg, typename _Result>
    struct unary_function
  4063fc:	55                   	push   %rbp
  4063fd:	48 89 e5             	mov    %rsp,%rbp
  406400:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406404:	5d                   	pop    %rbp
  406405:	c3                   	retq   

0000000000406406 <_ZNSt31_Maybe_unary_or_binary_functionIvIPSt6threadEEC1Ev>:
  template<typename _Res, typename... _ArgTypes>
    struct _Maybe_unary_or_binary_function { };

  /// Derives from @c unary_function, as appropriate.
  template<typename _Res, typename _T1>
    struct _Maybe_unary_or_binary_function<_Res, _T1>
  406406:	55                   	push   %rbp
  406407:	48 89 e5             	mov    %rsp,%rbp
  40640a:	48 83 ec 10          	sub    $0x10,%rsp
  40640e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406412:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406416:	48 89 c7             	mov    %rax,%rdi
  406419:	e8 de ff ff ff       	callq  4063fc <_ZNSt14unary_functionIPSt6threadvEC1Ev>
  40641e:	c9                   	leaveq 
  40641f:	c3                   	retq   

0000000000406420 <_ZNSt7_Mem_fnIMSt6threadFvvEEC1ES2_>:
		     _AllConvertible<_Pack<_Args...>, _Pack<_ArgTypes...>>>;

    public:
      typedef _Res result_type;

      explicit _Mem_fn(_Functor __pmf) : __pmf(__pmf) { }
  406420:	55                   	push   %rbp
  406421:	48 89 e5             	mov    %rsp,%rbp
  406424:	48 83 ec 20          	sub    $0x20,%rsp
  406428:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40642c:	48 89 f0             	mov    %rsi,%rax
  40642f:	48 89 d1             	mov    %rdx,%rcx
  406432:	48 89 ca             	mov    %rcx,%rdx
  406435:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  406439:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40643d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406441:	48 89 c7             	mov    %rax,%rdi
  406444:	e8 bd ff ff ff       	callq  406406 <_ZNSt31_Maybe_unary_or_binary_functionIvIPSt6threadEEC1Ev>
  406449:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  40644d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406451:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  406455:	48 89 01             	mov    %rax,(%rcx)
  406458:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  40645c:	c9                   	leaveq 
  40645d:	c3                   	retq   

000000000040645e <_ZN9__gnu_cxxneIPSt6threadSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
	       const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
  40645e:	55                   	push   %rbp
  40645f:	48 89 e5             	mov    %rsp,%rbp
  406462:	53                   	push   %rbx
  406463:	48 83 ec 18          	sub    $0x18,%rsp
  406467:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40646b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() != __rhs.base(); }
  40646f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406473:	48 89 c7             	mov    %rax,%rdi
  406476:	e8 2d 1b 00 00       	callq  407fa8 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6threadSt6vectorIS1_SaIS1_EEE4baseEv>
  40647b:	48 8b 18             	mov    (%rax),%rbx
  40647e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406482:	48 89 c7             	mov    %rax,%rdi
  406485:	e8 1e 1b 00 00       	callq  407fa8 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6threadSt6vectorIS1_SaIS1_EEE4baseEv>
  40648a:	48 8b 00             	mov    (%rax),%rax
  40648d:	48 39 c3             	cmp    %rax,%rbx
  406490:	0f 95 c0             	setne  %al
  406493:	48 83 c4 18          	add    $0x18,%rsp
  406497:	5b                   	pop    %rbx
  406498:	5d                   	pop    %rbp
  406499:	c3                   	retq   

000000000040649a <_ZN9__gnu_cxx17__normal_iteratorIPSt6threadSt6vectorIS1_SaIS1_EEEppEv>:
      pointer
      operator->() const
      { return _M_current; }

      __normal_iterator&
      operator++()
  40649a:	55                   	push   %rbp
  40649b:	48 89 e5             	mov    %rsp,%rbp
  40649e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	++_M_current;
  4064a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4064a6:	48 8b 00             	mov    (%rax),%rax
  4064a9:	48 8d 50 08          	lea    0x8(%rax),%rdx
  4064ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4064b1:	48 89 10             	mov    %rdx,(%rax)
	return *this;
  4064b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  4064b8:	5d                   	pop    %rbp
  4064b9:	c3                   	retq   

00000000004064ba <_ZNK9__gnu_cxx17__normal_iteratorIPSt6threadSt6vectorIS1_SaIS1_EEEdeEv>:
		      _Container>::__type>& __i)
        : _M_current(__i.base()) { }

      // Forward iterator requirements
      reference
      operator*() const
  4064ba:	55                   	push   %rbp
  4064bb:	48 89 e5             	mov    %rsp,%rbp
  4064be:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
  4064c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4064c6:	48 8b 00             	mov    (%rax),%rax
  4064c9:	5d                   	pop    %rbp
  4064ca:	c3                   	retq   
  4064cb:	90                   	nop

00000000004064cc <_ZNKSt7_Mem_fnIMSt6threadFvvEEclIIEvEEvRS0_DpOT_>:

      // Handle objects
      template<typename... _Args, typename _Req = _RequireValidArgs<_Args...>>
	_Res
	operator()(_Class& __object, _Args&&... __args) const
  4064cc:	55                   	push   %rbp
  4064cd:	48 89 e5             	mov    %rsp,%rbp
  4064d0:	48 83 ec 10          	sub    $0x10,%rsp
  4064d4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4064d8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return (__object.*__pmf)(std::forward<_Args>(__args)...); }
  4064dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4064e0:	48 8b 00             	mov    (%rax),%rax
  4064e3:	83 e0 01             	and    $0x1,%eax
  4064e6:	48 85 c0             	test   %rax,%rax
  4064e9:	75 09                	jne    4064f4 <_ZNKSt7_Mem_fnIMSt6threadFvvEEclIIEvEEvRS0_DpOT_+0x28>
  4064eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4064ef:	48 8b 00             	mov    (%rax),%rax
  4064f2:	eb 26                	jmp    40651a <_ZNKSt7_Mem_fnIMSt6threadFvvEEclIIEvEEvRS0_DpOT_+0x4e>
  4064f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4064f8:	48 8b 40 08          	mov    0x8(%rax),%rax
  4064fc:	48 89 c2             	mov    %rax,%rdx
  4064ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406503:	48 01 d0             	add    %rdx,%rax
  406506:	48 8b 10             	mov    (%rax),%rdx
  406509:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40650d:	48 8b 00             	mov    (%rax),%rax
  406510:	48 83 e8 01          	sub    $0x1,%rax
  406514:	48 01 d0             	add    %rdx,%rax
  406517:	48 8b 00             	mov    (%rax),%rax
  40651a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40651e:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  406522:	48 89 d1             	mov    %rdx,%rcx
  406525:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  406529:	48 01 ca             	add    %rcx,%rdx
  40652c:	48 89 d7             	mov    %rdx,%rdi
  40652f:	ff d0                	callq  *%rax
  406531:	c9                   	leaveq 
  406532:	c3                   	retq   
  406533:	90                   	nop

0000000000406534 <_ZNSt24uniform_int_distributionImE10param_typeC1Emm>:
      struct param_type
      {
	typedef uniform_int_distribution<_IntType> distribution_type;

	explicit
	param_type(_IntType __a = 0,
  406534:	55                   	push   %rbp
  406535:	48 89 e5             	mov    %rsp,%rbp
  406538:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40653c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406540:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
		   _IntType __b = std::numeric_limits<_IntType>::max())
	: _M_a(__a), _M_b(__b)
  406544:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406548:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40654c:	48 89 10             	mov    %rdx,(%rax)
  40654f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406553:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  406557:	48 89 50 08          	mov    %rdx,0x8(%rax)
	{
	  _GLIBCXX_DEBUG_ASSERT(_M_a <= _M_b);
	}
  40655b:	5d                   	pop    %rbp
  40655c:	c3                   	retq   
  40655d:	90                   	nop

000000000040655e <_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE4seedEm>:
	   size_t __w, size_t __n, size_t __m, size_t __r,
	   _UIntType __a, size_t __u, _UIntType __d, size_t __s,
	   _UIntType __b, size_t __t, _UIntType __c, size_t __l,
	   _UIntType __f>
    void
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
  40655e:	55                   	push   %rbp
  40655f:	48 89 e5             	mov    %rsp,%rbp
  406562:	48 83 ec 20          	sub    $0x20,%rsp
  406566:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40656a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
			    __s, __b, __t, __c, __l, __f>::
    seed(result_type __sd)
    {
      _M_x[0] = __detail::__mod<_UIntType,
	__detail::_Shift<_UIntType, __w>::__value>(__sd);
  40656e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406572:	48 89 c7             	mov    %rax,%rdi
  406575:	e8 3c 1a 00 00       	callq  407fb6 <_ZNSt8__detail5__modImLm4294967296ELm1ELm0EEET_S1_>
    void
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
			    __s, __b, __t, __c, __l, __f>::
    seed(result_type __sd)
    {
      _M_x[0] = __detail::__mod<_UIntType,
  40657a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40657e:	48 89 02             	mov    %rax,(%rdx)
	__detail::_Shift<_UIntType, __w>::__value>(__sd);

      for (size_t __i = 1; __i < state_size; ++__i)
  406581:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
  406588:	00 
  406589:	eb 5c                	jmp    4065e7 <_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE4seedEm+0x89>
	{
	  _UIntType __x = _M_x[__i - 1];
  40658b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40658f:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  406593:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406597:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  40659b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  __x ^= __x >> (__w - 2);
  40659f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4065a3:	48 c1 e8 1e          	shr    $0x1e,%rax
  4065a7:	48 31 45 f8          	xor    %rax,-0x8(%rbp)
	  __x *= __f;
  4065ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4065af:	48 69 c0 65 89 07 6c 	imul   $0x6c078965,%rax,%rax
  4065b6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  __x += __detail::__mod<_UIntType, __n>(__i);
  4065ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4065be:	48 89 c7             	mov    %rax,%rdi
  4065c1:	e8 0a 1a 00 00       	callq  407fd0 <_ZNSt8__detail5__modImLm624ELm1ELm0EEET_S1_>
  4065c6:	48 01 45 f8          	add    %rax,-0x8(%rbp)
	  _M_x[__i] = __detail::__mod<_UIntType,
	    __detail::_Shift<_UIntType, __w>::__value>(__x);
  4065ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4065ce:	48 89 c7             	mov    %rax,%rdi
  4065d1:	e8 e0 19 00 00       	callq  407fb6 <_ZNSt8__detail5__modImLm4294967296ELm1ELm0EEET_S1_>
	{
	  _UIntType __x = _M_x[__i - 1];
	  __x ^= __x >> (__w - 2);
	  __x *= __f;
	  __x += __detail::__mod<_UIntType, __n>(__i);
	  _M_x[__i] = __detail::__mod<_UIntType,
  4065d6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4065da:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4065de:	48 89 04 ca          	mov    %rax,(%rdx,%rcx,8)
    seed(result_type __sd)
    {
      _M_x[0] = __detail::__mod<_UIntType,
	__detail::_Shift<_UIntType, __w>::__value>(__sd);

      for (size_t __i = 1; __i < state_size; ++__i)
  4065e2:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  4065e7:	48 81 7d f0 6f 02 00 	cmpq   $0x26f,-0x10(%rbp)
  4065ee:	00 
  4065ef:	76 9a                	jbe    40658b <_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE4seedEm+0x2d>
	  __x *= __f;
	  __x += __detail::__mod<_UIntType, __n>(__i);
	  _M_x[__i] = __detail::__mod<_UIntType,
	    __detail::_Shift<_UIntType, __w>::__value>(__x);
	}
      _M_p = state_size;
  4065f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4065f5:	48 c7 80 80 13 00 00 	movq   $0x270,0x1380(%rax)
  4065fc:	70 02 00 00 
    }
  406600:	c9                   	leaveq 
  406601:	c3                   	retq   

0000000000406602 <_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE>:


  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename uniform_int_distribution<_IntType>::result_type
      uniform_int_distribution<_IntType>::
  406602:	55                   	push   %rbp
  406603:	48 89 e5             	mov    %rsp,%rbp
  406606:	53                   	push   %rbx
  406607:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  40660e:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  406612:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
  406616:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
	  _Gresult_type;
	typedef typename std::make_unsigned<result_type>::type __utype;
	typedef typename std::common_type<_Gresult_type, __utype>::type
	  __uctype;

	const __uctype __urngmin = __urng.min();
  40661d:	48 c7 45 98 00 00 00 	movq   $0x0,-0x68(%rbp)
  406624:	00 
	const __uctype __urngmax = __urng.max();
  406625:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  40662a:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
	const __uctype __urngrange = __urngmax - __urngmin;
  40662e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  406633:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	const __uctype __urange
	  = __uctype(__param.b()) - __uctype(__param.a());
  406637:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40663e:	48 89 c7             	mov    %rax,%rdi
  406641:	e8 b6 19 00 00       	callq  407ffc <_ZNKSt24uniform_int_distributionImE10param_type1bEv>
  406646:	48 89 c3             	mov    %rax,%rbx
  406649:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  406650:	48 89 c7             	mov    %rax,%rdi
  406653:	e8 92 19 00 00       	callq  407fea <_ZNKSt24uniform_int_distributionImE10param_type1aEv>
  406658:	48 29 c3             	sub    %rax,%rbx
  40665b:	48 89 d8             	mov    %rbx,%rax
  40665e:	48 89 45 b0          	mov    %rax,-0x50(%rbp)

	__uctype __ret;

	if (__urngrange > __urange)
  406662:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  406667:	48 39 45 b0          	cmp    %rax,-0x50(%rbp)
  40666b:	77 5b                	ja     4066c8 <_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE+0xc6>
	  {
	    // downscaling
	    const __uctype __uerange = __urange + 1; // __urange can be zero
  40666d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  406671:	48 83 c0 01          	add    $0x1,%rax
  406675:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	    const __uctype __scaling = __urngrange / __uerange;
  406679:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  40667e:	ba 00 00 00 00       	mov    $0x0,%edx
  406683:	48 f7 75 b8          	divq   -0x48(%rbp)
  406687:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	    const __uctype __past = __uerange * __scaling;
  40668b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40668f:	48 0f af 45 c0       	imul   -0x40(%rbp),%rax
  406694:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	    do
	      __ret = __uctype(__urng()) - __urngmin;
  406698:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40669c:	48 89 c7             	mov    %rax,%rdi
  40669f:	e8 04 f1 ff ff       	callq  4057a8 <_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv>
  4066a4:	48 89 45 90          	mov    %rax,-0x70(%rbp)
	  {
	    // downscaling
	    const __uctype __uerange = __urange + 1; // __urange can be zero
	    const __uctype __scaling = __urngrange / __uerange;
	    const __uctype __past = __uerange * __scaling;
	    do
  4066a8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  4066ac:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  4066b0:	73 e6                	jae    406698 <_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE+0x96>
	      __ret = __uctype(__urng()) - __urngmin;
	    while (__ret >= __past);
	    __ret /= __scaling;
  4066b2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  4066b6:	ba 00 00 00 00       	mov    $0x0,%edx
  4066bb:	48 f7 75 c0          	divq   -0x40(%rbp)
  4066bf:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  4066c3:	e9 91 00 00 00       	jmpq   406759 <_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE+0x157>
	  }
	else if (__urngrange < __urange)
  4066c8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  4066cd:	48 39 45 b0          	cmp    %rax,-0x50(%rbp)
  4066d1:	76 76                	jbe    406749 <_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE+0x147>
	      low in [0, urngrange].
	    */
	    __uctype __tmp; // wraparound control
	    do
	      {
		const __uctype __uerngrange = __urngrange + 1;
  4066d3:	48 b8 00 00 00 00 01 	movabs $0x100000000,%rax
  4066da:	00 00 00 
  4066dd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		__tmp = (__uerngrange * operator()
			 (__urng, param_type(0, __urange / __uerngrange)));
  4066e1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4066e5:	48 c1 e8 20          	shr    $0x20,%rax
  4066e9:	48 89 c2             	mov    %rax,%rdx
  4066ec:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4066f0:	be 00 00 00 00       	mov    $0x0,%esi
  4066f5:	48 89 c7             	mov    %rax,%rdi
  4066f8:	e8 37 fe ff ff       	callq  406534 <_ZNSt24uniform_int_distributionImE10param_typeC1Emm>
  4066fd:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  406701:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
  406705:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  406709:	48 89 ce             	mov    %rcx,%rsi
  40670c:	48 89 c7             	mov    %rax,%rdi
  40670f:	e8 ee fe ff ff       	callq  406602 <_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE>
	    */
	    __uctype __tmp; // wraparound control
	    do
	      {
		const __uctype __uerngrange = __urngrange + 1;
		__tmp = (__uerngrange * operator()
  406714:	48 c1 e0 20          	shl    $0x20,%rax
  406718:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
			 (__urng, param_type(0, __urange / __uerngrange)));
		__ret = __tmp + (__uctype(__urng()) - __urngmin);
  40671c:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  406720:	48 89 c7             	mov    %rax,%rdi
  406723:	e8 80 f0 ff ff       	callq  4057a8 <_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv>
  406728:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40672c:	48 01 d0             	add    %rdx,%rax
  40672f:	48 89 45 90          	mov    %rax,-0x70(%rbp)
	      and
	
	      low in [0, urngrange].
	    */
	    __uctype __tmp; // wraparound control
	    do
  406733:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  406737:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  40673b:	77 96                	ja     4066d3 <_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE+0xd1>
  40673d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  406741:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  406745:	72 8c                	jb     4066d3 <_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE+0xd1>
  406747:	eb 10                	jmp    406759 <_ZNSt24uniform_int_distributionImEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEEmRT_RKNS0_10param_typeE+0x157>
		__ret = __tmp + (__uctype(__urng()) - __urngmin);
	      }
	    while (__ret > __urange || __ret < __tmp);
	  }
	else
	  __ret = __uctype(__urng()) - __urngmin;
  406749:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40674d:	48 89 c7             	mov    %rax,%rdi
  406750:	e8 53 f0 ff ff       	callq  4057a8 <_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv>
  406755:	48 89 45 90          	mov    %rax,-0x70(%rbp)

	return __ret + __param.a();
  406759:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  406760:	48 89 c7             	mov    %rax,%rdi
  406763:	e8 82 18 00 00       	callq  407fea <_ZNKSt24uniform_int_distributionImE10param_type1aEv>
  406768:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  40676c:	48 01 d0             	add    %rdx,%rax
      }
  40676f:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  406776:	5b                   	pop    %rbx
  406777:	5d                   	pop    %rbp
  406778:	c3                   	retq   
  406779:	90                   	nop

000000000040677a <_ZNSt12_Vector_baseISt6vectorISt5tupleIIdddEESaIS2_EESaIS4_EE12_Vector_implD1Ev>:
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
        rebind<_Tp>::other _Tp_alloc_type;
      typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
       	pointer;

      struct _Vector_impl 
  40677a:	55                   	push   %rbp
  40677b:	48 89 e5             	mov    %rsp,%rbp
  40677e:	48 83 ec 10          	sub    $0x10,%rsp
  406782:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406786:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40678a:	48 89 c7             	mov    %rax,%rdi
  40678d:	e8 ea 0e 00 00       	callq  40767c <_ZNSaISt6vectorISt5tupleIIdddEESaIS1_EEED1Ev>
  406792:	c9                   	leaveq 
  406793:	c3                   	retq   

0000000000406794 <_ZNSt12_Vector_baseISt6vectorISt5tupleIIdddEESaIS2_EESaIS4_EEC1Ev>:

      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

      _Vector_base()
  406794:	55                   	push   %rbp
  406795:	48 89 e5             	mov    %rsp,%rbp
  406798:	48 83 ec 10          	sub    $0x10,%rsp
  40679c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_impl() { }
  4067a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4067a4:	48 89 c7             	mov    %rax,%rdi
  4067a7:	e8 62 18 00 00       	callq  40800e <_ZNSt12_Vector_baseISt6vectorISt5tupleIIdddEESaIS2_EESaIS4_EE12_Vector_implC1Ev>
  4067ac:	c9                   	leaveq 
  4067ad:	c3                   	retq   

00000000004067ae <_ZNSt12_Vector_baseISt6vectorISt5tupleIIdddEESaIS2_EESaIS4_EED1Ev>:
	    _M_create_storage(__n);
	  }
      }
#endif

      ~_Vector_base()
  4067ae:	55                   	push   %rbp
  4067af:	48 89 e5             	mov    %rsp,%rbp
  4067b2:	48 83 ec 10          	sub    $0x10,%rsp
  4067b6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start); }
  4067ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4067be:	48 8b 40 10          	mov    0x10(%rax),%rax
  4067c2:	48 89 c2             	mov    %rax,%rdx
  4067c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4067c9:	48 8b 00             	mov    (%rax),%rax
  4067cc:	48 29 c2             	sub    %rax,%rdx
  4067cf:	48 89 d0             	mov    %rdx,%rax
  4067d2:	48 c1 f8 03          	sar    $0x3,%rax
  4067d6:	48 89 c2             	mov    %rax,%rdx
  4067d9:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
  4067e0:	aa aa aa 
  4067e3:	48 0f af c2          	imul   %rdx,%rax
  4067e7:	48 89 c2             	mov    %rax,%rdx
  4067ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4067ee:	48 8b 08             	mov    (%rax),%rcx
	  }
      }
#endif

      ~_Vector_base()
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
  4067f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4067f5:	48 89 ce             	mov    %rcx,%rsi
  4067f8:	48 89 c7             	mov    %rax,%rdi
  4067fb:	e8 4c 18 00 00       	callq  40804c <_ZNSt12_Vector_baseISt6vectorISt5tupleIIdddEESaIS2_EESaIS4_EE13_M_deallocateEPS4_m>
		      - this->_M_impl._M_start); }
  406800:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406804:	48 89 c7             	mov    %rax,%rdi
  406807:	e8 6e ff ff ff       	callq  40677a <_ZNSt12_Vector_baseISt6vectorISt5tupleIIdddEESaIS2_EESaIS4_EE12_Vector_implD1Ev>
  40680c:	c9                   	leaveq 
  40680d:	c3                   	retq   

000000000040680e <_ZNSt12_Vector_baseISt6vectorISt5tupleIIdddEESaIS2_EESaIS4_EE19_M_get_Tp_allocatorEv>:
      
    public:
      typedef _Alloc allocator_type;

      _Tp_alloc_type&
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
  40680e:	55                   	push   %rbp
  40680f:	48 89 e5             	mov    %rsp,%rbp
  406812:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
  406816:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40681a:	5d                   	pop    %rbp
  40681b:	c3                   	retq   

000000000040681c <_ZSt8_DestroyIPSt6vectorISt5tupleIIdddEESaIS2_EES4_EvT_S6_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
  40681c:	55                   	push   %rbp
  40681d:	48 89 e5             	mov    %rsp,%rbp
  406820:	48 83 ec 20          	sub    $0x20,%rsp
  406824:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406828:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40682c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
  406830:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  406834:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406838:	48 89 d6             	mov    %rdx,%rsi
  40683b:	48 89 c7             	mov    %rax,%rdi
  40683e:	e8 3d 18 00 00       	callq  408080 <_ZSt8_DestroyIPSt6vectorISt5tupleIIdddEESaIS2_EEEvT_S6_>
    }
  406843:	c9                   	leaveq 
  406844:	c3                   	retq   
  406845:	90                   	nop

0000000000406846 <_ZNSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EE17_M_default_appendEm>:
    }

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
  406846:	55                   	push   %rbp
  406847:	48 89 e5             	mov    %rsp,%rbp
  40684a:	53                   	push   %rbx
  40684b:	48 83 ec 38          	sub    $0x38,%rsp
  40684f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  406853:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    _M_default_append(size_type __n)
    {
      if (__n != 0)
  406857:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  40685c:	0f 84 38 02 00 00    	je     406a9a <_ZNSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EE17_M_default_appendEm+0x254>
	{
	  if (size_type(this->_M_impl._M_end_of_storage
  406862:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406866:	48 8b 40 10          	mov    0x10(%rax),%rax
  40686a:	48 89 c2             	mov    %rax,%rdx
  40686d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406871:	48 8b 40 08          	mov    0x8(%rax),%rax
  406875:	48 29 c2             	sub    %rax,%rdx
  406878:	48 89 d0             	mov    %rdx,%rax
  40687b:	48 c1 f8 03          	sar    $0x3,%rax
  40687f:	48 89 c2             	mov    %rax,%rdx
  406882:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
  406889:	aa aa aa 
  40688c:	48 0f af c2          	imul   %rdx,%rax
  406890:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  406894:	72 50                	jb     4068e6 <_ZNSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EE17_M_default_appendEm+0xa0>
			- this->_M_impl._M_finish) >= __n)
	    {
	      std::__uninitialized_default_n_a(this->_M_impl._M_finish,
					       __n, _M_get_Tp_allocator());
  406896:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40689a:	48 89 c7             	mov    %rax,%rdi
  40689d:	e8 6c ff ff ff       	callq  40680e <_ZNSt12_Vector_baseISt6vectorISt5tupleIIdddEESaIS2_EESaIS4_EE19_M_get_Tp_allocatorEv>
  4068a2:	48 89 c2             	mov    %rax,%rdx
  4068a5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4068a9:	48 8b 40 08          	mov    0x8(%rax),%rax
      if (__n != 0)
	{
	  if (size_type(this->_M_impl._M_end_of_storage
			- this->_M_impl._M_finish) >= __n)
	    {
	      std::__uninitialized_default_n_a(this->_M_impl._M_finish,
  4068ad:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  4068b1:	48 89 ce             	mov    %rcx,%rsi
  4068b4:	48 89 c7             	mov    %rax,%rdi
  4068b7:	e8 e9 17 00 00       	callq  4080a5 <_ZSt27__uninitialized_default_n_aIPSt6vectorISt5tupleIIdddEESaIS2_EEmS4_EvT_T0_RSaIT1_E>
					       __n, _M_get_Tp_allocator());
	      this->_M_impl._M_finish += __n;
  4068bc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4068c0:	48 8b 48 08          	mov    0x8(%rax),%rcx
  4068c4:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  4068c8:	48 89 d0             	mov    %rdx,%rax
  4068cb:	48 01 c0             	add    %rax,%rax
  4068ce:	48 01 d0             	add    %rdx,%rax
  4068d1:	48 c1 e0 03          	shl    $0x3,%rax
  4068d5:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  4068d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4068dd:	48 89 50 08          	mov    %rdx,0x8(%rax)
  4068e1:	e9 b4 01 00 00       	jmpq   406a9a <_ZNSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EE17_M_default_appendEm+0x254>
	    }
	  else
	    {
	      const size_type __len =
		_M_check_len(__n, "vector::_M_default_append");
  4068e6:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  4068ea:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4068ee:	ba bc be 40 00       	mov    $0x40bebc,%edx
  4068f3:	48 89 ce             	mov    %rcx,%rsi
  4068f6:	48 89 c7             	mov    %rax,%rdi
  4068f9:	e8 d0 17 00 00       	callq  4080ce <_ZNKSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EE12_M_check_lenEmPKc>
  4068fe:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	      const size_type __old_size = this->size();
  406902:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406906:	48 89 c7             	mov    %rax,%rdi
  406909:	e8 4a ed ff ff       	callq  405658 <_ZNKSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EE4sizeEv>
  40690e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	      pointer __new_start(this->_M_allocate(__len));
  406912:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406916:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40691a:	48 89 d6             	mov    %rdx,%rsi
  40691d:	48 89 c7             	mov    %rax,%rdi
  406920:	e8 73 18 00 00       	callq  408198 <_ZNSt12_Vector_baseISt6vectorISt5tupleIIdddEESaIS2_EESaIS4_EE11_M_allocateEm>
  406925:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	      pointer __new_finish(__new_start);
  406929:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40692d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	      __try
		{
		  __new_finish
		    = std::__uninitialized_move_if_noexcept_a
		    (this->_M_impl._M_start, this->_M_impl._M_finish,
		     __new_start, _M_get_Tp_allocator());
  406931:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406935:	48 89 c7             	mov    %rax,%rdi
  406938:	e8 d1 fe ff ff       	callq  40680e <_ZNSt12_Vector_baseISt6vectorISt5tupleIIdddEESaIS2_EESaIS4_EE19_M_get_Tp_allocatorEv>
  40693d:	48 89 c1             	mov    %rax,%rcx
  406940:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406944:	48 8b 70 08          	mov    0x8(%rax),%rsi
  406948:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40694c:	48 8b 00             	mov    (%rax),%rax
	      const size_type __old_size = this->size();
	      pointer __new_start(this->_M_allocate(__len));
	      pointer __new_finish(__new_start);
	      __try
		{
		  __new_finish
  40694f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  406953:	48 89 c7             	mov    %rax,%rdi
  406956:	e8 75 18 00 00       	callq  4081d0 <_ZSt34__uninitialized_move_if_noexcept_aIPSt6vectorISt5tupleIIdddEESaIS2_EES5_SaIS4_EET0_T_S8_S7_RT1_>
  40695b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		    = std::__uninitialized_move_if_noexcept_a
		    (this->_M_impl._M_start, this->_M_impl._M_finish,
		     __new_start, _M_get_Tp_allocator());
		  std::__uninitialized_default_n_a(__new_finish, __n,
						   _M_get_Tp_allocator());
  40695f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406963:	48 89 c7             	mov    %rax,%rdi
  406966:	e8 a3 fe ff ff       	callq  40680e <_ZNSt12_Vector_baseISt6vectorISt5tupleIIdddEESaIS2_EESaIS4_EE19_M_get_Tp_allocatorEv>
  40696b:	48 89 c2             	mov    %rax,%rdx
		{
		  __new_finish
		    = std::__uninitialized_move_if_noexcept_a
		    (this->_M_impl._M_start, this->_M_impl._M_finish,
		     __new_start, _M_get_Tp_allocator());
		  std::__uninitialized_default_n_a(__new_finish, __n,
  40696e:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  406972:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  406976:	48 89 ce             	mov    %rcx,%rsi
  406979:	48 89 c7             	mov    %rax,%rdi
  40697c:	e8 24 17 00 00       	callq  4080a5 <_ZSt27__uninitialized_default_n_aIPSt6vectorISt5tupleIIdddEESaIS2_EEmS4_EvT_T0_RSaIT1_E>
						   _M_get_Tp_allocator());
		  __new_finish += __n;
  406981:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  406985:	48 89 d0             	mov    %rdx,%rax
  406988:	48 01 c0             	add    %rax,%rax
  40698b:	48 01 d0             	add    %rdx,%rax
  40698e:	48 c1 e0 03          	shl    $0x3,%rax
  406992:	48 01 45 d0          	add    %rax,-0x30(%rbp)
				_M_get_Tp_allocator());
		  _M_deallocate(__new_start, __len);
		  __throw_exception_again;
		}
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			    _M_get_Tp_allocator());
  406996:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40699a:	48 89 c7             	mov    %rax,%rdi
  40699d:	e8 6c fe ff ff       	callq  40680e <_ZNSt12_Vector_baseISt6vectorISt5tupleIIdddEESaIS2_EESaIS4_EE19_M_get_Tp_allocatorEv>
  4069a2:	48 89 c2             	mov    %rax,%rdx
  4069a5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4069a9:	48 8b 48 08          	mov    0x8(%rax),%rcx
  4069ad:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4069b1:	48 8b 00             	mov    (%rax),%rax
		  std::_Destroy(__new_start, __new_finish,
				_M_get_Tp_allocator());
		  _M_deallocate(__new_start, __len);
		  __throw_exception_again;
		}
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  4069b4:	48 89 ce             	mov    %rcx,%rsi
  4069b7:	48 89 c7             	mov    %rax,%rdi
  4069ba:	e8 5d fe ff ff       	callq  40681c <_ZSt8_DestroyIPSt6vectorISt5tupleIIdddEESaIS2_EES4_EvT_S6_RSaIT0_E>
			    _M_get_Tp_allocator());
	      _M_deallocate(this->_M_impl._M_start,
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
  4069bf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4069c3:	48 8b 40 10          	mov    0x10(%rax),%rax
  4069c7:	48 89 c2             	mov    %rax,%rdx
  4069ca:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4069ce:	48 8b 00             	mov    (%rax),%rax
  4069d1:	48 29 c2             	sub    %rax,%rdx
  4069d4:	48 89 d0             	mov    %rdx,%rax
  4069d7:	48 c1 f8 03          	sar    $0x3,%rax
  4069db:	48 89 c2             	mov    %rax,%rdx
  4069de:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
  4069e5:	aa aa aa 
  4069e8:	48 0f af c2          	imul   %rdx,%rax
  4069ec:	48 89 c2             	mov    %rax,%rdx
  4069ef:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4069f3:	48 8b 08             	mov    (%rax),%rcx
  4069f6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
		  _M_deallocate(__new_start, __len);
		  __throw_exception_again;
		}
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			    _M_get_Tp_allocator());
	      _M_deallocate(this->_M_impl._M_start,
  4069fa:	48 89 ce             	mov    %rcx,%rsi
  4069fd:	48 89 c7             	mov    %rax,%rdi
  406a00:	e8 47 16 00 00       	callq  40804c <_ZNSt12_Vector_baseISt6vectorISt5tupleIIdddEESaIS2_EESaIS4_EE13_M_deallocateEPS4_m>
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
	      this->_M_impl._M_start = __new_start;
  406a05:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406a09:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  406a0d:	48 89 10             	mov    %rdx,(%rax)
	      this->_M_impl._M_finish = __new_finish;
  406a10:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406a14:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  406a18:	48 89 50 08          	mov    %rdx,0x8(%rax)
	      this->_M_impl._M_end_of_storage = __new_start + __len;
  406a1c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  406a20:	48 89 d0             	mov    %rdx,%rax
  406a23:	48 01 c0             	add    %rax,%rax
  406a26:	48 01 d0             	add    %rdx,%rax
  406a29:	48 c1 e0 03          	shl    $0x3,%rax
  406a2d:	48 89 c2             	mov    %rax,%rdx
  406a30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406a34:	48 01 c2             	add    %rax,%rdx
  406a37:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406a3b:	48 89 50 10          	mov    %rdx,0x10(%rax)
  406a3f:	eb 59                	jmp    406a9a <_ZNSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EE17_M_default_appendEm+0x254>
  406a41:	48 89 c3             	mov    %rax,%rbx
		     __new_start, _M_get_Tp_allocator());
		  std::__uninitialized_default_n_a(__new_finish, __n,
						   _M_get_Tp_allocator());
		  __new_finish += __n;
		}
	      __catch(...)
  406a44:	e8 47 ae ff ff       	callq  401890 <__cxa_end_catch@plt>
  406a49:	48 89 d8             	mov    %rbx,%rax
  406a4c:	48 89 c7             	mov    %rax,%rdi
  406a4f:	e8 cc ae ff ff       	callq  401920 <_Unwind_Resume@plt>
  406a54:	48 89 c7             	mov    %rax,%rdi
  406a57:	e8 74 ae ff ff       	callq  4018d0 <__cxa_begin_catch@plt>
		{
		  std::_Destroy(__new_start, __new_finish,
				_M_get_Tp_allocator());
  406a5c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406a60:	48 89 c7             	mov    %rax,%rdi
  406a63:	e8 a6 fd ff ff       	callq  40680e <_ZNSt12_Vector_baseISt6vectorISt5tupleIIdddEESaIS2_EESaIS4_EE19_M_get_Tp_allocatorEv>
  406a68:	48 89 c2             	mov    %rax,%rdx
						   _M_get_Tp_allocator());
		  __new_finish += __n;
		}
	      __catch(...)
		{
		  std::_Destroy(__new_start, __new_finish,
  406a6b:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  406a6f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406a73:	48 89 ce             	mov    %rcx,%rsi
  406a76:	48 89 c7             	mov    %rax,%rdi
  406a79:	e8 9e fd ff ff       	callq  40681c <_ZSt8_DestroyIPSt6vectorISt5tupleIIdddEESaIS2_EES4_EvT_S6_RSaIT0_E>
				_M_get_Tp_allocator());
		  _M_deallocate(__new_start, __len);
  406a7e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406a82:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  406a86:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  406a8a:	48 89 ce             	mov    %rcx,%rsi
  406a8d:	48 89 c7             	mov    %rax,%rdi
  406a90:	e8 b7 15 00 00       	callq  40804c <_ZNSt12_Vector_baseISt6vectorISt5tupleIIdddEESaIS2_EESaIS4_EE13_M_deallocateEPS4_m>
		  __throw_exception_again;
  406a95:	e8 e6 ab ff ff       	callq  401680 <__cxa_rethrow@plt>
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_finish;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
  406a9a:	48 83 c4 38          	add    $0x38,%rsp
  406a9e:	5b                   	pop    %rbx
  406a9f:	5d                   	pop    %rbp
  406aa0:	c3                   	retq   
  406aa1:	90                   	nop

0000000000406aa2 <_ZNSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EE15_M_erase_at_endEPS3_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos)
  406aa2:	55                   	push   %rbp
  406aa3:	48 89 e5             	mov    %rsp,%rbp
  406aa6:	48 83 ec 10          	sub    $0x10,%rsp
  406aaa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406aae:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
  406ab2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406ab6:	48 89 c7             	mov    %rax,%rdi
  406ab9:	e8 50 fd ff ff       	callq  40680e <_ZNSt12_Vector_baseISt6vectorISt5tupleIIdddEESaIS2_EESaIS4_EE19_M_get_Tp_allocatorEv>
  406abe:	48 89 c2             	mov    %rax,%rdx
  406ac1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406ac5:	48 8b 48 08          	mov    0x8(%rax),%rcx
  406ac9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406acd:	48 89 ce             	mov    %rcx,%rsi
  406ad0:	48 89 c7             	mov    %rax,%rdi
  406ad3:	e8 44 fd ff ff       	callq  40681c <_ZSt8_DestroyIPSt6vectorISt5tupleIIdddEESaIS2_EES4_EvT_S6_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
  406ad8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406adc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  406ae0:	48 89 50 08          	mov    %rdx,0x8(%rax)
      }
  406ae4:	c9                   	leaveq 
  406ae5:	c3                   	retq   

0000000000406ae6 <_ZNKSt6vectorISt5tupleIIdddEESaIS1_EE4sizeEv>:
#endif

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
  406ae6:	55                   	push   %rbp
  406ae7:	48 89 e5             	mov    %rsp,%rbp
  406aea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  406aee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406af2:	48 8b 40 08          	mov    0x8(%rax),%rax
  406af6:	48 89 c2             	mov    %rax,%rdx
  406af9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406afd:	48 8b 00             	mov    (%rax),%rax
  406b00:	48 29 c2             	sub    %rax,%rdx
  406b03:	48 89 d0             	mov    %rdx,%rax
  406b06:	48 c1 f8 03          	sar    $0x3,%rax
  406b0a:	48 89 c2             	mov    %rax,%rdx
  406b0d:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
  406b14:	aa aa aa 
  406b17:	48 0f af c2          	imul   %rdx,%rax
  406b1b:	5d                   	pop    %rbp
  406b1c:	c3                   	retq   
  406b1d:	90                   	nop

0000000000406b1e <_ZNSt6vectorISt5tupleIIdddEESaIS1_EE17_M_default_appendEm>:
    }

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
  406b1e:	55                   	push   %rbp
  406b1f:	48 89 e5             	mov    %rsp,%rbp
  406b22:	53                   	push   %rbx
  406b23:	48 83 ec 38          	sub    $0x38,%rsp
  406b27:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  406b2b:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    _M_default_append(size_type __n)
    {
      if (__n != 0)
  406b2f:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  406b34:	0f 84 38 02 00 00    	je     406d72 <_ZNSt6vectorISt5tupleIIdddEESaIS1_EE17_M_default_appendEm+0x254>
	{
	  if (size_type(this->_M_impl._M_end_of_storage
  406b3a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406b3e:	48 8b 40 10          	mov    0x10(%rax),%rax
  406b42:	48 89 c2             	mov    %rax,%rdx
  406b45:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406b49:	48 8b 40 08          	mov    0x8(%rax),%rax
  406b4d:	48 29 c2             	sub    %rax,%rdx
  406b50:	48 89 d0             	mov    %rdx,%rax
  406b53:	48 c1 f8 03          	sar    $0x3,%rax
  406b57:	48 89 c2             	mov    %rax,%rdx
  406b5a:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
  406b61:	aa aa aa 
  406b64:	48 0f af c2          	imul   %rdx,%rax
  406b68:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  406b6c:	72 50                	jb     406bbe <_ZNSt6vectorISt5tupleIIdddEESaIS1_EE17_M_default_appendEm+0xa0>
			- this->_M_impl._M_finish) >= __n)
	    {
	      std::__uninitialized_default_n_a(this->_M_impl._M_finish,
					       __n, _M_get_Tp_allocator());
  406b6e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406b72:	48 89 c7             	mov    %rax,%rdi
  406b75:	e8 a4 16 00 00       	callq  40821e <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EE19_M_get_Tp_allocatorEv>
  406b7a:	48 89 c2             	mov    %rax,%rdx
  406b7d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406b81:	48 8b 40 08          	mov    0x8(%rax),%rax
      if (__n != 0)
	{
	  if (size_type(this->_M_impl._M_end_of_storage
			- this->_M_impl._M_finish) >= __n)
	    {
	      std::__uninitialized_default_n_a(this->_M_impl._M_finish,
  406b85:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  406b89:	48 89 ce             	mov    %rcx,%rsi
  406b8c:	48 89 c7             	mov    %rax,%rdi
  406b8f:	e8 98 16 00 00       	callq  40822c <_ZSt27__uninitialized_default_n_aIPSt5tupleIIdddEEmS1_EvT_T0_RSaIT1_E>
					       __n, _M_get_Tp_allocator());
	      this->_M_impl._M_finish += __n;
  406b94:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406b98:	48 8b 48 08          	mov    0x8(%rax),%rcx
  406b9c:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  406ba0:	48 89 d0             	mov    %rdx,%rax
  406ba3:	48 01 c0             	add    %rax,%rax
  406ba6:	48 01 d0             	add    %rdx,%rax
  406ba9:	48 c1 e0 03          	shl    $0x3,%rax
  406bad:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  406bb1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406bb5:	48 89 50 08          	mov    %rdx,0x8(%rax)
  406bb9:	e9 b4 01 00 00       	jmpq   406d72 <_ZNSt6vectorISt5tupleIIdddEESaIS1_EE17_M_default_appendEm+0x254>
	    }
	  else
	    {
	      const size_type __len =
		_M_check_len(__n, "vector::_M_default_append");
  406bbe:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  406bc2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406bc6:	ba bc be 40 00       	mov    $0x40bebc,%edx
  406bcb:	48 89 ce             	mov    %rcx,%rsi
  406bce:	48 89 c7             	mov    %rax,%rdi
  406bd1:	e8 80 16 00 00       	callq  408256 <_ZNKSt6vectorISt5tupleIIdddEESaIS1_EE12_M_check_lenEmPKc>
  406bd6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	      const size_type __old_size = this->size();
  406bda:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406bde:	48 89 c7             	mov    %rax,%rdi
  406be1:	e8 00 ff ff ff       	callq  406ae6 <_ZNKSt6vectorISt5tupleIIdddEESaIS1_EE4sizeEv>
  406be6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	      pointer __new_start(this->_M_allocate(__len));
  406bea:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406bee:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  406bf2:	48 89 d6             	mov    %rdx,%rsi
  406bf5:	48 89 c7             	mov    %rax,%rdi
  406bf8:	e8 23 17 00 00       	callq  408320 <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EE11_M_allocateEm>
  406bfd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	      pointer __new_finish(__new_start);
  406c01:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406c05:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	      __try
		{
		  __new_finish
		    = std::__uninitialized_move_if_noexcept_a
		    (this->_M_impl._M_start, this->_M_impl._M_finish,
		     __new_start, _M_get_Tp_allocator());
  406c09:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406c0d:	48 89 c7             	mov    %rax,%rdi
  406c10:	e8 09 16 00 00       	callq  40821e <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EE19_M_get_Tp_allocatorEv>
  406c15:	48 89 c1             	mov    %rax,%rcx
  406c18:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406c1c:	48 8b 70 08          	mov    0x8(%rax),%rsi
  406c20:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406c24:	48 8b 00             	mov    (%rax),%rax
	      const size_type __old_size = this->size();
	      pointer __new_start(this->_M_allocate(__len));
	      pointer __new_finish(__new_start);
	      __try
		{
		  __new_finish
  406c27:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  406c2b:	48 89 c7             	mov    %rax,%rdi
  406c2e:	e8 25 17 00 00       	callq  408358 <_ZSt34__uninitialized_move_if_noexcept_aIPSt5tupleIIdddEES2_SaIS1_EET0_T_S5_S4_RT1_>
  406c33:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		    = std::__uninitialized_move_if_noexcept_a
		    (this->_M_impl._M_start, this->_M_impl._M_finish,
		     __new_start, _M_get_Tp_allocator());
		  std::__uninitialized_default_n_a(__new_finish, __n,
						   _M_get_Tp_allocator());
  406c37:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406c3b:	48 89 c7             	mov    %rax,%rdi
  406c3e:	e8 db 15 00 00       	callq  40821e <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EE19_M_get_Tp_allocatorEv>
  406c43:	48 89 c2             	mov    %rax,%rdx
		{
		  __new_finish
		    = std::__uninitialized_move_if_noexcept_a
		    (this->_M_impl._M_start, this->_M_impl._M_finish,
		     __new_start, _M_get_Tp_allocator());
		  std::__uninitialized_default_n_a(__new_finish, __n,
  406c46:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  406c4a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  406c4e:	48 89 ce             	mov    %rcx,%rsi
  406c51:	48 89 c7             	mov    %rax,%rdi
  406c54:	e8 d3 15 00 00       	callq  40822c <_ZSt27__uninitialized_default_n_aIPSt5tupleIIdddEEmS1_EvT_T0_RSaIT1_E>
						   _M_get_Tp_allocator());
		  __new_finish += __n;
  406c59:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  406c5d:	48 89 d0             	mov    %rdx,%rax
  406c60:	48 01 c0             	add    %rax,%rax
  406c63:	48 01 d0             	add    %rdx,%rax
  406c66:	48 c1 e0 03          	shl    $0x3,%rax
  406c6a:	48 01 45 d0          	add    %rax,-0x30(%rbp)
				_M_get_Tp_allocator());
		  _M_deallocate(__new_start, __len);
		  __throw_exception_again;
		}
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			    _M_get_Tp_allocator());
  406c6e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406c72:	48 89 c7             	mov    %rax,%rdi
  406c75:	e8 a4 15 00 00       	callq  40821e <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EE19_M_get_Tp_allocatorEv>
  406c7a:	48 89 c2             	mov    %rax,%rdx
  406c7d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406c81:	48 8b 48 08          	mov    0x8(%rax),%rcx
  406c85:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406c89:	48 8b 00             	mov    (%rax),%rax
		  std::_Destroy(__new_start, __new_finish,
				_M_get_Tp_allocator());
		  _M_deallocate(__new_start, __len);
		  __throw_exception_again;
		}
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  406c8c:	48 89 ce             	mov    %rcx,%rsi
  406c8f:	48 89 c7             	mov    %rax,%rdi
  406c92:	e8 0f 17 00 00       	callq  4083a6 <_ZSt8_DestroyIPSt5tupleIIdddEES1_EvT_S3_RSaIT0_E>
			    _M_get_Tp_allocator());
	      _M_deallocate(this->_M_impl._M_start,
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
  406c97:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406c9b:	48 8b 40 10          	mov    0x10(%rax),%rax
  406c9f:	48 89 c2             	mov    %rax,%rdx
  406ca2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406ca6:	48 8b 00             	mov    (%rax),%rax
  406ca9:	48 29 c2             	sub    %rax,%rdx
  406cac:	48 89 d0             	mov    %rdx,%rax
  406caf:	48 c1 f8 03          	sar    $0x3,%rax
  406cb3:	48 89 c2             	mov    %rax,%rdx
  406cb6:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
  406cbd:	aa aa aa 
  406cc0:	48 0f af c2          	imul   %rdx,%rax
  406cc4:	48 89 c2             	mov    %rax,%rdx
  406cc7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406ccb:	48 8b 08             	mov    (%rax),%rcx
  406cce:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
		  _M_deallocate(__new_start, __len);
		  __throw_exception_again;
		}
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			    _M_get_Tp_allocator());
	      _M_deallocate(this->_M_impl._M_start,
  406cd2:	48 89 ce             	mov    %rcx,%rsi
  406cd5:	48 89 c7             	mov    %rax,%rdi
  406cd8:	e8 f3 16 00 00       	callq  4083d0 <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EE13_M_deallocateEPS1_m>
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
	      this->_M_impl._M_start = __new_start;
  406cdd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406ce1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  406ce5:	48 89 10             	mov    %rdx,(%rax)
	      this->_M_impl._M_finish = __new_finish;
  406ce8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406cec:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  406cf0:	48 89 50 08          	mov    %rdx,0x8(%rax)
	      this->_M_impl._M_end_of_storage = __new_start + __len;
  406cf4:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  406cf8:	48 89 d0             	mov    %rdx,%rax
  406cfb:	48 01 c0             	add    %rax,%rax
  406cfe:	48 01 d0             	add    %rdx,%rax
  406d01:	48 c1 e0 03          	shl    $0x3,%rax
  406d05:	48 89 c2             	mov    %rax,%rdx
  406d08:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406d0c:	48 01 c2             	add    %rax,%rdx
  406d0f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406d13:	48 89 50 10          	mov    %rdx,0x10(%rax)
  406d17:	eb 59                	jmp    406d72 <_ZNSt6vectorISt5tupleIIdddEESaIS1_EE17_M_default_appendEm+0x254>
  406d19:	48 89 c3             	mov    %rax,%rbx
		     __new_start, _M_get_Tp_allocator());
		  std::__uninitialized_default_n_a(__new_finish, __n,
						   _M_get_Tp_allocator());
		  __new_finish += __n;
		}
	      __catch(...)
  406d1c:	e8 6f ab ff ff       	callq  401890 <__cxa_end_catch@plt>
  406d21:	48 89 d8             	mov    %rbx,%rax
  406d24:	48 89 c7             	mov    %rax,%rdi
  406d27:	e8 f4 ab ff ff       	callq  401920 <_Unwind_Resume@plt>
  406d2c:	48 89 c7             	mov    %rax,%rdi
  406d2f:	e8 9c ab ff ff       	callq  4018d0 <__cxa_begin_catch@plt>
		{
		  std::_Destroy(__new_start, __new_finish,
				_M_get_Tp_allocator());
  406d34:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406d38:	48 89 c7             	mov    %rax,%rdi
  406d3b:	e8 de 14 00 00       	callq  40821e <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EE19_M_get_Tp_allocatorEv>
  406d40:	48 89 c2             	mov    %rax,%rdx
						   _M_get_Tp_allocator());
		  __new_finish += __n;
		}
	      __catch(...)
		{
		  std::_Destroy(__new_start, __new_finish,
  406d43:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  406d47:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406d4b:	48 89 ce             	mov    %rcx,%rsi
  406d4e:	48 89 c7             	mov    %rax,%rdi
  406d51:	e8 50 16 00 00       	callq  4083a6 <_ZSt8_DestroyIPSt5tupleIIdddEES1_EvT_S3_RSaIT0_E>
				_M_get_Tp_allocator());
		  _M_deallocate(__new_start, __len);
  406d56:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406d5a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  406d5e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  406d62:	48 89 ce             	mov    %rcx,%rsi
  406d65:	48 89 c7             	mov    %rax,%rdi
  406d68:	e8 63 16 00 00       	callq  4083d0 <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EE13_M_deallocateEPS1_m>
		  __throw_exception_again;
  406d6d:	e8 0e a9 ff ff       	callq  401680 <__cxa_rethrow@plt>
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_finish;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
  406d72:	48 83 c4 38          	add    $0x38,%rsp
  406d76:	5b                   	pop    %rbx
  406d77:	5d                   	pop    %rbp
  406d78:	c3                   	retq   
  406d79:	90                   	nop

0000000000406d7a <_ZNSt6vectorISt5tupleIIdddEESaIS1_EE15_M_erase_at_endEPS1_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos)
  406d7a:	55                   	push   %rbp
  406d7b:	48 89 e5             	mov    %rsp,%rbp
  406d7e:	48 83 ec 10          	sub    $0x10,%rsp
  406d82:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406d86:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
  406d8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406d8e:	48 89 c7             	mov    %rax,%rdi
  406d91:	e8 88 14 00 00       	callq  40821e <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EE19_M_get_Tp_allocatorEv>
  406d96:	48 89 c2             	mov    %rax,%rdx
  406d99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406d9d:	48 8b 48 08          	mov    0x8(%rax),%rcx
  406da1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406da5:	48 89 ce             	mov    %rcx,%rsi
  406da8:	48 89 c7             	mov    %rax,%rdi
  406dab:	e8 f6 15 00 00       	callq  4083a6 <_ZSt8_DestroyIPSt5tupleIIdddEES1_EvT_S3_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
  406db0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406db4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  406db8:	48 89 50 08          	mov    %rdx,0x8(%rax)
      }
  406dbc:	c9                   	leaveq 
  406dbd:	c3                   	retq   

0000000000406dbe <_ZNSt12_Vector_baseImSaImEE12_Vector_implD1Ev>:
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
        rebind<_Tp>::other _Tp_alloc_type;
      typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
       	pointer;

      struct _Vector_impl 
  406dbe:	55                   	push   %rbp
  406dbf:	48 89 e5             	mov    %rsp,%rbp
  406dc2:	48 83 ec 10          	sub    $0x10,%rsp
  406dc6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406dca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406dce:	48 89 c7             	mov    %rax,%rdi
  406dd1:	e8 6c 16 00 00       	callq  408442 <_ZNSaImED1Ev>
  406dd6:	c9                   	leaveq 
  406dd7:	c3                   	retq   

0000000000406dd8 <_ZNSt12_Vector_baseImSaImEEC1Ev>:

      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

      _Vector_base()
  406dd8:	55                   	push   %rbp
  406dd9:	48 89 e5             	mov    %rsp,%rbp
  406ddc:	48 83 ec 10          	sub    $0x10,%rsp
  406de0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_impl() { }
  406de4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406de8:	48 89 c7             	mov    %rax,%rdi
  406deb:	e8 14 16 00 00       	callq  408404 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>
  406df0:	c9                   	leaveq 
  406df1:	c3                   	retq   

0000000000406df2 <_ZNSt12_Vector_baseImSaImEED1Ev>:
	    _M_create_storage(__n);
	  }
      }
#endif

      ~_Vector_base()
  406df2:	55                   	push   %rbp
  406df3:	48 89 e5             	mov    %rsp,%rbp
  406df6:	48 83 ec 10          	sub    $0x10,%rsp
  406dfa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start); }
  406dfe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406e02:	48 8b 40 10          	mov    0x10(%rax),%rax
  406e06:	48 89 c2             	mov    %rax,%rdx
  406e09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406e0d:	48 8b 00             	mov    (%rax),%rax
  406e10:	48 29 c2             	sub    %rax,%rdx
  406e13:	48 89 d0             	mov    %rdx,%rax
  406e16:	48 c1 f8 03          	sar    $0x3,%rax
  406e1a:	48 89 c2             	mov    %rax,%rdx
  406e1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406e21:	48 8b 08             	mov    (%rax),%rcx
	  }
      }
#endif

      ~_Vector_base()
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
  406e24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406e28:	48 89 ce             	mov    %rcx,%rsi
  406e2b:	48 89 c7             	mov    %rax,%rdi
  406e2e:	e8 29 16 00 00       	callq  40845c <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmm>
		      - this->_M_impl._M_start); }
  406e33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406e37:	48 89 c7             	mov    %rax,%rdi
  406e3a:	e8 7f ff ff ff       	callq  406dbe <_ZNSt12_Vector_baseImSaImEE12_Vector_implD1Ev>
  406e3f:	c9                   	leaveq 
  406e40:	c3                   	retq   
  406e41:	90                   	nop

0000000000406e42 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>:
      
    public:
      typedef _Alloc allocator_type;

      _Tp_alloc_type&
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
  406e42:	55                   	push   %rbp
  406e43:	48 89 e5             	mov    %rsp,%rbp
  406e46:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
  406e4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406e4e:	5d                   	pop    %rbp
  406e4f:	c3                   	retq   

0000000000406e50 <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
  406e50:	55                   	push   %rbp
  406e51:	48 89 e5             	mov    %rsp,%rbp
  406e54:	48 83 ec 20          	sub    $0x20,%rsp
  406e58:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406e5c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406e60:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
  406e64:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  406e68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406e6c:	48 89 d6             	mov    %rdx,%rsi
  406e6f:	48 89 c7             	mov    %rax,%rdi
  406e72:	e8 19 16 00 00       	callq  408490 <_ZSt8_DestroyIPmEvT_S1_>
    }
  406e77:	c9                   	leaveq 
  406e78:	c3                   	retq   
  406e79:	90                   	nop

0000000000406e7a <_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE11_M_gen_randEv>:
	   size_t __n, size_t __m, size_t __r,
	   _UIntType __a, size_t __u, _UIntType __d, size_t __s,
	   _UIntType __b, size_t __t, _UIntType __c, size_t __l,
	   _UIntType __f>
    void
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
  406e7a:	55                   	push   %rbp
  406e7b:	48 89 e5             	mov    %rsp,%rbp
  406e7e:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
			    __s, __b, __t, __c, __l, __f>::
    _M_gen_rand(void)
    {
      const _UIntType __upper_mask = (~_UIntType()) << __r;
  406e82:	48 c7 45 d8 00 00 00 	movq   $0xffffffff80000000,-0x28(%rbp)
  406e89:	80 
      const _UIntType __lower_mask = ~__upper_mask;
  406e8a:	48 c7 45 e0 ff ff ff 	movq   $0x7fffffff,-0x20(%rbp)
  406e91:	7f 

      for (size_t __k = 0; __k < (__n - __m); ++__k)
  406e92:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  406e99:	00 
  406e9a:	eb 7d                	jmp    406f19 <_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE11_M_gen_randEv+0x9f>
        {
	  _UIntType __y = ((_M_x[__k] & __upper_mask)
  406e9c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406ea0:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  406ea4:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
			   | (_M_x[__k + 1] & __lower_mask));
  406ea8:	48 25 00 00 00 80    	and    $0xffffffff80000000,%rax
  406eae:	48 89 c1             	mov    %rax,%rcx
  406eb1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406eb5:	48 8d 50 01          	lea    0x1(%rax),%rdx
  406eb9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406ebd:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  406ec1:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
  406ec6:	48 09 c8             	or     %rcx,%rax
  406ec9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  _M_x[__k] = (_M_x[__k + __m] ^ (__y >> 1)
  406ecd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406ed1:	48 8d 90 8d 01 00 00 	lea    0x18d(%rax),%rdx
  406ed8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406edc:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  406ee0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  406ee4:	48 d1 ea             	shr    %rdx
  406ee7:	48 31 c2             	xor    %rax,%rdx
  406eea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406eee:	83 e0 01             	and    $0x1,%eax
  406ef1:	48 85 c0             	test   %rax,%rax
  406ef4:	74 07                	je     406efd <_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE11_M_gen_randEv+0x83>
  406ef6:	b8 df b0 08 99       	mov    $0x9908b0df,%eax
  406efb:	eb 05                	jmp    406f02 <_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE11_M_gen_randEv+0x88>
  406efd:	b8 00 00 00 00       	mov    $0x0,%eax
  406f02:	48 89 d1             	mov    %rdx,%rcx
  406f05:	48 31 c1             	xor    %rax,%rcx
  406f08:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406f0c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  406f10:	48 89 0c d0          	mov    %rcx,(%rax,%rdx,8)
    _M_gen_rand(void)
    {
      const _UIntType __upper_mask = (~_UIntType()) << __r;
      const _UIntType __lower_mask = ~__upper_mask;

      for (size_t __k = 0; __k < (__n - __m); ++__k)
  406f14:	48 83 45 c8 01       	addq   $0x1,-0x38(%rbp)
  406f19:	48 81 7d c8 e2 00 00 	cmpq   $0xe2,-0x38(%rbp)
  406f20:	00 
  406f21:	0f 86 75 ff ff ff    	jbe    406e9c <_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE11_M_gen_randEv+0x22>
			   | (_M_x[__k + 1] & __lower_mask));
	  _M_x[__k] = (_M_x[__k + __m] ^ (__y >> 1)
		       ^ ((__y & 0x01) ? __a : 0));
        }

      for (size_t __k = (__n - __m); __k < (__n - 1); ++__k)
  406f27:	48 c7 45 d0 e3 00 00 	movq   $0xe3,-0x30(%rbp)
  406f2e:	00 
  406f2f:	eb 7d                	jmp    406fae <_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE11_M_gen_randEv+0x134>
	{
	  _UIntType __y = ((_M_x[__k] & __upper_mask)
  406f31:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406f35:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  406f39:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
			   | (_M_x[__k + 1] & __lower_mask));
  406f3d:	48 25 00 00 00 80    	and    $0xffffffff80000000,%rax
  406f43:	48 89 c1             	mov    %rax,%rcx
  406f46:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  406f4a:	48 8d 50 01          	lea    0x1(%rax),%rdx
  406f4e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406f52:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  406f56:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
  406f5b:	48 09 c8             	or     %rcx,%rax
  406f5e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	  _M_x[__k] = (_M_x[__k + (__m - __n)] ^ (__y >> 1)
  406f62:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  406f66:	48 8d 90 1d ff ff ff 	lea    -0xe3(%rax),%rdx
  406f6d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406f71:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  406f75:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  406f79:	48 d1 ea             	shr    %rdx
  406f7c:	48 31 c2             	xor    %rax,%rdx
  406f7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406f83:	83 e0 01             	and    $0x1,%eax
  406f86:	48 85 c0             	test   %rax,%rax
  406f89:	74 07                	je     406f92 <_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE11_M_gen_randEv+0x118>
  406f8b:	b8 df b0 08 99       	mov    $0x9908b0df,%eax
  406f90:	eb 05                	jmp    406f97 <_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE11_M_gen_randEv+0x11d>
  406f92:	b8 00 00 00 00       	mov    $0x0,%eax
  406f97:	48 89 d1             	mov    %rdx,%rcx
  406f9a:	48 31 c1             	xor    %rax,%rcx
  406f9d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406fa1:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  406fa5:	48 89 0c d0          	mov    %rcx,(%rax,%rdx,8)
			   | (_M_x[__k + 1] & __lower_mask));
	  _M_x[__k] = (_M_x[__k + __m] ^ (__y >> 1)
		       ^ ((__y & 0x01) ? __a : 0));
        }

      for (size_t __k = (__n - __m); __k < (__n - 1); ++__k)
  406fa9:	48 83 45 d0 01       	addq   $0x1,-0x30(%rbp)
  406fae:	48 81 7d d0 6e 02 00 	cmpq   $0x26e,-0x30(%rbp)
  406fb5:	00 
  406fb6:	0f 86 75 ff ff ff    	jbe    406f31 <_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE11_M_gen_randEv+0xb7>
			   | (_M_x[__k + 1] & __lower_mask));
	  _M_x[__k] = (_M_x[__k + (__m - __n)] ^ (__y >> 1)
		       ^ ((__y & 0x01) ? __a : 0));
	}

      _UIntType __y = ((_M_x[__n - 1] & __upper_mask)
  406fbc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406fc0:	48 8b 80 78 13 00 00 	mov    0x1378(%rax),%rax
		       | (_M_x[0] & __lower_mask));
  406fc7:	48 25 00 00 00 80    	and    $0xffffffff80000000,%rax
  406fcd:	48 89 c2             	mov    %rax,%rdx
  406fd0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406fd4:	48 8b 00             	mov    (%rax),%rax
  406fd7:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
  406fdc:	48 09 d0             	or     %rdx,%rax
  406fdf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      _M_x[__n - 1] = (_M_x[__m - 1] ^ (__y >> 1)
  406fe3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406fe7:	48 8b 80 60 0c 00 00 	mov    0xc60(%rax),%rax
  406fee:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  406ff2:	48 d1 ea             	shr    %rdx
  406ff5:	48 31 c2             	xor    %rax,%rdx
  406ff8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406ffc:	83 e0 01             	and    $0x1,%eax
  406fff:	48 85 c0             	test   %rax,%rax
  407002:	74 07                	je     40700b <_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE11_M_gen_randEv+0x191>
  407004:	b8 df b0 08 99       	mov    $0x9908b0df,%eax
  407009:	eb 05                	jmp    407010 <_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE11_M_gen_randEv+0x196>
  40700b:	b8 00 00 00 00       	mov    $0x0,%eax
  407010:	48 31 c2             	xor    %rax,%rdx
  407013:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  407017:	48 89 90 78 13 00 00 	mov    %rdx,0x1378(%rax)
		       ^ ((__y & 0x01) ? __a : 0));
      _M_p = 0;
  40701e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  407022:	48 c7 80 80 13 00 00 	movq   $0x0,0x1380(%rax)
  407029:	00 00 00 00 
    }
  40702d:	5d                   	pop    %rbp
  40702e:	c3                   	retq   

000000000040702f <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  40702f:	55                   	push   %rbp
  407030:	48 89 e5             	mov    %rsp,%rbp
  407033:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  407037:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40703b:	5d                   	pop    %rbp
  40703c:	c3                   	retq   
  40703d:	90                   	nop

000000000040703e <_ZNSt6vectorImSaImEE12emplace_backIImEEEvDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
  40703e:	55                   	push   %rbp
  40703f:	48 89 e5             	mov    %rsp,%rbp
  407042:	48 83 ec 10          	sub    $0x10,%rsp
  407046:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40704a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  40704e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407052:	48 8b 50 08          	mov    0x8(%rax),%rdx
  407056:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40705a:	48 8b 40 10          	mov    0x10(%rax),%rax
  40705e:	48 39 c2             	cmp    %rax,%rdx
  407061:	74 3c                	je     40709f <_ZNSt6vectorImSaImEE12emplace_backIImEEEvDpOT_+0x61>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
				     std::forward<_Args>(__args)...);
  407063:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407067:	48 89 c7             	mov    %rax,%rdi
  40706a:	e8 c0 ff ff ff       	callq  40702f <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
  40706f:	48 89 c2             	mov    %rax,%rdx
  407072:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407076:	48 8b 48 08          	mov    0x8(%rax),%rcx
  40707a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      vector<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
  40707e:	48 89 ce             	mov    %rcx,%rsi
  407081:	48 89 c7             	mov    %rax,%rdi
  407084:	e8 2c 14 00 00       	callq  4084b5 <_ZNSt16allocator_traitsISaImEE9constructImImEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS0_PT_DpOS3_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
  407089:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40708d:	48 8b 40 08          	mov    0x8(%rax),%rax
  407091:	48 8d 50 08          	lea    0x8(%rax),%rdx
  407095:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407099:	48 89 50 08          	mov    %rdx,0x8(%rax)
  40709d:	eb 1e                	jmp    4070bd <_ZNSt6vectorImSaImEE12emplace_backIImEEEvDpOT_+0x7f>
	  }
	else
	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
  40709f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4070a3:	48 89 c7             	mov    %rax,%rdi
  4070a6:	e8 84 ff ff ff       	callq  40702f <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
  4070ab:	48 89 c2             	mov    %rax,%rdx
  4070ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4070b2:	48 89 d6             	mov    %rdx,%rsi
  4070b5:	48 89 c7             	mov    %rax,%rdi
  4070b8:	e8 31 14 00 00       	callq  4084ee <_ZNSt6vectorImSaImEE19_M_emplace_back_auxIImEEEvDpOT_>
      }
  4070bd:	c9                   	leaveq 
  4070be:	c3                   	retq   
  4070bf:	90                   	nop

00000000004070c0 <_ZNSt22_Maybe_get_result_typeILb0EN7barrier35centralized_sense_reversing_barrierEEC1Ev>:

_GLIBCXX_HAS_NESTED_TYPE(result_type)

  /// If we have found a result_type, extract it.
  template<bool _Has_result_type, typename _Functor>
    struct _Maybe_get_result_type
  4070c0:	55                   	push   %rbp
  4070c1:	48 89 e5             	mov    %rsp,%rbp
  4070c4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4070c8:	5d                   	pop    %rbp
  4070c9:	c3                   	retq   

00000000004070ca <_ZNSt22_Weak_result_type_implIN7barrier35centralized_sense_reversing_barrierEEC1Ev>:
  /**
   *  Base class for any function object that has a weak result type, as
   *  defined in 3.3/3 of TR1.
  */
  template<typename _Functor>
    struct _Weak_result_type_impl
  4070ca:	55                   	push   %rbp
  4070cb:	48 89 e5             	mov    %rsp,%rbp
  4070ce:	48 83 ec 10          	sub    $0x10,%rsp
  4070d2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4070d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4070da:	48 89 c7             	mov    %rax,%rdi
  4070dd:	e8 de ff ff ff       	callq  4070c0 <_ZNSt22_Maybe_get_result_typeILb0EN7barrier35centralized_sense_reversing_barrierEEC1Ev>
  4070e2:	c9                   	leaveq 
  4070e3:	c3                   	retq   

00000000004070e4 <_ZNSt17_Weak_result_typeIN7barrier35centralized_sense_reversing_barrierEEC1Ev>:
  /**
   *  Strip top-level cv-qualifiers from the function object and let
   *  _Weak_result_type_impl perform the real work.
  */
  template<typename _Functor>
    struct _Weak_result_type
  4070e4:	55                   	push   %rbp
  4070e5:	48 89 e5             	mov    %rsp,%rbp
  4070e8:	48 83 ec 10          	sub    $0x10,%rsp
  4070ec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4070f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4070f4:	48 89 c7             	mov    %rax,%rdi
  4070f7:	e8 ce ff ff ff       	callq  4070ca <_ZNSt22_Weak_result_type_implIN7barrier35centralized_sense_reversing_barrierEEC1Ev>
  4070fc:	c9                   	leaveq 
  4070fd:	c3                   	retq   

00000000004070fe <_ZNSt28_Reference_wrapper_base_implILb0ELb0EN7barrier35centralized_sense_reversing_barrierEEC1Ev>:
  template<bool _Unary, bool _Binary, typename _Tp>
    struct _Reference_wrapper_base_impl;

  // None of the nested argument types.
  template<typename _Tp>
    struct _Reference_wrapper_base_impl<false, false, _Tp>
  4070fe:	55                   	push   %rbp
  4070ff:	48 89 e5             	mov    %rsp,%rbp
  407102:	48 83 ec 10          	sub    $0x10,%rsp
  407106:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40710a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40710e:	48 89 c7             	mov    %rax,%rdi
  407111:	e8 ce ff ff ff       	callq  4070e4 <_ZNSt17_Weak_result_typeIN7barrier35centralized_sense_reversing_barrierEEC1Ev>
  407116:	c9                   	leaveq 
  407117:	c3                   	retq   

0000000000407118 <_ZNSt23_Reference_wrapper_baseIN7barrier35centralized_sense_reversing_barrierEEC1Ev>:
   *  can. Specializations handle all of the easy cases. The primary
   *  template determines what to do with a class type, which may
   *  derive from both unary_function and binary_function.
  */
  template<typename _Tp>
    struct _Reference_wrapper_base
  407118:	55                   	push   %rbp
  407119:	48 89 e5             	mov    %rsp,%rbp
  40711c:	48 83 ec 10          	sub    $0x10,%rsp
  407120:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407124:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407128:	48 89 c7             	mov    %rax,%rdi
  40712b:	e8 ce ff ff ff       	callq  4070fe <_ZNSt28_Reference_wrapper_base_implILb0ELb0EN7barrier35centralized_sense_reversing_barrierEEC1Ev>
  407130:	c9                   	leaveq 
  407131:	c3                   	retq   

0000000000407132 <_ZNSt17reference_wrapperIN7barrier35centralized_sense_reversing_barrierEEC1ERS1_>:
      _Tp* _M_data;

    public:
      typedef _Tp type;

      reference_wrapper(_Tp& __indata) noexcept
  407132:	55                   	push   %rbp
  407133:	48 89 e5             	mov    %rsp,%rbp
  407136:	48 83 ec 10          	sub    $0x10,%rsp
  40713a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40713e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_data(std::__addressof(__indata))
  407142:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407146:	48 89 c7             	mov    %rax,%rdi
  407149:	e8 ca ff ff ff       	callq  407118 <_ZNSt23_Reference_wrapper_baseIN7barrier35centralized_sense_reversing_barrierEEC1Ev>
  40714e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407152:	48 89 c7             	mov    %rax,%rdi
  407155:	e8 7e 15 00 00       	callq  4086d8 <_ZSt11__addressofIN7barrier35centralized_sense_reversing_barrierEEPT_RS2_>
  40715a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40715e:	48 89 02             	mov    %rax,(%rdx)
      { }
  407161:	c9                   	leaveq 
  407162:	c3                   	retq   
  407163:	90                   	nop

0000000000407164 <_ZNSt17reference_wrapperIN7barrier35centralized_sense_reversing_barrierEEC1ERKS2_>:

      reference_wrapper(_Tp&&) = delete;

      reference_wrapper(const reference_wrapper<_Tp>& __inref) noexcept
  407164:	55                   	push   %rbp
  407165:	48 89 e5             	mov    %rsp,%rbp
  407168:	48 83 ec 10          	sub    $0x10,%rsp
  40716c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407170:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_data(__inref._M_data)
  407174:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407178:	48 89 c7             	mov    %rax,%rdi
  40717b:	e8 98 ff ff ff       	callq  407118 <_ZNSt23_Reference_wrapper_baseIN7barrier35centralized_sense_reversing_barrierEEC1Ev>
  407180:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407184:	48 8b 10             	mov    (%rax),%rdx
  407187:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40718b:	48 89 10             	mov    %rdx,(%rax)
      { }
  40718e:	c9                   	leaveq 
  40718f:	c3                   	retq   

0000000000407190 <_ZNSt22_Maybe_get_result_typeILb0ESt6atomicIbEEC1Ev>:

_GLIBCXX_HAS_NESTED_TYPE(result_type)

  /// If we have found a result_type, extract it.
  template<bool _Has_result_type, typename _Functor>
    struct _Maybe_get_result_type
  407190:	55                   	push   %rbp
  407191:	48 89 e5             	mov    %rsp,%rbp
  407194:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407198:	5d                   	pop    %rbp
  407199:	c3                   	retq   

000000000040719a <_ZNSt22_Weak_result_type_implISt6atomicIbEEC1Ev>:
  /**
   *  Base class for any function object that has a weak result type, as
   *  defined in 3.3/3 of TR1.
  */
  template<typename _Functor>
    struct _Weak_result_type_impl
  40719a:	55                   	push   %rbp
  40719b:	48 89 e5             	mov    %rsp,%rbp
  40719e:	48 83 ec 10          	sub    $0x10,%rsp
  4071a2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4071a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4071aa:	48 89 c7             	mov    %rax,%rdi
  4071ad:	e8 de ff ff ff       	callq  407190 <_ZNSt22_Maybe_get_result_typeILb0ESt6atomicIbEEC1Ev>
  4071b2:	c9                   	leaveq 
  4071b3:	c3                   	retq   

00000000004071b4 <_ZNSt17_Weak_result_typeISt6atomicIbEEC1Ev>:
  /**
   *  Strip top-level cv-qualifiers from the function object and let
   *  _Weak_result_type_impl perform the real work.
  */
  template<typename _Functor>
    struct _Weak_result_type
  4071b4:	55                   	push   %rbp
  4071b5:	48 89 e5             	mov    %rsp,%rbp
  4071b8:	48 83 ec 10          	sub    $0x10,%rsp
  4071bc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4071c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4071c4:	48 89 c7             	mov    %rax,%rdi
  4071c7:	e8 ce ff ff ff       	callq  40719a <_ZNSt22_Weak_result_type_implISt6atomicIbEEC1Ev>
  4071cc:	c9                   	leaveq 
  4071cd:	c3                   	retq   

00000000004071ce <_ZNSt28_Reference_wrapper_base_implILb0ELb0ESt6atomicIbEEC1Ev>:
  template<bool _Unary, bool _Binary, typename _Tp>
    struct _Reference_wrapper_base_impl;

  // None of the nested argument types.
  template<typename _Tp>
    struct _Reference_wrapper_base_impl<false, false, _Tp>
  4071ce:	55                   	push   %rbp
  4071cf:	48 89 e5             	mov    %rsp,%rbp
  4071d2:	48 83 ec 10          	sub    $0x10,%rsp
  4071d6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4071da:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4071de:	48 89 c7             	mov    %rax,%rdi
  4071e1:	e8 ce ff ff ff       	callq  4071b4 <_ZNSt17_Weak_result_typeISt6atomicIbEEC1Ev>
  4071e6:	c9                   	leaveq 
  4071e7:	c3                   	retq   

00000000004071e8 <_ZNSt23_Reference_wrapper_baseISt6atomicIbEEC1Ev>:
   *  can. Specializations handle all of the easy cases. The primary
   *  template determines what to do with a class type, which may
   *  derive from both unary_function and binary_function.
  */
  template<typename _Tp>
    struct _Reference_wrapper_base
  4071e8:	55                   	push   %rbp
  4071e9:	48 89 e5             	mov    %rsp,%rbp
  4071ec:	48 83 ec 10          	sub    $0x10,%rsp
  4071f0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4071f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4071f8:	48 89 c7             	mov    %rax,%rdi
  4071fb:	e8 ce ff ff ff       	callq  4071ce <_ZNSt28_Reference_wrapper_base_implILb0ELb0ESt6atomicIbEEC1Ev>
  407200:	c9                   	leaveq 
  407201:	c3                   	retq   

0000000000407202 <_ZNSt17reference_wrapperISt6atomicIbEEC1ERS1_>:
      _Tp* _M_data;

    public:
      typedef _Tp type;

      reference_wrapper(_Tp& __indata) noexcept
  407202:	55                   	push   %rbp
  407203:	48 89 e5             	mov    %rsp,%rbp
  407206:	48 83 ec 10          	sub    $0x10,%rsp
  40720a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40720e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_data(std::__addressof(__indata))
  407212:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407216:	48 89 c7             	mov    %rax,%rdi
  407219:	e8 ca ff ff ff       	callq  4071e8 <_ZNSt23_Reference_wrapper_baseISt6atomicIbEEC1Ev>
  40721e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407222:	48 89 c7             	mov    %rax,%rdi
  407225:	e8 bc 14 00 00       	callq  4086e6 <_ZSt11__addressofISt6atomicIbEEPT_RS2_>
  40722a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40722e:	48 89 02             	mov    %rax,(%rdx)
      { }
  407231:	c9                   	leaveq 
  407232:	c3                   	retq   
  407233:	90                   	nop

0000000000407234 <_ZNSt17reference_wrapperISt6atomicIbEEC1ERKS2_>:

      reference_wrapper(_Tp&&) = delete;

      reference_wrapper(const reference_wrapper<_Tp>& __inref) noexcept
  407234:	55                   	push   %rbp
  407235:	48 89 e5             	mov    %rsp,%rbp
  407238:	48 83 ec 10          	sub    $0x10,%rsp
  40723c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407240:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_data(__inref._M_data)
  407244:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407248:	48 89 c7             	mov    %rax,%rdi
  40724b:	e8 98 ff ff ff       	callq  4071e8 <_ZNSt23_Reference_wrapper_baseISt6atomicIbEEC1Ev>
  407250:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407254:	48 8b 10             	mov    (%rax),%rdx
  407257:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40725b:	48 89 10             	mov    %rdx,(%rax)
      { }
  40725e:	c9                   	leaveq 
  40725f:	c3                   	retq   

0000000000407260 <_ZNSt11_Tuple_implILm4EISt17reference_wrapperISt6atomicIbEEEE7_M_tailERS4_>:

      static constexpr const _Head&
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr _Inherited&
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
  407260:	55                   	push   %rbp
  407261:	48 89 e5             	mov    %rsp,%rbp
  407264:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407268:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40726c:	5d                   	pop    %rbp
  40726d:	c3                   	retq   

000000000040726e <_ZSt4moveIRSt11_Tuple_implILm5EIEEEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
  40726e:	55                   	push   %rbp
  40726f:	48 89 e5             	mov    %rsp,%rbp
  407272:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  407276:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40727a:	5d                   	pop    %rbp
  40727b:	c3                   	retq   

000000000040727c <_ZNSt10_Head_baseILm4ESt17reference_wrapperISt6atomicIbEELb0EE7_M_headERS4_>:
      template<typename _Alloc, typename _UHead>
	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
  40727c:	55                   	push   %rbp
  40727d:	48 89 e5             	mov    %rsp,%rbp
  407280:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407284:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407288:	5d                   	pop    %rbp
  407289:	c3                   	retq   

000000000040728a <_ZNSt11_Tuple_implILm4EISt17reference_wrapperISt6atomicIbEEEE7_M_headERS4_>:

      typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
      typedef _Head_base<_Idx, _Head, __empty_not_final<_Head>::value> _Base;

      static constexpr _Head&  
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
  40728a:	55                   	push   %rbp
  40728b:	48 89 e5             	mov    %rsp,%rbp
  40728e:	48 83 ec 10          	sub    $0x10,%rsp
  407292:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407296:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40729a:	48 89 c7             	mov    %rax,%rdi
  40729d:	e8 da ff ff ff       	callq  40727c <_ZNSt10_Head_baseILm4ESt17reference_wrapperISt6atomicIbEELb0EE7_M_headERS4_>
  4072a2:	c9                   	leaveq 
  4072a3:	c3                   	retq   

00000000004072a4 <_ZNSt10_Head_baseILm4ESt17reference_wrapperISt6atomicIbEELb0EEC1IS3_vEEOT_>:
      : _M_head_impl(__h) { }

      template<typename _UHead, typename = typename
	       enable_if<!is_convertible<_UHead,
	                                 __uses_alloc_base>::value>::type>
        constexpr _Head_base(_UHead&& __h)
  4072a4:	55                   	push   %rbp
  4072a5:	48 89 e5             	mov    %rsp,%rbp
  4072a8:	48 83 ec 10          	sub    $0x10,%rsp
  4072ac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4072b0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
  4072b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4072b8:	48 89 c7             	mov    %rax,%rdi
  4072bb:	e8 57 e6 ff ff       	callq  405917 <_ZSt7forwardISt17reference_wrapperISt6atomicIbEEEOT_RNSt16remove_referenceIS4_E4typeE>
  4072c0:	48 89 c2             	mov    %rax,%rdx
  4072c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4072c7:	48 89 d6             	mov    %rdx,%rsi
  4072ca:	48 89 c7             	mov    %rax,%rdi
  4072cd:	e8 62 ff ff ff       	callq  407234 <_ZNSt17reference_wrapperISt6atomicIbEEC1ERKS2_>
  4072d2:	c9                   	leaveq 
  4072d3:	c3                   	retq   

00000000004072d4 <_ZNSt11_Tuple_implILm4EISt17reference_wrapperISt6atomicIbEEEEC1EOS4_>:
	  _Base(std::forward<_UHead>(__head)) { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;

      constexpr
      _Tuple_impl(_Tuple_impl&& __in)
  4072d4:	55                   	push   %rbp
  4072d5:	48 89 e5             	mov    %rsp,%rbp
  4072d8:	48 83 ec 10          	sub    $0x10,%rsp
  4072dc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4072e0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      noexcept(__and_<is_nothrow_move_constructible<_Head>,
	              is_nothrow_move_constructible<_Inherited>>::value)
      : _Inherited(std::move(_M_tail(__in))), 
  4072e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4072e8:	48 89 c7             	mov    %rax,%rdi
  4072eb:	e8 70 ff ff ff       	callq  407260 <_ZNSt11_Tuple_implILm4EISt17reference_wrapperISt6atomicIbEEEE7_M_tailERS4_>
  4072f0:	48 89 c7             	mov    %rax,%rdi
  4072f3:	e8 76 ff ff ff       	callq  40726e <_ZSt4moveIRSt11_Tuple_implILm5EIEEEONSt16remove_referenceIT_E4typeEOS4_>
	_Base(std::forward<_Head>(_M_head(__in))) { }
  4072f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4072fc:	48 89 c7             	mov    %rax,%rdi
  4072ff:	e8 86 ff ff ff       	callq  40728a <_ZNSt11_Tuple_implILm4EISt17reference_wrapperISt6atomicIbEEEE7_M_headERS4_>
  407304:	48 89 c7             	mov    %rax,%rdi
  407307:	e8 0b e6 ff ff       	callq  405917 <_ZSt7forwardISt17reference_wrapperISt6atomicIbEEEOT_RNSt16remove_referenceIS4_E4typeE>
  40730c:	48 89 c2             	mov    %rax,%rdx
  40730f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407313:	48 89 d6             	mov    %rdx,%rsi
  407316:	48 89 c7             	mov    %rax,%rdi
  407319:	e8 86 ff ff ff       	callq  4072a4 <_ZNSt10_Head_baseILm4ESt17reference_wrapperISt6atomicIbEELb0EEC1IS3_vEEOT_>
  40731e:	c9                   	leaveq 
  40731f:	c3                   	retq   

0000000000407320 <_ZNSt11_Tuple_implILm3EImSt17reference_wrapperISt6atomicIbEEEE7_M_tailERS4_>:

      static constexpr const _Head&
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr _Inherited&
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
  407320:	55                   	push   %rbp
  407321:	48 89 e5             	mov    %rsp,%rbp
  407324:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407328:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40732c:	5d                   	pop    %rbp
  40732d:	c3                   	retq   

000000000040732e <_ZSt4moveIRSt11_Tuple_implILm4EISt17reference_wrapperISt6atomicIbEEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
  40732e:	55                   	push   %rbp
  40732f:	48 89 e5             	mov    %rsp,%rbp
  407332:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  407336:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40733a:	5d                   	pop    %rbp
  40733b:	c3                   	retq   

000000000040733c <_ZNSt10_Head_baseILm3EmLb0EE7_M_headERS0_>:
      template<typename _Alloc, typename _UHead>
	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
  40733c:	55                   	push   %rbp
  40733d:	48 89 e5             	mov    %rsp,%rbp
  407340:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407344:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407348:	5d                   	pop    %rbp
  407349:	c3                   	retq   

000000000040734a <_ZNSt11_Tuple_implILm3EImSt17reference_wrapperISt6atomicIbEEEE7_M_headERS4_>:

      typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
      typedef _Head_base<_Idx, _Head, __empty_not_final<_Head>::value> _Base;

      static constexpr _Head&  
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
  40734a:	55                   	push   %rbp
  40734b:	48 89 e5             	mov    %rsp,%rbp
  40734e:	48 83 ec 10          	sub    $0x10,%rsp
  407352:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407356:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40735a:	48 83 c0 08          	add    $0x8,%rax
  40735e:	48 89 c7             	mov    %rax,%rdi
  407361:	e8 d6 ff ff ff       	callq  40733c <_ZNSt10_Head_baseILm3EmLb0EE7_M_headERS0_>
  407366:	c9                   	leaveq 
  407367:	c3                   	retq   

0000000000407368 <_ZNSt10_Head_baseILm3EmLb0EEC1ImvEEOT_>:
      : _M_head_impl(__h) { }

      template<typename _UHead, typename = typename
	       enable_if<!is_convertible<_UHead,
	                                 __uses_alloc_base>::value>::type>
        constexpr _Head_base(_UHead&& __h)
  407368:	55                   	push   %rbp
  407369:	48 89 e5             	mov    %rsp,%rbp
  40736c:	48 83 ec 10          	sub    $0x10,%rsp
  407370:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407374:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
  407378:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40737c:	48 89 c7             	mov    %rax,%rdi
  40737f:	e8 ab fc ff ff       	callq  40702f <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
  407384:	48 8b 10             	mov    (%rax),%rdx
  407387:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40738b:	48 89 10             	mov    %rdx,(%rax)
  40738e:	c9                   	leaveq 
  40738f:	c3                   	retq   

0000000000407390 <_ZNSt11_Tuple_implILm3EImSt17reference_wrapperISt6atomicIbEEEEC1EOS4_>:
	  _Base(std::forward<_UHead>(__head)) { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;

      constexpr
      _Tuple_impl(_Tuple_impl&& __in)
  407390:	55                   	push   %rbp
  407391:	48 89 e5             	mov    %rsp,%rbp
  407394:	48 83 ec 10          	sub    $0x10,%rsp
  407398:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40739c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      noexcept(__and_<is_nothrow_move_constructible<_Head>,
	              is_nothrow_move_constructible<_Inherited>>::value)
      : _Inherited(std::move(_M_tail(__in))), 
  4073a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4073a4:	48 89 c7             	mov    %rax,%rdi
  4073a7:	e8 74 ff ff ff       	callq  407320 <_ZNSt11_Tuple_implILm3EImSt17reference_wrapperISt6atomicIbEEEE7_M_tailERS4_>
  4073ac:	48 89 c7             	mov    %rax,%rdi
  4073af:	e8 7a ff ff ff       	callq  40732e <_ZSt4moveIRSt11_Tuple_implILm4EISt17reference_wrapperISt6atomicIbEEEEEONSt16remove_referenceIT_E4typeEOS8_>
  4073b4:	48 89 c2             	mov    %rax,%rdx
	_Base(std::forward<_Head>(_M_head(__in))) { }
  4073b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4073bb:	48 89 d6             	mov    %rdx,%rsi
  4073be:	48 89 c7             	mov    %rax,%rdi
  4073c1:	e8 0e ff ff ff       	callq  4072d4 <_ZNSt11_Tuple_implILm4EISt17reference_wrapperISt6atomicIbEEEEC1EOS4_>
  4073c6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4073ca:	48 89 c7             	mov    %rax,%rdi
  4073cd:	e8 78 ff ff ff       	callq  40734a <_ZNSt11_Tuple_implILm3EImSt17reference_wrapperISt6atomicIbEEEE7_M_headERS4_>
  4073d2:	48 89 c7             	mov    %rax,%rdi
  4073d5:	e8 55 fc ff ff       	callq  40702f <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
  4073da:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4073de:	48 83 c2 08          	add    $0x8,%rdx
  4073e2:	48 89 c6             	mov    %rax,%rsi
  4073e5:	48 89 d7             	mov    %rdx,%rdi
  4073e8:	e8 7b ff ff ff       	callq  407368 <_ZNSt10_Head_baseILm3EmLb0EEC1ImvEEOT_>
  4073ed:	c9                   	leaveq 
  4073ee:	c3                   	retq   

00000000004073ef <_ZNSt11_Tuple_implILm2EImmSt17reference_wrapperISt6atomicIbEEEE7_M_tailERS4_>:

      static constexpr const _Head&
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr _Inherited&
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
  4073ef:	55                   	push   %rbp
  4073f0:	48 89 e5             	mov    %rsp,%rbp
  4073f3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4073f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4073fb:	5d                   	pop    %rbp
  4073fc:	c3                   	retq   

00000000004073fd <_ZSt4moveIRSt11_Tuple_implILm3EImSt17reference_wrapperISt6atomicIbEEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
  4073fd:	55                   	push   %rbp
  4073fe:	48 89 e5             	mov    %rsp,%rbp
  407401:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  407405:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407409:	5d                   	pop    %rbp
  40740a:	c3                   	retq   

000000000040740b <_ZNSt10_Head_baseILm2EmLb0EE7_M_headERS0_>:
      template<typename _Alloc, typename _UHead>
	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
  40740b:	55                   	push   %rbp
  40740c:	48 89 e5             	mov    %rsp,%rbp
  40740f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407413:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407417:	5d                   	pop    %rbp
  407418:	c3                   	retq   

0000000000407419 <_ZNSt11_Tuple_implILm2EImmSt17reference_wrapperISt6atomicIbEEEE7_M_headERS4_>:

      typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
      typedef _Head_base<_Idx, _Head, __empty_not_final<_Head>::value> _Base;

      static constexpr _Head&  
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
  407419:	55                   	push   %rbp
  40741a:	48 89 e5             	mov    %rsp,%rbp
  40741d:	48 83 ec 10          	sub    $0x10,%rsp
  407421:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407425:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407429:	48 83 c0 10          	add    $0x10,%rax
  40742d:	48 89 c7             	mov    %rax,%rdi
  407430:	e8 d6 ff ff ff       	callq  40740b <_ZNSt10_Head_baseILm2EmLb0EE7_M_headERS0_>
  407435:	c9                   	leaveq 
  407436:	c3                   	retq   
  407437:	90                   	nop

0000000000407438 <_ZNSt10_Head_baseILm2EmLb0EEC1ImvEEOT_>:
      : _M_head_impl(__h) { }

      template<typename _UHead, typename = typename
	       enable_if<!is_convertible<_UHead,
	                                 __uses_alloc_base>::value>::type>
        constexpr _Head_base(_UHead&& __h)
  407438:	55                   	push   %rbp
  407439:	48 89 e5             	mov    %rsp,%rbp
  40743c:	48 83 ec 10          	sub    $0x10,%rsp
  407440:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407444:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
  407448:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40744c:	48 89 c7             	mov    %rax,%rdi
  40744f:	e8 db fb ff ff       	callq  40702f <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
  407454:	48 8b 10             	mov    (%rax),%rdx
  407457:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40745b:	48 89 10             	mov    %rdx,(%rax)
  40745e:	c9                   	leaveq 
  40745f:	c3                   	retq   

0000000000407460 <_ZNSt11_Tuple_implILm2EImmSt17reference_wrapperISt6atomicIbEEEEC1EOS4_>:
	  _Base(std::forward<_UHead>(__head)) { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;

      constexpr
      _Tuple_impl(_Tuple_impl&& __in)
  407460:	55                   	push   %rbp
  407461:	48 89 e5             	mov    %rsp,%rbp
  407464:	48 83 ec 10          	sub    $0x10,%rsp
  407468:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40746c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      noexcept(__and_<is_nothrow_move_constructible<_Head>,
	              is_nothrow_move_constructible<_Inherited>>::value)
      : _Inherited(std::move(_M_tail(__in))), 
  407470:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407474:	48 89 c7             	mov    %rax,%rdi
  407477:	e8 73 ff ff ff       	callq  4073ef <_ZNSt11_Tuple_implILm2EImmSt17reference_wrapperISt6atomicIbEEEE7_M_tailERS4_>
  40747c:	48 89 c7             	mov    %rax,%rdi
  40747f:	e8 79 ff ff ff       	callq  4073fd <_ZSt4moveIRSt11_Tuple_implILm3EImSt17reference_wrapperISt6atomicIbEEEEEONSt16remove_referenceIT_E4typeEOS8_>
  407484:	48 89 c2             	mov    %rax,%rdx
	_Base(std::forward<_Head>(_M_head(__in))) { }
  407487:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40748b:	48 89 d6             	mov    %rdx,%rsi
  40748e:	48 89 c7             	mov    %rax,%rdi
  407491:	e8 fa fe ff ff       	callq  407390 <_ZNSt11_Tuple_implILm3EImSt17reference_wrapperISt6atomicIbEEEEC1EOS4_>
  407496:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40749a:	48 89 c7             	mov    %rax,%rdi
  40749d:	e8 77 ff ff ff       	callq  407419 <_ZNSt11_Tuple_implILm2EImmSt17reference_wrapperISt6atomicIbEEEE7_M_headERS4_>
  4074a2:	48 89 c7             	mov    %rax,%rdi
  4074a5:	e8 85 fb ff ff       	callq  40702f <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
  4074aa:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4074ae:	48 83 c2 10          	add    $0x10,%rdx
  4074b2:	48 89 c6             	mov    %rax,%rsi
  4074b5:	48 89 d7             	mov    %rdx,%rdi
  4074b8:	e8 7b ff ff ff       	callq  407438 <_ZNSt10_Head_baseILm2EmLb0EEC1ImvEEOT_>
  4074bd:	c9                   	leaveq 
  4074be:	c3                   	retq   

00000000004074bf <_ZNSt11_Tuple_implILm1EISt17reference_wrapperIN7barrier35centralized_sense_reversing_barrierEEmmS0_ISt6atomicIbEEEE7_M_tailERS7_>:

      static constexpr const _Head&
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr _Inherited&
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
  4074bf:	55                   	push   %rbp
  4074c0:	48 89 e5             	mov    %rsp,%rbp
  4074c3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4074c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4074cb:	5d                   	pop    %rbp
  4074cc:	c3                   	retq   

00000000004074cd <_ZSt4moveIRSt11_Tuple_implILm2EImmSt17reference_wrapperISt6atomicIbEEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
  4074cd:	55                   	push   %rbp
  4074ce:	48 89 e5             	mov    %rsp,%rbp
  4074d1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  4074d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4074d9:	5d                   	pop    %rbp
  4074da:	c3                   	retq   

00000000004074db <_ZNSt10_Head_baseILm1ESt17reference_wrapperIN7barrier35centralized_sense_reversing_barrierEELb0EE7_M_headERS4_>:
      template<typename _Alloc, typename _UHead>
	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
  4074db:	55                   	push   %rbp
  4074dc:	48 89 e5             	mov    %rsp,%rbp
  4074df:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4074e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4074e7:	5d                   	pop    %rbp
  4074e8:	c3                   	retq   

00000000004074e9 <_ZNSt11_Tuple_implILm1EISt17reference_wrapperIN7barrier35centralized_sense_reversing_barrierEEmmS0_ISt6atomicIbEEEE7_M_headERS7_>:

      typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
      typedef _Head_base<_Idx, _Head, __empty_not_final<_Head>::value> _Base;

      static constexpr _Head&  
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
  4074e9:	55                   	push   %rbp
  4074ea:	48 89 e5             	mov    %rsp,%rbp
  4074ed:	48 83 ec 10          	sub    $0x10,%rsp
  4074f1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4074f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4074f9:	48 83 c0 18          	add    $0x18,%rax
  4074fd:	48 89 c7             	mov    %rax,%rdi
  407500:	e8 d6 ff ff ff       	callq  4074db <_ZNSt10_Head_baseILm1ESt17reference_wrapperIN7barrier35centralized_sense_reversing_barrierEELb0EE7_M_headERS4_>
  407505:	c9                   	leaveq 
  407506:	c3                   	retq   
  407507:	90                   	nop

0000000000407508 <_ZNSt10_Head_baseILm1ESt17reference_wrapperIN7barrier35centralized_sense_reversing_barrierEELb0EEC1IS3_vEEOT_>:
      : _M_head_impl(__h) { }

      template<typename _UHead, typename = typename
	       enable_if<!is_convertible<_UHead,
	                                 __uses_alloc_base>::value>::type>
        constexpr _Head_base(_UHead&& __h)
  407508:	55                   	push   %rbp
  407509:	48 89 e5             	mov    %rsp,%rbp
  40750c:	48 83 ec 10          	sub    $0x10,%rsp
  407510:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407514:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
  407518:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40751c:	48 89 c7             	mov    %rax,%rdi
  40751f:	e8 c9 e3 ff ff       	callq  4058ed <_ZSt7forwardISt17reference_wrapperIN7barrier35centralized_sense_reversing_barrierEEEOT_RNSt16remove_referenceIS4_E4typeE>
  407524:	48 89 c2             	mov    %rax,%rdx
  407527:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40752b:	48 89 d6             	mov    %rdx,%rsi
  40752e:	48 89 c7             	mov    %rax,%rdi
  407531:	e8 2e fc ff ff       	callq  407164 <_ZNSt17reference_wrapperIN7barrier35centralized_sense_reversing_barrierEEC1ERKS2_>
  407536:	c9                   	leaveq 
  407537:	c3                   	retq   

0000000000407538 <_ZNSt11_Tuple_implILm1EISt17reference_wrapperIN7barrier35centralized_sense_reversing_barrierEEmmS0_ISt6atomicIbEEEEC1EOS7_>:
	  _Base(std::forward<_UHead>(__head)) { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;

      constexpr
      _Tuple_impl(_Tuple_impl&& __in)
  407538:	55                   	push   %rbp
  407539:	48 89 e5             	mov    %rsp,%rbp
  40753c:	48 83 ec 10          	sub    $0x10,%rsp
  407540:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407544:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      noexcept(__and_<is_nothrow_move_constructible<_Head>,
	              is_nothrow_move_constructible<_Inherited>>::value)
      : _Inherited(std::move(_M_tail(__in))), 
  407548:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40754c:	48 89 c7             	mov    %rax,%rdi
  40754f:	e8 6b ff ff ff       	callq  4074bf <_ZNSt11_Tuple_implILm1EISt17reference_wrapperIN7barrier35centralized_sense_reversing_barrierEEmmS0_ISt6atomicIbEEEE7_M_tailERS7_>
  407554:	48 89 c7             	mov    %rax,%rdi
  407557:	e8 71 ff ff ff       	callq  4074cd <_ZSt4moveIRSt11_Tuple_implILm2EImmSt17reference_wrapperISt6atomicIbEEEEEONSt16remove_referenceIT_E4typeEOS8_>
  40755c:	48 89 c2             	mov    %rax,%rdx
	_Base(std::forward<_Head>(_M_head(__in))) { }
  40755f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407563:	48 89 d6             	mov    %rdx,%rsi
  407566:	48 89 c7             	mov    %rax,%rdi
  407569:	e8 f2 fe ff ff       	callq  407460 <_ZNSt11_Tuple_implILm2EImmSt17reference_wrapperISt6atomicIbEEEEC1EOS4_>
  40756e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407572:	48 89 c7             	mov    %rax,%rdi
  407575:	e8 6f ff ff ff       	callq  4074e9 <_ZNSt11_Tuple_implILm1EISt17reference_wrapperIN7barrier35centralized_sense_reversing_barrierEEmmS0_ISt6atomicIbEEEE7_M_headERS7_>
  40757a:	48 89 c7             	mov    %rax,%rdi
  40757d:	e8 6b e3 ff ff       	callq  4058ed <_ZSt7forwardISt17reference_wrapperIN7barrier35centralized_sense_reversing_barrierEEEOT_RNSt16remove_referenceIS4_E4typeE>
  407582:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  407586:	48 83 c2 18          	add    $0x18,%rdx
  40758a:	48 89 c6             	mov    %rax,%rsi
  40758d:	48 89 d7             	mov    %rdx,%rdi
  407590:	e8 73 ff ff ff       	callq  407508 <_ZNSt10_Head_baseILm1ESt17reference_wrapperIN7barrier35centralized_sense_reversing_barrierEELb0EEC1IS3_vEEOT_>
  407595:	c9                   	leaveq 
  407596:	c3                   	retq   

0000000000407597 <_ZSt4moveIRSt11_Tuple_implILm1EISt17reference_wrapperIN7barrier35centralized_sense_reversing_barrierEEmmS1_ISt6atomicIbEEEEEONSt16remove_referenceIT_E4typeEOSB_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
  407597:	55                   	push   %rbp
  407598:	48 89 e5             	mov    %rsp,%rbp
  40759b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  40759f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4075a3:	5d                   	pop    %rbp
  4075a4:	c3                   	retq   
  4075a5:	90                   	nop

00000000004075a6 <_ZNSt11_Tuple_implILm0EIdddEEaSEOS0_>:
	_M_tail(*this) = _M_tail(__in);
	return *this;
      }

      _Tuple_impl&
      operator=(_Tuple_impl&& __in)
  4075a6:	55                   	push   %rbp
  4075a7:	48 89 e5             	mov    %rsp,%rbp
  4075aa:	53                   	push   %rbx
  4075ab:	48 83 ec 18          	sub    $0x18,%rsp
  4075af:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4075b3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      noexcept(__and_<is_nothrow_move_assignable<_Head>,
	              is_nothrow_move_assignable<_Inherited>>::value)
      {
	_M_head(*this) = std::forward<_Head>(_M_head(__in));
  4075b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4075bb:	48 89 c7             	mov    %rax,%rdi
  4075be:	e8 86 cc ff ff       	callq  404249 <_ZNSt11_Tuple_implILm0EIdddEE7_M_headERS0_>
  4075c3:	48 89 c3             	mov    %rax,%rbx
  4075c6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4075ca:	48 89 c7             	mov    %rax,%rdi
  4075cd:	e8 77 cc ff ff       	callq  404249 <_ZNSt11_Tuple_implILm0EIdddEE7_M_headERS0_>
  4075d2:	48 89 c7             	mov    %rax,%rdi
  4075d5:	e8 e4 c8 ff ff       	callq  403ebe <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
  4075da:	48 8b 00             	mov    (%rax),%rax
  4075dd:	48 89 03             	mov    %rax,(%rbx)
	_M_tail(*this) = std::move(_M_tail(__in));
  4075e0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4075e4:	48 89 c7             	mov    %rax,%rdi
  4075e7:	e8 33 cc ff ff       	callq  40421f <_ZNSt11_Tuple_implILm0EIdddEE7_M_tailERS0_>
  4075ec:	48 89 c7             	mov    %rax,%rdi
  4075ef:	e8 39 cc ff ff       	callq  40422d <_ZSt4moveIRSt11_Tuple_implILm1EIddEEEONSt16remove_referenceIT_E4typeEOS4_>
  4075f4:	48 89 c3             	mov    %rax,%rbx
  4075f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4075fb:	48 89 c7             	mov    %rax,%rdi
  4075fe:	e8 1c cc ff ff       	callq  40421f <_ZNSt11_Tuple_implILm0EIdddEE7_M_tailERS0_>
  407603:	48 89 de             	mov    %rbx,%rsi
  407606:	48 89 c7             	mov    %rax,%rdi
  407609:	e8 ba 12 00 00       	callq  4088c8 <_ZNSt11_Tuple_implILm1EIddEEaSEOS0_>
	return *this;
  40760e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
  407612:	48 83 c4 18          	add    $0x18,%rsp
  407616:	5b                   	pop    %rbx
  407617:	5d                   	pop    %rbp
  407618:	c3                   	retq   
  407619:	90                   	nop

000000000040761a <_ZN9__gnu_cxx17__normal_iteratorIPSt5tupleIIdddEESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      typedef typename __traits_type::pointer   	pointer;

      _GLIBCXX_CONSTEXPR __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
  40761a:	55                   	push   %rbp
  40761b:	48 89 e5             	mov    %rsp,%rbp
  40761e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407622:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  407626:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40762a:	48 8b 10             	mov    (%rax),%rdx
  40762d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407631:	48 89 10             	mov    %rdx,(%rax)
  407634:	5d                   	pop    %rbp
  407635:	c3                   	retq   

0000000000407636 <_ZNK9__gnu_cxx17__normal_iteratorIPSt5tupleIIdddEESt6vectorIS2_SaIS2_EEE4baseEv>:
      __normal_iterator
      operator-(const difference_type& __n) const
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const
  407636:	55                   	push   %rbp
  407637:	48 89 e5             	mov    %rsp,%rbp
  40763a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
  40763e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407642:	5d                   	pop    %rbp
  407643:	c3                   	retq   

0000000000407644 <_ZN9__gnu_cxx14__alloc_traitsISaISt6vectorISt5tupleIIdddEESaIS3_EEEE17_S_select_on_copyERKS6_>:
    template<typename _Ptr>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      destroy(_Alloc& __a, _Ptr __p)
      { _Base_type::destroy(__a, std::addressof(*__p)); }

    static _Alloc _S_select_on_copy(const _Alloc& __a)
  407644:	55                   	push   %rbp
  407645:	48 89 e5             	mov    %rsp,%rbp
  407648:	48 83 ec 10          	sub    $0x10,%rsp
  40764c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407650:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return _Base_type::select_on_container_copy_construction(__a); }
  407654:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407658:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40765c:	48 89 d6             	mov    %rdx,%rsi
  40765f:	48 89 c7             	mov    %rax,%rdi
  407662:	e8 d4 12 00 00       	callq  40893b <_ZNSt16allocator_traitsISaISt6vectorISt5tupleIIdddEESaIS2_EEEE37select_on_container_copy_constructionERKS5_>
  407667:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40766b:	c9                   	leaveq 
  40766c:	c3                   	retq   
  40766d:	90                   	nop

000000000040766e <_ZNKSt12_Vector_baseISt6vectorISt5tupleIIdddEESaIS2_EESaIS4_EE19_M_get_Tp_allocatorEv>:

      const _Tp_alloc_type&
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
  40766e:	55                   	push   %rbp
  40766f:	48 89 e5             	mov    %rsp,%rbp
  407672:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
  407676:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40767a:	5d                   	pop    %rbp
  40767b:	c3                   	retq   

000000000040767c <_ZNSaISt6vectorISt5tupleIIdddEESaIS1_EEED1Ev>:

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
  40767c:	55                   	push   %rbp
  40767d:	48 89 e5             	mov    %rsp,%rbp
  407680:	48 83 ec 10          	sub    $0x10,%rsp
  407684:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407688:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40768c:	48 89 c7             	mov    %rax,%rdi
  40768f:	e8 f6 12 00 00       	callq  40898a <_ZN9__gnu_cxx13new_allocatorISt6vectorISt5tupleIIdddEESaIS3_EEED1Ev>
  407694:	c9                   	leaveq 
  407695:	c3                   	retq   

0000000000407696 <_ZNSt12_Vector_baseISt6vectorISt5tupleIIdddEESaIS2_EESaIS4_EEC1EmRKS5_>:

      _Vector_base(size_t __n)
      : _M_impl()
      { _M_create_storage(__n); }

      _Vector_base(size_t __n, const allocator_type& __a)
  407696:	55                   	push   %rbp
  407697:	48 89 e5             	mov    %rsp,%rbp
  40769a:	53                   	push   %rbx
  40769b:	48 83 ec 28          	sub    $0x28,%rsp
  40769f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4076a3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4076a7:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _M_impl(__a)
  4076ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4076af:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4076b3:	48 89 d6             	mov    %rdx,%rsi
  4076b6:	48 89 c7             	mov    %rax,%rdi
  4076b9:	e8 d6 12 00 00       	callq  408994 <_ZNSt12_Vector_baseISt6vectorISt5tupleIIdddEESaIS2_EESaIS4_EE12_Vector_implC1ERKS5_>
      { _M_create_storage(__n); }
  4076be:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4076c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4076c6:	48 89 d6             	mov    %rdx,%rsi
  4076c9:	48 89 c7             	mov    %rax,%rdi
  4076cc:	e8 0b 13 00 00       	callq  4089dc <_ZNSt12_Vector_baseISt6vectorISt5tupleIIdddEESaIS2_EESaIS4_EE17_M_create_storageEm>
  4076d1:	eb 1a                	jmp    4076ed <_ZNSt12_Vector_baseISt6vectorISt5tupleIIdddEESaIS2_EESaIS4_EEC1EmRKS5_+0x57>
  4076d3:	48 89 c3             	mov    %rax,%rbx
      _Vector_base(size_t __n)
      : _M_impl()
      { _M_create_storage(__n); }

      _Vector_base(size_t __n, const allocator_type& __a)
      : _M_impl(__a)
  4076d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4076da:	48 89 c7             	mov    %rax,%rdi
  4076dd:	e8 98 f0 ff ff       	callq  40677a <_ZNSt12_Vector_baseISt6vectorISt5tupleIIdddEESaIS2_EESaIS4_EE12_Vector_implD1Ev>
  4076e2:	48 89 d8             	mov    %rbx,%rax
  4076e5:	48 89 c7             	mov    %rax,%rdi
  4076e8:	e8 33 a2 ff ff       	callq  401920 <_Unwind_Resume@plt>
      { _M_create_storage(__n); }
  4076ed:	48 83 c4 28          	add    $0x28,%rsp
  4076f1:	5b                   	pop    %rbx
  4076f2:	5d                   	pop    %rbp
  4076f3:	c3                   	retq   

00000000004076f4 <_ZNKSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EE5beginEv>:
       *  Returns a read-only (constant) iterator that points to the
       *  first element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      const_iterator
      begin() const _GLIBCXX_NOEXCEPT
  4076f4:	55                   	push   %rbp
  4076f5:	48 89 e5             	mov    %rsp,%rbp
  4076f8:	48 83 ec 20          	sub    $0x20,%rsp
  4076fc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return const_iterator(this->_M_impl._M_start); }
  407700:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407704:	48 8b 00             	mov    (%rax),%rax
  407707:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40770b:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx
  40770f:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  407713:	48 89 d6             	mov    %rdx,%rsi
  407716:	48 89 c7             	mov    %rax,%rdi
  407719:	e8 1e 13 00 00       	callq  408a3c <_ZN9__gnu_cxx17__normal_iteratorIPKSt6vectorISt5tupleIIdddEESaIS3_EES1_IS5_SaIS5_EEEC1ERKS7_>
  40771e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407722:	c9                   	leaveq 
  407723:	c3                   	retq   

0000000000407724 <_ZNKSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EE3endEv>:
       *  Returns a read-only (constant) iterator that points one past
       *  the last element in the %vector.  Iteration is done in
       *  ordinary element order.
       */
      const_iterator
      end() const _GLIBCXX_NOEXCEPT
  407724:	55                   	push   %rbp
  407725:	48 89 e5             	mov    %rsp,%rbp
  407728:	48 83 ec 20          	sub    $0x20,%rsp
  40772c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return const_iterator(this->_M_impl._M_finish); }
  407730:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407734:	48 8b 40 08          	mov    0x8(%rax),%rax
  407738:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40773c:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx
  407740:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  407744:	48 89 d6             	mov    %rdx,%rsi
  407747:	48 89 c7             	mov    %rax,%rdi
  40774a:	e8 ed 12 00 00       	callq  408a3c <_ZN9__gnu_cxx17__normal_iteratorIPKSt6vectorISt5tupleIIdddEESaIS3_EES1_IS5_SaIS5_EEEC1ERKS7_>
  40774f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407753:	c9                   	leaveq 
  407754:	c3                   	retq   

0000000000407755 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt6vectorISt5tupleIIdddEESaIS4_EES2_IS6_SaIS6_EEEEPS6_S6_ET0_T_SE_SD_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
  407755:	55                   	push   %rbp
  407756:	48 89 e5             	mov    %rsp,%rbp
  407759:	48 83 ec 20          	sub    $0x20,%rsp
  40775d:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  407761:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  407765:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  407769:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
  40776d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  407771:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  407775:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407779:	48 89 ce             	mov    %rcx,%rsi
  40777c:	48 89 c7             	mov    %rax,%rdi
  40777f:	e8 d4 12 00 00       	callq  408a58 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorISt5tupleIIdddEESaIS4_EES2_IS6_SaIS6_EEEEPS6_ET0_T_SE_SD_>
  407784:	c9                   	leaveq 
  407785:	c3                   	retq   

0000000000407786 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept = 0;
      
      // Called when _M_weak_count drops to zero.
      virtual void
      _M_destroy() noexcept
  407786:	55                   	push   %rbp
  407787:	48 89 e5             	mov    %rsp,%rbp
  40778a:	48 83 ec 10          	sub    $0x10,%rsp
  40778e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { delete this; }
  407792:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  407797:	74 17                	je     4077b0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv+0x2a>
  407799:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40779d:	48 8b 00             	mov    (%rax),%rax
  4077a0:	48 83 c0 08          	add    $0x8,%rax
  4077a4:	48 8b 00             	mov    (%rax),%rax
  4077a7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4077ab:	48 89 d7             	mov    %rdx,%rdi
  4077ae:	ff d0                	callq  *%rax
  4077b0:	c9                   	leaveq 
  4077b1:	c3                   	retq   

00000000004077b2 <_ZNSt10_Iter_baseIPmLb0EE7_S_baseES0_>:
  // untouched
  template<typename _Iterator, bool _HasBase>
    struct _Iter_base
    {
      typedef _Iterator iterator_type;
      static iterator_type _S_base(_Iterator __it)
  4077b2:	55                   	push   %rbp
  4077b3:	48 89 e5             	mov    %rsp,%rbp
  4077b6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return __it; }
  4077ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4077be:	5d                   	pop    %rbp
  4077bf:	c3                   	retq   

00000000004077c0 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1Ev>:
      {
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl()
  4077c0:	55                   	push   %rbp
  4077c1:	48 89 e5             	mov    %rsp,%rbp
  4077c4:	48 83 ec 10          	sub    $0x10,%rsp
  4077c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
  4077cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4077d0:	48 89 c7             	mov    %rax,%rdi
  4077d3:	e8 02 13 00 00       	callq  408ada <_ZNSaIdEC1Ev>
  4077d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4077dc:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  4077e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4077e7:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  4077ee:	00 
  4077ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4077f3:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  4077fa:	00 
	{ }
  4077fb:	c9                   	leaveq 
  4077fc:	c3                   	retq   
  4077fd:	90                   	nop

00000000004077fe <_ZNSaIdED1Ev>:
  4077fe:	55                   	push   %rbp
  4077ff:	48 89 e5             	mov    %rsp,%rbp
  407802:	48 83 ec 10          	sub    $0x10,%rsp
  407806:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40780a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40780e:	48 89 c7             	mov    %rax,%rdi
  407811:	e8 de 12 00 00       	callq  408af4 <_ZN9__gnu_cxx13new_allocatorIdED1Ev>
  407816:	c9                   	leaveq 
  407817:	c3                   	retq   

0000000000407818 <_ZSt8_DestroyIPdEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
  407818:	55                   	push   %rbp
  407819:	48 89 e5             	mov    %rsp,%rbp
  40781c:	48 83 ec 10          	sub    $0x10,%rsp
  407820:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407824:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
  407828:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40782c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407830:	48 89 d6             	mov    %rdx,%rsi
  407833:	48 89 c7             	mov    %rax,%rdi
  407836:	e8 c3 12 00 00       	callq  408afe <_ZNSt12_Destroy_auxILb1EE9__destroyIPdEEvT_S3_>
	__destroy(__first, __last);
    }
  40783b:	c9                   	leaveq 
  40783c:	c3                   	retq   

000000000040783d <_ZNSt16allocator_traitsISaIdEE8max_sizeERKS0_>:
       *  @return @c __a.max_size() or @c numeric_limits<size_type>::max()
       *
       *  Returns @c __a.max_size() if that expression is well-formed,
       *  otherwise returns @c numeric_limits<size_type>::max()
      */
      static size_type max_size(const _Alloc& __a)
  40783d:	55                   	push   %rbp
  40783e:	48 89 e5             	mov    %rsp,%rbp
  407841:	48 83 ec 10          	sub    $0x10,%rsp
  407845:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_max_size(__a); }
  407849:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40784d:	48 89 c7             	mov    %rax,%rdi
  407850:	e8 b7 12 00 00       	callq  408b0c <_ZNSt16allocator_traitsISaIdEE11_S_max_sizeIKS0_EENSt9enable_ifIXsrNS1_16__maxsize_helperIT_EE5valueEmE4typeERS6_>
  407855:	c9                   	leaveq 
  407856:	c3                   	retq   
  407857:	90                   	nop

0000000000407858 <_ZNKSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>:
      _Tp_alloc_type&
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }

      const _Tp_alloc_type&
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
  407858:	55                   	push   %rbp
  407859:	48 89 e5             	mov    %rsp,%rbp
  40785c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
  407860:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407864:	5d                   	pop    %rbp
  407865:	c3                   	retq   

0000000000407866 <_ZNSt13move_iteratorIPdEC1ES0_>:

      move_iterator()
      : _M_current() { }

      explicit
      move_iterator(iterator_type __i)
  407866:	55                   	push   %rbp
  407867:	48 89 e5             	mov    %rsp,%rbp
  40786a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40786e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
  407872:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407876:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40787a:	48 89 10             	mov    %rdx,(%rax)
  40787d:	5d                   	pop    %rbp
  40787e:	c3                   	retq   
  40787f:	90                   	nop

0000000000407880 <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEm>:

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
  407880:	55                   	push   %rbp
  407881:	48 89 e5             	mov    %rsp,%rbp
  407884:	48 83 ec 10          	sub    $0x10,%rsp
  407888:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40788c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }
  407890:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  407895:	74 1a                	je     4078b1 <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEm+0x31>
  407897:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40789b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40789f:	ba 00 00 00 00       	mov    $0x0,%edx
  4078a4:	48 89 ce             	mov    %rcx,%rsi
  4078a7:	48 89 c7             	mov    %rax,%rdi
  4078aa:	e8 77 12 00 00       	callq  408b26 <_ZN9__gnu_cxx13new_allocatorIdE8allocateEmPKv>
  4078af:	eb 05                	jmp    4078b6 <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEm+0x36>
  4078b1:	b8 00 00 00 00       	mov    $0x0,%eax
  4078b6:	c9                   	leaveq 
  4078b7:	c3                   	retq   

00000000004078b8 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPdES1_dET0_T_S4_S3_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
  4078b8:	55                   	push   %rbp
  4078b9:	48 89 e5             	mov    %rsp,%rbp
  4078bc:	48 83 ec 20          	sub    $0x20,%rsp
  4078c0:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  4078c4:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4078c8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4078cc:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
  4078d0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4078d4:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4078d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4078dc:	48 89 ce             	mov    %rcx,%rsi
  4078df:	48 89 c7             	mov    %rax,%rdi
  4078e2:	e8 81 12 00 00       	callq  408b68 <_ZSt18uninitialized_copyISt13move_iteratorIPdES1_ET0_T_S4_S3_>
  4078e7:	c9                   	leaveq 
  4078e8:	c3                   	retq   
  4078e9:	90                   	nop

00000000004078ea <_ZN9__gnu_cxx13new_allocatorIdE10deallocateEPdm>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
  4078ea:	55                   	push   %rbp
  4078eb:	48 89 e5             	mov    %rsp,%rbp
  4078ee:	48 83 ec 20          	sub    $0x20,%rsp
  4078f2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4078f6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4078fa:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { ::operator delete(__p); }
  4078fe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407902:	48 89 c7             	mov    %rax,%rdi
  407905:	e8 56 9d ff ff       	callq  401660 <_ZdlPv@plt>
  40790a:	c9                   	leaveq 
  40790b:	c3                   	retq   

000000000040790c <_ZNSt16allocator_traitsISaIdEE12_S_constructIdIRKdEEENSt9enable_ifIXsrNS1_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS0_PS7_DpOS8_>:
	};

      template<typename _Tp, typename... _Args>
	static typename
       	enable_if<__construct_helper<_Tp, _Args...>::value, void>::type
       	_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
  40790c:	55                   	push   %rbp
  40790d:	48 89 e5             	mov    %rsp,%rbp
  407910:	48 83 ec 20          	sub    $0x20,%rsp
  407914:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407918:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40791c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
  407920:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407924:	48 89 c7             	mov    %rax,%rdi
  407927:	e8 f0 d7 ff ff       	callq  40511c <_ZSt7forwardIRKdEOT_RNSt16remove_referenceIS2_E4typeE>
  40792c:	48 89 c2             	mov    %rax,%rdx
  40792f:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  407933:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407937:	48 89 ce             	mov    %rcx,%rsi
  40793a:	48 89 c7             	mov    %rax,%rdi
  40793d:	e8 54 12 00 00       	callq  408b96 <_ZN9__gnu_cxx13new_allocatorIdE9constructIdIRKdEEEvPT_DpOT0_>
  407942:	c9                   	leaveq 
  407943:	c3                   	retq   

0000000000407944 <_ZNKSt6vectorIdSaIdEE12_M_check_lenEmPKc>:
        _M_emplace_back_aux(_Args&&... __args);
#endif

      // Called by the latter.
      size_type
      _M_check_len(size_type __n, const char* __s) const
  407944:	55                   	push   %rbp
  407945:	48 89 e5             	mov    %rsp,%rbp
  407948:	53                   	push   %rbx
  407949:	48 83 ec 38          	sub    $0x38,%rsp
  40794d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  407951:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  407955:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      {
	if (max_size() - size() < __n)
  407959:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40795d:	48 89 c7             	mov    %rax,%rdi
  407960:	e8 27 e3 ff ff       	callq  405c8c <_ZNKSt6vectorIdSaIdEE8max_sizeEv>
  407965:	48 89 c3             	mov    %rax,%rbx
  407968:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40796c:	48 89 c7             	mov    %rax,%rdi
  40796f:	e8 22 d8 ff ff       	callq  405196 <_ZNKSt6vectorIdSaIdEE4sizeEv>
  407974:	48 29 c3             	sub    %rax,%rbx
  407977:	48 89 da             	mov    %rbx,%rdx
  40797a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40797e:	48 39 c2             	cmp    %rax,%rdx
  407981:	0f 92 c0             	setb   %al
  407984:	84 c0                	test   %al,%al
  407986:	74 0c                	je     407994 <_ZNKSt6vectorIdSaIdEE12_M_check_lenEmPKc+0x50>
	  __throw_length_error(__N(__s));
  407988:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40798c:	48 89 c7             	mov    %rax,%rdi
  40798f:	e8 7c 9c ff ff       	callq  401610 <_ZSt20__throw_length_errorPKc@plt>

	const size_type __len = size() + std::max(size(), __n);
  407994:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407998:	48 89 c7             	mov    %rax,%rdi
  40799b:	e8 f6 d7 ff ff       	callq  405196 <_ZNKSt6vectorIdSaIdEE4sizeEv>
  4079a0:	48 89 c3             	mov    %rax,%rbx
  4079a3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4079a7:	48 89 c7             	mov    %rax,%rdi
  4079aa:	e8 e7 d7 ff ff       	callq  405196 <_ZNKSt6vectorIdSaIdEE4sizeEv>
  4079af:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  4079b3:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  4079b7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4079bb:	48 89 d6             	mov    %rdx,%rsi
  4079be:	48 89 c7             	mov    %rax,%rdi
  4079c1:	e8 14 12 00 00       	callq  408bda <_ZSt3maxImERKT_S2_S2_>
  4079c6:	48 8b 00             	mov    (%rax),%rax
  4079c9:	48 01 d8             	add    %rbx,%rax
  4079cc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  4079d0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4079d4:	48 89 c7             	mov    %rax,%rdi
  4079d7:	e8 ba d7 ff ff       	callq  405196 <_ZNKSt6vectorIdSaIdEE4sizeEv>
  4079dc:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  4079e0:	77 12                	ja     4079f4 <_ZNKSt6vectorIdSaIdEE12_M_check_lenEmPKc+0xb0>
  4079e2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4079e6:	48 89 c7             	mov    %rax,%rdi
  4079e9:	e8 9e e2 ff ff       	callq  405c8c <_ZNKSt6vectorIdSaIdEE8max_sizeEv>
  4079ee:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  4079f2:	73 0e                	jae    407a02 <_ZNKSt6vectorIdSaIdEE12_M_check_lenEmPKc+0xbe>
  4079f4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4079f8:	48 89 c7             	mov    %rax,%rdi
  4079fb:	e8 8c e2 ff ff       	callq  405c8c <_ZNKSt6vectorIdSaIdEE8max_sizeEv>
  407a00:	eb 04                	jmp    407a06 <_ZNKSt6vectorIdSaIdEE12_M_check_lenEmPKc+0xc2>
  407a02:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
  407a06:	48 83 c4 38          	add    $0x38,%rsp
  407a0a:	5b                   	pop    %rbx
  407a0b:	5d                   	pop    %rbp
  407a0c:	c3                   	retq   

0000000000407a0d <_ZSt34__uninitialized_move_if_noexcept_aIPdS0_SaIdEET0_T_S3_S2_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
  407a0d:	55                   	push   %rbp
  407a0e:	48 89 e5             	mov    %rsp,%rbp
  407a11:	53                   	push   %rbx
  407a12:	48 83 ec 28          	sub    $0x28,%rsp
  407a16:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  407a1a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  407a1e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  407a22:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
  407a26:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407a2a:	48 89 c7             	mov    %rax,%rdi
  407a2d:	e8 a2 e2 ff ff       	callq  405cd4 <_ZSt32__make_move_if_noexcept_iteratorIPdSt13move_iteratorIS0_EET0_T_>
  407a32:	48 89 c3             	mov    %rax,%rbx
  407a35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407a39:	48 89 c7             	mov    %rax,%rdi
  407a3c:	e8 93 e2 ff ff       	callq  405cd4 <_ZSt32__make_move_if_noexcept_iteratorIPdSt13move_iteratorIS0_EET0_T_>
  407a41:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  407a45:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  407a49:	48 89 de             	mov    %rbx,%rsi
  407a4c:	48 89 c7             	mov    %rax,%rdi
  407a4f:	e8 64 fe ff ff       	callq  4078b8 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPdES1_dET0_T_S4_S3_RSaIT1_E>
    }
  407a54:	48 83 c4 28          	add    $0x28,%rsp
  407a58:	5b                   	pop    %rbx
  407a59:	5d                   	pop    %rbp
  407a5a:	c3                   	retq   

0000000000407a5b <_ZNSt16allocator_traitsISaIdEE7destroyIdEEvRS0_PT_>:
       *
       *  Calls @c __a.destroy(__p) if that expression is well-formed,
       *  otherwise calls @c __p->~_Tp()
      */
      template <class _Tp>
	static void destroy(_Alloc& __a, _Tp* __p)
  407a5b:	55                   	push   %rbp
  407a5c:	48 89 e5             	mov    %rsp,%rbp
  407a5f:	48 83 ec 10          	sub    $0x10,%rsp
  407a63:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407a67:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ _S_destroy(__a, __p); }
  407a6b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  407a6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407a73:	48 89 d6             	mov    %rdx,%rsi
  407a76:	48 89 c7             	mov    %rax,%rdi
  407a79:	e8 87 11 00 00       	callq  408c05 <_ZNSt16allocator_traitsISaIdEE10_S_destroyIdEENSt9enable_ifIXsrNS1_16__destroy_helperIT_EE5valueEvE4typeERS0_PS5_>
  407a7e:	c9                   	leaveq 
  407a7f:	c3                   	retq   

0000000000407a80 <_ZNSt12_Vector_baseISt6threadSaIS0_EE12_Vector_implC1Ev>:
      {
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl()
  407a80:	55                   	push   %rbp
  407a81:	48 89 e5             	mov    %rsp,%rbp
  407a84:	48 83 ec 10          	sub    $0x10,%rsp
  407a88:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
  407a8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407a90:	48 89 c7             	mov    %rax,%rdi
  407a93:	e8 92 11 00 00       	callq  408c2a <_ZNSaISt6threadEC1Ev>
  407a98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407a9c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  407aa3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407aa7:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  407aae:	00 
  407aaf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407ab3:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  407aba:	00 
	{ }
  407abb:	c9                   	leaveq 
  407abc:	c3                   	retq   
  407abd:	90                   	nop

0000000000407abe <_ZNSaISt6threadED1Ev>:
  407abe:	55                   	push   %rbp
  407abf:	48 89 e5             	mov    %rsp,%rbp
  407ac2:	48 83 ec 10          	sub    $0x10,%rsp
  407ac6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407aca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407ace:	48 89 c7             	mov    %rax,%rdi
  407ad1:	e8 6e 11 00 00       	callq  408c44 <_ZN9__gnu_cxx13new_allocatorISt6threadED1Ev>
  407ad6:	c9                   	leaveq 
  407ad7:	c3                   	retq   

0000000000407ad8 <_ZNSt12_Vector_baseISt6threadSaIS0_EE13_M_deallocateEPS0_m>:
      pointer
      _M_allocate(size_t __n)
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }

      void
      _M_deallocate(pointer __p, size_t __n)
  407ad8:	55                   	push   %rbp
  407ad9:	48 89 e5             	mov    %rsp,%rbp
  407adc:	48 83 ec 20          	sub    $0x20,%rsp
  407ae0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407ae4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  407ae8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      {
	if (__p)
  407aec:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  407af1:	74 17                	je     407b0a <_ZNSt12_Vector_baseISt6threadSaIS0_EE13_M_deallocateEPS0_m+0x32>
	  _M_impl.deallocate(__p, __n);
  407af3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407af7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  407afb:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  407aff:	48 89 ce             	mov    %rcx,%rsi
  407b02:	48 89 c7             	mov    %rax,%rdi
  407b05:	e8 44 11 00 00       	callq  408c4e <_ZN9__gnu_cxx13new_allocatorISt6threadE10deallocateEPS1_m>
      }
  407b0a:	c9                   	leaveq 
  407b0b:	c3                   	retq   

0000000000407b0c <_ZSt8_DestroyIPSt6threadEvT_S2_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
  407b0c:	55                   	push   %rbp
  407b0d:	48 89 e5             	mov    %rsp,%rbp
  407b10:	48 83 ec 10          	sub    $0x10,%rsp
  407b14:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407b18:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
  407b1c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  407b20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407b24:	48 89 d6             	mov    %rdx,%rsi
  407b27:	48 89 c7             	mov    %rax,%rdi
  407b2a:	e8 41 11 00 00       	callq  408c70 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6threadEEvT_S4_>
	__destroy(__first, __last);
    }
  407b2f:	c9                   	leaveq 
  407b30:	c3                   	retq   

0000000000407b31 <_ZNSt26_Maybe_wrap_member_pointerIN7barrier8internal11cache_wiperEE9__do_wrapEOS2_>:
      static const _Tp&
      __do_wrap(const _Tp& __x)
      { return __x; }

      static _Tp&&
      __do_wrap(_Tp&& __x)
  407b31:	55                   	push   %rbp
  407b32:	48 89 e5             	mov    %rsp,%rbp
  407b35:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<_Tp&&>(__x); }
  407b39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407b3d:	5d                   	pop    %rbp
  407b3e:	c3                   	retq   

0000000000407b3f <_ZSt4moveIRN7barrier8internal11cache_wiperEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
  407b3f:	55                   	push   %rbp
  407b40:	48 89 e5             	mov    %rsp,%rbp
  407b43:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  407b47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407b4b:	5d                   	pop    %rbp
  407b4c:	c3                   	retq   
  407b4d:	90                   	nop

0000000000407b4e <_ZNSt11_Tuple_implILm2EIEEC1Ev>:
  template<std::size_t _Idx>
    struct _Tuple_impl<_Idx>
    {
      template<std::size_t, typename...> friend class _Tuple_impl;

      _Tuple_impl() = default;
  407b4e:	55                   	push   %rbp
  407b4f:	48 89 e5             	mov    %rsp,%rbp
  407b52:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407b56:	5d                   	pop    %rbp
  407b57:	c3                   	retq   

0000000000407b58 <_ZNSt10_Head_baseILm1EjLb0EEC1IRjvEEOT_>:
      : _M_head_impl(__h) { }

      template<typename _UHead, typename = typename
	       enable_if<!is_convertible<_UHead,
	                                 __uses_alloc_base>::value>::type>
        constexpr _Head_base(_UHead&& __h)
  407b58:	55                   	push   %rbp
  407b59:	48 89 e5             	mov    %rsp,%rbp
  407b5c:	48 83 ec 10          	sub    $0x10,%rsp
  407b60:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407b64:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
  407b68:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407b6c:	48 89 c7             	mov    %rax,%rdi
  407b6f:	e8 d3 d6 ff ff       	callq  405247 <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
  407b74:	8b 10                	mov    (%rax),%edx
  407b76:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407b7a:	89 10                	mov    %edx,(%rax)
  407b7c:	c9                   	leaveq 
  407b7d:	c3                   	retq   

0000000000407b7e <_ZNSt11_Tuple_implILm1EIjEEC1IRjIEvEEOT_DpOT0_>:
      : _Inherited(__tail...), _Base(__head) { }

      template<typename _UHead, typename... _UTail, typename = typename
               enable_if<sizeof...(_Tail) == sizeof...(_UTail)>::type> 
        explicit
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
  407b7e:	55                   	push   %rbp
  407b7f:	48 89 e5             	mov    %rsp,%rbp
  407b82:	48 83 ec 10          	sub    $0x10,%rsp
  407b86:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407b8a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Inherited(std::forward<_UTail>(__tail)...),
	  _Base(std::forward<_UHead>(__head)) { }
  407b8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407b92:	48 89 c7             	mov    %rax,%rdi
  407b95:	e8 b4 ff ff ff       	callq  407b4e <_ZNSt11_Tuple_implILm2EIEEC1Ev>
  407b9a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407b9e:	48 89 c7             	mov    %rax,%rdi
  407ba1:	e8 a1 d6 ff ff       	callq  405247 <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
  407ba6:	48 89 c2             	mov    %rax,%rdx
  407ba9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407bad:	48 89 d6             	mov    %rdx,%rsi
  407bb0:	48 89 c7             	mov    %rax,%rdi
  407bb3:	e8 a0 ff ff ff       	callq  407b58 <_ZNSt10_Head_baseILm1EjLb0EEC1IRjvEEOT_>
  407bb8:	c9                   	leaveq 
  407bb9:	c3                   	retq   

0000000000407bba <_ZNSt11_Tuple_implILm0EIN7barrier8internal11cache_wiperEjEEC1IS2_IRjEvEEOT_DpOT0_>:
      : _Inherited(__tail...), _Base(__head) { }

      template<typename _UHead, typename... _UTail, typename = typename
               enable_if<sizeof...(_Tail) == sizeof...(_UTail)>::type> 
        explicit
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
  407bba:	55                   	push   %rbp
  407bbb:	48 89 e5             	mov    %rsp,%rbp
  407bbe:	48 83 ec 20          	sub    $0x20,%rsp
  407bc2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407bc6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  407bca:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: _Inherited(std::forward<_UTail>(__tail)...),
  407bce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407bd2:	48 89 c7             	mov    %rax,%rdi
  407bd5:	e8 6d d6 ff ff       	callq  405247 <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
  407bda:	48 89 c2             	mov    %rax,%rdx
	  _Base(std::forward<_UHead>(__head)) { }
  407bdd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407be1:	48 89 d6             	mov    %rdx,%rsi
  407be4:	48 89 c7             	mov    %rax,%rdi
  407be7:	e8 92 ff ff ff       	callq  407b7e <_ZNSt11_Tuple_implILm1EIjEEC1IRjIEvEEOT_DpOT0_>
  407bec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407bf0:	48 89 c7             	mov    %rax,%rdi
  407bf3:	e8 41 d6 ff ff       	callq  405239 <_ZSt7forwardIN7barrier8internal11cache_wiperEEOT_RNSt16remove_referenceIS3_E4typeE>
  407bf8:	48 89 c2             	mov    %rax,%rdx
  407bfb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407bff:	48 89 d6             	mov    %rdx,%rsi
  407c02:	48 89 c7             	mov    %rax,%rdi
  407c05:	e8 a2 e5 ff ff       	callq  4061ac <_ZNSt10_Head_baseILm0EN7barrier8internal11cache_wiperELb1EEC1IS2_vEEOT_>
  407c0a:	c9                   	leaveq 
  407c0b:	c3                   	retq   

0000000000407c0c <_ZNSt5tupleIIN7barrier8internal11cache_wiperEjEEC1IS2_RjvEEOT_OT0_>:

      template<typename _U1, typename _U2, typename = typename
	       enable_if<__and_<is_convertible<_U1, _T1>,
				is_convertible<_U2, _T2>>::value>::type>
        explicit
        constexpr tuple(_U1&& __a1, _U2&& __a2)
  407c0c:	55                   	push   %rbp
  407c0d:	48 89 e5             	mov    %rsp,%rbp
  407c10:	53                   	push   %rbx
  407c11:	48 83 ec 28          	sub    $0x28,%rsp
  407c15:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  407c19:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  407c1d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
  407c21:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407c25:	48 89 c7             	mov    %rax,%rdi
  407c28:	e8 1a d6 ff ff       	callq  405247 <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
  407c2d:	48 89 c3             	mov    %rax,%rbx
  407c30:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407c34:	48 89 c7             	mov    %rax,%rdi
  407c37:	e8 fd d5 ff ff       	callq  405239 <_ZSt7forwardIN7barrier8internal11cache_wiperEEOT_RNSt16remove_referenceIS3_E4typeE>
  407c3c:	48 89 c1             	mov    %rax,%rcx
  407c3f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407c43:	48 89 da             	mov    %rbx,%rdx
  407c46:	48 89 ce             	mov    %rcx,%rsi
  407c49:	48 89 c7             	mov    %rax,%rdi
  407c4c:	e8 69 ff ff ff       	callq  407bba <_ZNSt11_Tuple_implILm0EIN7barrier8internal11cache_wiperEjEEC1IS2_IRjEvEEOT_DpOT0_>
  407c51:	48 83 c4 28          	add    $0x28,%rsp
  407c55:	5b                   	pop    %rbx
  407c56:	5d                   	pop    %rbp
  407c57:	c3                   	retq   

0000000000407c58 <_ZNSt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEC1IIRjEvEEOS2_DpOT_>:
        { }

      template<typename... _Args2, typename = typename
               enable_if< sizeof...(_Args) == sizeof...(_Args2)>::type>
        explicit
        _Bind_simple(_Callable&& __callable, _Args2&&... __args)
  407c58:	55                   	push   %rbp
  407c59:	48 89 e5             	mov    %rsp,%rbp
  407c5c:	53                   	push   %rbx
  407c5d:	48 83 ec 28          	sub    $0x28,%rsp
  407c61:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  407c65:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  407c69:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
        : _M_bound(std::move(__callable), std::forward<_Args2>(__args)...)
  407c6d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407c71:	48 89 c7             	mov    %rax,%rdi
  407c74:	e8 ce d5 ff ff       	callq  405247 <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
  407c79:	48 89 c3             	mov    %rax,%rbx
  407c7c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407c80:	48 89 c7             	mov    %rax,%rdi
  407c83:	e8 b7 fe ff ff       	callq  407b3f <_ZSt4moveIRN7barrier8internal11cache_wiperEEONSt16remove_referenceIT_E4typeEOS5_>
  407c88:	48 89 c1             	mov    %rax,%rcx
  407c8b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407c8f:	48 89 da             	mov    %rbx,%rdx
  407c92:	48 89 ce             	mov    %rcx,%rsi
  407c95:	48 89 c7             	mov    %rax,%rdi
  407c98:	e8 6f ff ff ff       	callq  407c0c <_ZNSt5tupleIIN7barrier8internal11cache_wiperEjEEC1IS2_RjvEEOT_OT0_>
        { }
  407c9d:	48 83 c4 28          	add    $0x28,%rsp
  407ca1:	5b                   	pop    %rbx
  407ca2:	5d                   	pop    %rbp
  407ca3:	c3                   	retq   

0000000000407ca4 <_ZSt11make_sharedINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEIS7_EESt10shared_ptrIT_EDpOT0_>:
   *  @throw  std::bad_alloc, or an exception thrown from the
   *          constructor of @a _Tp.
   */
  template<typename _Tp, typename... _Args>
    inline shared_ptr<_Tp>
    make_shared(_Args&&... __args)
  407ca4:	55                   	push   %rbp
  407ca5:	48 89 e5             	mov    %rsp,%rbp
  407ca8:	53                   	push   %rbx
  407ca9:	48 83 ec 28          	sub    $0x28,%rsp
  407cad:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  407cb1:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    {
      typedef typename std::remove_const<_Tp>::type _Tp_nc;
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
				       std::forward<_Args>(__args)...);
  407cb5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  407cb9:	48 89 c7             	mov    %rax,%rdi
  407cbc:	e8 0a e6 ff ff       	callq  4062cb <_ZSt7forwardISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEOT_RNSt16remove_referenceIS6_E4typeE>
  407cc1:	48 89 c3             	mov    %rax,%rbx
  407cc4:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
  407cc8:	48 89 c7             	mov    %rax,%rdi
  407ccb:	e8 d8 0f 00 00       	callq  408ca8 <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEEC1Ev>
  407cd0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407cd4:	48 8d 4d ef          	lea    -0x11(%rbp),%rcx
  407cd8:	48 89 da             	mov    %rbx,%rdx
  407cdb:	48 89 ce             	mov    %rcx,%rsi
  407cde:	48 89 c7             	mov    %rax,%rdi
  407ce1:	e8 f6 0f 00 00       	callq  408cdc <_ZSt15allocate_sharedINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaIS8_EIS7_EESt10shared_ptrIT_ERKT0_DpOT1_>
  407ce6:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
  407cea:	48 89 c7             	mov    %rax,%rdi
  407ced:	e8 d0 0f 00 00       	callq  408cc2 <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEED1Ev>
  407cf2:	eb 1a                	jmp    407d0e <_ZSt11make_sharedINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEIS7_EESt10shared_ptrIT_EDpOT0_+0x6a>
  407cf4:	48 89 c3             	mov    %rax,%rbx
  407cf7:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
  407cfb:	48 89 c7             	mov    %rax,%rdi
  407cfe:	e8 bf 0f 00 00       	callq  408cc2 <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEED1Ev>
  407d03:	48 89 d8             	mov    %rbx,%rax
  407d06:	48 89 c7             	mov    %rax,%rdi
  407d09:	e8 12 9c ff ff       	callq  401920 <_Unwind_Resume@plt>
    }
  407d0e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407d12:	48 83 c4 28          	add    $0x28,%rsp
  407d16:	5b                   	pop    %rbx
  407d17:	5d                   	pop    %rbp
  407d18:	c3                   	retq   
  407d19:	90                   	nop

0000000000407d1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1Ev>:

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
  407d1a:	55                   	push   %rbp
  407d1b:	48 89 e5             	mov    %rsp,%rbp
  407d1e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407d22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407d26:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      { }
  407d2d:	5d                   	pop    %rbp
  407d2e:	c3                   	retq   
  407d2f:	90                   	nop

0000000000407d30 <_ZNSt12__shared_ptrINSt6thread10_Impl_baseELN9__gnu_cxx12_Lock_policyE2EEC1INS0_5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEvEEOS_IT_LS3_2EE>:
	__r._M_ptr = 0;
      }

      template<typename _Tp1, typename = typename
	       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>
	__shared_ptr(__shared_ptr<_Tp1, _Lp>&& __r) noexcept
  407d30:	55                   	push   %rbp
  407d31:	48 89 e5             	mov    %rsp,%rbp
  407d34:	48 83 ec 10          	sub    $0x10,%rsp
  407d38:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407d3c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_ptr(__r._M_ptr), _M_refcount()
  407d40:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407d44:	48 8b 10             	mov    (%rax),%rdx
  407d47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407d4b:	48 89 10             	mov    %rdx,(%rax)
  407d4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407d52:	48 83 c0 08          	add    $0x8,%rax
  407d56:	48 89 c7             	mov    %rax,%rdi
  407d59:	e8 bc ff ff ff       	callq  407d1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1Ev>
	{
	  _M_refcount._M_swap(__r._M_refcount);
  407d5e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407d62:	48 8d 50 08          	lea    0x8(%rax),%rdx
  407d66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407d6a:	48 83 c0 08          	add    $0x8,%rax
  407d6e:	48 89 d6             	mov    %rdx,%rsi
  407d71:	48 89 c7             	mov    %rax,%rdi
  407d74:	e8 a9 0f 00 00       	callq  408d22 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EE7_M_swapERS2_>
	  __r._M_ptr = 0;
  407d79:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407d7d:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	}
  407d84:	c9                   	leaveq 
  407d85:	c3                   	retq   

0000000000407d86 <_ZNSt16allocator_traitsISaISt6threadEE9constructIS0_IS0_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS1_PT_DpOS4_>:
       *  if that expression is well-formed, otherwise uses placement-new
       *  to construct an object of type @a _Tp at location @a __p from the
       *  arguments @a __args...
      */
      template<typename _Tp, typename... _Args>
	static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
  407d86:	55                   	push   %rbp
  407d87:	48 89 e5             	mov    %rsp,%rbp
  407d8a:	48 83 ec 20          	sub    $0x20,%rsp
  407d8e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407d92:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  407d96:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	-> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
  407d9a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407d9e:	48 89 c7             	mov    %rax,%rdi
  407da1:	e8 aa e5 ff ff       	callq  406350 <_ZSt7forwardISt6threadEOT_RNSt16remove_referenceIS1_E4typeE>
  407da6:	48 89 c2             	mov    %rax,%rdx
  407da9:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  407dad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407db1:	48 89 ce             	mov    %rcx,%rsi
  407db4:	48 89 c7             	mov    %rax,%rdi
  407db7:	e8 98 0f 00 00       	callq  408d54 <_ZNSt16allocator_traitsISaISt6threadEE12_S_constructIS0_IS0_EEENSt9enable_ifIXsrNS2_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS1_PS6_DpOS7_>
  407dbc:	c9                   	leaveq 
  407dbd:	c3                   	retq   

0000000000407dbe <_ZNSt6vectorISt6threadSaIS0_EE19_M_emplace_back_auxIIS0_EEEvDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
  407dbe:	55                   	push   %rbp
  407dbf:	48 89 e5             	mov    %rsp,%rbp
  407dc2:	53                   	push   %rbx
  407dc3:	48 83 ec 38          	sub    $0x38,%rsp
  407dc7:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  407dcb:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      _M_emplace_back_aux(_Args&&... __args)
      {
	const size_type __len =
	  _M_check_len(size_type(1), "vector::_M_emplace_back_aux");
  407dcf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  407dd3:	ba a0 be 40 00       	mov    $0x40bea0,%edx
  407dd8:	be 01 00 00 00       	mov    $0x1,%esi
  407ddd:	48 89 c7             	mov    %rax,%rdi
  407de0:	e8 a7 0f 00 00       	callq  408d8c <_ZNKSt6vectorISt6threadSaIS0_EE12_M_check_lenEmPKc>
  407de5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	pointer __new_start(this->_M_allocate(__len));
  407de9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  407ded:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  407df1:	48 89 d6             	mov    %rdx,%rsi
  407df4:	48 89 c7             	mov    %rax,%rdi
  407df7:	e8 5a 10 00 00       	callq  408e56 <_ZNSt12_Vector_baseISt6threadSaIS0_EE11_M_allocateEm>
  407dfc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	pointer __new_finish(__new_start);
  407e00:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407e04:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	__try
	  {
	    _Alloc_traits::construct(this->_M_impl, __new_start + size(),
				     std::forward<_Args>(__args)...);
  407e08:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  407e0c:	48 89 c7             	mov    %rax,%rdi
  407e0f:	e8 3c e5 ff ff       	callq  406350 <_ZSt7forwardISt6threadEOT_RNSt16remove_referenceIS1_E4typeE>
  407e14:	48 89 c3             	mov    %rax,%rbx
	  _M_check_len(size_type(1), "vector::_M_emplace_back_aux");
	pointer __new_start(this->_M_allocate(__len));
	pointer __new_finish(__new_start);
	__try
	  {
	    _Alloc_traits::construct(this->_M_impl, __new_start + size(),
  407e17:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  407e1b:	48 89 c7             	mov    %rax,%rdi
  407e1e:	e8 6b 10 00 00       	callq  408e8e <_ZNKSt6vectorISt6threadSaIS0_EE4sizeEv>
				     std::forward<_Args>(__args)...);
  407e23:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  407e2a:	00 
  407e2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407e2f:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  407e33:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
	  _M_check_len(size_type(1), "vector::_M_emplace_back_aux");
	pointer __new_start(this->_M_allocate(__len));
	pointer __new_finish(__new_start);
	__try
	  {
	    _Alloc_traits::construct(this->_M_impl, __new_start + size(),
  407e37:	48 89 da             	mov    %rbx,%rdx
  407e3a:	48 89 ce             	mov    %rcx,%rsi
  407e3d:	48 89 c7             	mov    %rax,%rdi
  407e40:	e8 41 ff ff ff       	callq  407d86 <_ZNSt16allocator_traitsISaISt6threadEE9constructIS0_IS0_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS1_PT_DpOS4_>
				     std::forward<_Args>(__args)...);
	    __new_finish = 0;
  407e45:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  407e4c:	00 

	    __new_finish
	      = std::__uninitialized_move_if_noexcept_a
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
	       __new_start, _M_get_Tp_allocator());
  407e4d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  407e51:	48 89 c7             	mov    %rax,%rdi
  407e54:	e8 13 e2 ff ff       	callq  40606c <_ZNSt12_Vector_baseISt6threadSaIS0_EE19_M_get_Tp_allocatorEv>
  407e59:	48 89 c1             	mov    %rax,%rcx
  407e5c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  407e60:	48 8b 70 08          	mov    0x8(%rax),%rsi
  407e64:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  407e68:	48 8b 00             	mov    (%rax),%rax
	  {
	    _Alloc_traits::construct(this->_M_impl, __new_start + size(),
				     std::forward<_Args>(__args)...);
	    __new_finish = 0;

	    __new_finish
  407e6b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  407e6f:	48 89 c7             	mov    %rax,%rdi
  407e72:	e8 3d 10 00 00       	callq  408eb4 <_ZSt34__uninitialized_move_if_noexcept_aIPSt6threadS1_SaIS0_EET0_T_S4_S3_RT1_>
  407e77:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	      = std::__uninitialized_move_if_noexcept_a
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
	       __new_start, _M_get_Tp_allocator());

	    ++__new_finish;
  407e7b:	48 83 45 d8 08       	addq   $0x8,-0x28(%rbp)
	      std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	    _M_deallocate(__new_start, __len);
	    __throw_exception_again;
	  }
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
  407e80:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  407e84:	48 89 c7             	mov    %rax,%rdi
  407e87:	e8 e0 e1 ff ff       	callq  40606c <_ZNSt12_Vector_baseISt6threadSaIS0_EE19_M_get_Tp_allocatorEv>
  407e8c:	48 89 c2             	mov    %rax,%rdx
  407e8f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  407e93:	48 8b 48 08          	mov    0x8(%rax),%rcx
  407e97:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  407e9b:	48 8b 00             	mov    (%rax),%rax
	    else
	      std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	    _M_deallocate(__new_start, __len);
	    __throw_exception_again;
	  }
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  407e9e:	48 89 ce             	mov    %rcx,%rsi
  407ea1:	48 89 c7             	mov    %rax,%rdi
  407ea4:	e8 d1 e1 ff ff       	callq  40607a <_ZSt8_DestroyIPSt6threadS0_EvT_S2_RSaIT0_E>
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
  407ea9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  407ead:	48 8b 40 10          	mov    0x10(%rax),%rax
  407eb1:	48 89 c2             	mov    %rax,%rdx
  407eb4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  407eb8:	48 8b 00             	mov    (%rax),%rax
  407ebb:	48 29 c2             	sub    %rax,%rdx
  407ebe:	48 89 d0             	mov    %rdx,%rax
  407ec1:	48 c1 f8 03          	sar    $0x3,%rax
  407ec5:	48 89 c2             	mov    %rax,%rdx
  407ec8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  407ecc:	48 8b 08             	mov    (%rax),%rcx
  407ecf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
	    _M_deallocate(__new_start, __len);
	    __throw_exception_again;
	  }
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
  407ed3:	48 89 ce             	mov    %rcx,%rsi
  407ed6:	48 89 c7             	mov    %rax,%rdi
  407ed9:	e8 fa fb ff ff       	callq  407ad8 <_ZNSt12_Vector_baseISt6threadSaIS0_EE13_M_deallocateEPS0_m>
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
  407ede:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  407ee2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  407ee6:	48 89 10             	mov    %rdx,(%rax)
	this->_M_impl._M_finish = __new_finish;
  407ee9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  407eed:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  407ef1:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_impl._M_end_of_storage = __new_start + __len;
  407ef5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407ef9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  407f00:	00 
  407f01:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407f05:	48 01 c2             	add    %rax,%rdx
  407f08:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  407f0c:	48 89 50 10          	mov    %rdx,0x10(%rax)
  407f10:	e9 8c 00 00 00       	jmpq   407fa1 <_ZNSt6vectorISt6threadSaIS0_EE19_M_emplace_back_auxIIS0_EEEvDpOT_+0x1e3>
  407f15:	48 89 c3             	mov    %rax,%rbx
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
	       __new_start, _M_get_Tp_allocator());

	    ++__new_finish;
	  }
	__catch(...)
  407f18:	e8 73 99 ff ff       	callq  401890 <__cxa_end_catch@plt>
  407f1d:	48 89 d8             	mov    %rbx,%rax
  407f20:	48 89 c7             	mov    %rax,%rdi
  407f23:	e8 f8 99 ff ff       	callq  401920 <_Unwind_Resume@plt>
  407f28:	48 89 c7             	mov    %rax,%rdi
  407f2b:	e8 a0 99 ff ff       	callq  4018d0 <__cxa_begin_catch@plt>
	  {
	    if (!__new_finish)
  407f30:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  407f35:	75 2c                	jne    407f63 <_ZNSt6vectorISt6threadSaIS0_EE19_M_emplace_back_auxIIS0_EEEvDpOT_+0x1a5>
	      _Alloc_traits::destroy(this->_M_impl, __new_start + size());
  407f37:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  407f3b:	48 89 c7             	mov    %rax,%rdi
  407f3e:	e8 4b 0f 00 00       	callq  408e8e <_ZNKSt6vectorISt6threadSaIS0_EE4sizeEv>
  407f43:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  407f4a:	00 
  407f4b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407f4f:	48 01 c2             	add    %rax,%rdx
  407f52:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  407f56:	48 89 d6             	mov    %rdx,%rsi
  407f59:	48 89 c7             	mov    %rax,%rdi
  407f5c:	e8 a1 0f 00 00       	callq  408f02 <_ZNSt16allocator_traitsISaISt6threadEE7destroyIS0_EEvRS1_PT_>
  407f61:	eb 22                	jmp    407f85 <_ZNSt6vectorISt6threadSaIS0_EE19_M_emplace_back_auxIIS0_EEEvDpOT_+0x1c7>
	    else
	      std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
  407f63:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  407f67:	48 89 c7             	mov    %rax,%rdi
  407f6a:	e8 fd e0 ff ff       	callq  40606c <_ZNSt12_Vector_baseISt6threadSaIS0_EE19_M_get_Tp_allocatorEv>
  407f6f:	48 89 c2             	mov    %rax,%rdx
  407f72:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  407f76:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407f7a:	48 89 ce             	mov    %rcx,%rsi
  407f7d:	48 89 c7             	mov    %rax,%rdi
  407f80:	e8 f5 e0 ff ff       	callq  40607a <_ZSt8_DestroyIPSt6threadS0_EvT_S2_RSaIT0_E>
	    _M_deallocate(__new_start, __len);
  407f85:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  407f89:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  407f8d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  407f91:	48 89 ce             	mov    %rcx,%rsi
  407f94:	48 89 c7             	mov    %rax,%rdi
  407f97:	e8 3c fb ff ff       	callq  407ad8 <_ZNSt12_Vector_baseISt6threadSaIS0_EE13_M_deallocateEPS0_m>
	    __throw_exception_again;
  407f9c:	e8 df 96 ff ff       	callq  401680 <__cxa_rethrow@plt>
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
	this->_M_impl._M_finish = __new_finish;
	this->_M_impl._M_end_of_storage = __new_start + __len;
      }
  407fa1:	48 83 c4 38          	add    $0x38,%rsp
  407fa5:	5b                   	pop    %rbx
  407fa6:	5d                   	pop    %rbp
  407fa7:	c3                   	retq   

0000000000407fa8 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6threadSt6vectorIS1_SaIS1_EEE4baseEv>:
      __normal_iterator
      operator-(const difference_type& __n) const
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const
  407fa8:	55                   	push   %rbp
  407fa9:	48 89 e5             	mov    %rsp,%rbp
  407fac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
  407fb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407fb4:	5d                   	pop    %rbp
  407fb5:	c3                   	retq   

0000000000407fb6 <_ZNSt8__detail5__modImLm4294967296ELm1ELm0EEET_S1_>:
	}
      };

    template<typename _Tp, _Tp __m, _Tp __a = 1, _Tp __c = 0>
      inline _Tp
      __mod(_Tp __x)
  407fb6:	55                   	push   %rbp
  407fb7:	48 89 e5             	mov    %rsp,%rbp
  407fba:	48 83 ec 10          	sub    $0x10,%rsp
  407fbe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _Mod<_Tp, __m, __a, __c>::__calc(__x); }
  407fc2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407fc6:	48 89 c7             	mov    %rax,%rdi
  407fc9:	e8 59 0f 00 00       	callq  408f27 <_ZNSt8__detail4_ModImLm4294967296ELm1ELm0ELb1ELb1EE6__calcEm>
  407fce:	c9                   	leaveq 
  407fcf:	c3                   	retq   

0000000000407fd0 <_ZNSt8__detail5__modImLm624ELm1ELm0EEET_S1_>:
	}
      };

    template<typename _Tp, _Tp __m, _Tp __a = 1, _Tp __c = 0>
      inline _Tp
      __mod(_Tp __x)
  407fd0:	55                   	push   %rbp
  407fd1:	48 89 e5             	mov    %rsp,%rbp
  407fd4:	48 83 ec 10          	sub    $0x10,%rsp
  407fd8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _Mod<_Tp, __m, __a, __c>::__calc(__x); }
  407fdc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407fe0:	48 89 c7             	mov    %rax,%rdi
  407fe3:	e8 5e 0f 00 00       	callq  408f46 <_ZNSt8__detail4_ModImLm624ELm1ELm0ELb1ELb1EE6__calcEm>
  407fe8:	c9                   	leaveq 
  407fe9:	c3                   	retq   

0000000000407fea <_ZNKSt24uniform_int_distributionImE10param_type1aEv>:
	{
	  _GLIBCXX_DEBUG_ASSERT(_M_a <= _M_b);
	}

	result_type
	a() const
  407fea:	55                   	push   %rbp
  407feb:	48 89 e5             	mov    %rsp,%rbp
  407fee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{ return _M_a; }
  407ff2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407ff6:	48 8b 00             	mov    (%rax),%rax
  407ff9:	5d                   	pop    %rbp
  407ffa:	c3                   	retq   
  407ffb:	90                   	nop

0000000000407ffc <_ZNKSt24uniform_int_distributionImE10param_type1bEv>:

	result_type
	b() const
  407ffc:	55                   	push   %rbp
  407ffd:	48 89 e5             	mov    %rsp,%rbp
  408000:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{ return _M_b; }
  408004:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408008:	48 8b 40 08          	mov    0x8(%rax),%rax
  40800c:	5d                   	pop    %rbp
  40800d:	c3                   	retq   

000000000040800e <_ZNSt12_Vector_baseISt6vectorISt5tupleIIdddEESaIS2_EESaIS4_EE12_Vector_implC1Ev>:
      {
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl()
  40800e:	55                   	push   %rbp
  40800f:	48 89 e5             	mov    %rsp,%rbp
  408012:	48 83 ec 10          	sub    $0x10,%rsp
  408016:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
  40801a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40801e:	48 89 c7             	mov    %rax,%rdi
  408021:	e8 66 0f 00 00       	callq  408f8c <_ZNSaISt6vectorISt5tupleIIdddEESaIS1_EEEC1Ev>
  408026:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40802a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  408031:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408035:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  40803c:	00 
  40803d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408041:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  408048:	00 
	{ }
  408049:	c9                   	leaveq 
  40804a:	c3                   	retq   
  40804b:	90                   	nop

000000000040804c <_ZNSt12_Vector_baseISt6vectorISt5tupleIIdddEESaIS2_EESaIS4_EE13_M_deallocateEPS4_m>:
      pointer
      _M_allocate(size_t __n)
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }

      void
      _M_deallocate(pointer __p, size_t __n)
  40804c:	55                   	push   %rbp
  40804d:	48 89 e5             	mov    %rsp,%rbp
  408050:	48 83 ec 20          	sub    $0x20,%rsp
  408054:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408058:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40805c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      {
	if (__p)
  408060:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  408065:	74 17                	je     40807e <_ZNSt12_Vector_baseISt6vectorISt5tupleIIdddEESaIS2_EESaIS4_EE13_M_deallocateEPS4_m+0x32>
	  _M_impl.deallocate(__p, __n);
  408067:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40806b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40806f:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  408073:	48 89 ce             	mov    %rcx,%rsi
  408076:	48 89 c7             	mov    %rax,%rdi
  408079:	e8 28 0f 00 00       	callq  408fa6 <_ZN9__gnu_cxx13new_allocatorISt6vectorISt5tupleIIdddEESaIS3_EEE10deallocateEPS5_m>
      }
  40807e:	c9                   	leaveq 
  40807f:	c3                   	retq   

0000000000408080 <_ZSt8_DestroyIPSt6vectorISt5tupleIIdddEESaIS2_EEEvT_S6_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
  408080:	55                   	push   %rbp
  408081:	48 89 e5             	mov    %rsp,%rbp
  408084:	48 83 ec 10          	sub    $0x10,%rsp
  408088:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40808c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
  408090:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  408094:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408098:	48 89 d6             	mov    %rdx,%rsi
  40809b:	48 89 c7             	mov    %rax,%rdi
  40809e:	e8 25 0f 00 00       	callq  408fc8 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorISt5tupleIIdddEESaIS4_EEEEvT_S8_>
	__destroy(__first, __last);
    }
  4080a3:	c9                   	leaveq 
  4080a4:	c3                   	retq   

00000000004080a5 <_ZSt27__uninitialized_default_n_aIPSt6vectorISt5tupleIIdddEESaIS2_EEmS4_EvT_T0_RSaIT1_E>:
	}
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline void
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
  4080a5:	55                   	push   %rbp
  4080a6:	48 89 e5             	mov    %rsp,%rbp
  4080a9:	48 83 ec 20          	sub    $0x20,%rsp
  4080ad:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4080b1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4080b5:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
				allocator<_Tp>&)
    { std::__uninitialized_default_n(__first, __n); }
  4080b9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4080bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4080c1:	48 89 d6             	mov    %rdx,%rsi
  4080c4:	48 89 c7             	mov    %rax,%rdi
  4080c7:	e8 33 0f 00 00       	callq  408fff <_ZSt25__uninitialized_default_nIPSt6vectorISt5tupleIIdddEESaIS2_EEmEvT_T0_>
  4080cc:	c9                   	leaveq 
  4080cd:	c3                   	retq   

00000000004080ce <_ZNKSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EE12_M_check_lenEmPKc>:
        _M_emplace_back_aux(_Args&&... __args);
#endif

      // Called by the latter.
      size_type
      _M_check_len(size_type __n, const char* __s) const
  4080ce:	55                   	push   %rbp
  4080cf:	48 89 e5             	mov    %rsp,%rbp
  4080d2:	53                   	push   %rbx
  4080d3:	48 83 ec 38          	sub    $0x38,%rsp
  4080d7:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  4080db:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  4080df:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      {
	if (max_size() - size() < __n)
  4080e3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4080e7:	48 89 c7             	mov    %rax,%rdi
  4080ea:	e8 35 0f 00 00       	callq  409024 <_ZNKSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EE8max_sizeEv>
  4080ef:	48 89 c3             	mov    %rax,%rbx
  4080f2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4080f6:	48 89 c7             	mov    %rax,%rdi
  4080f9:	e8 5a d5 ff ff       	callq  405658 <_ZNKSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EE4sizeEv>
  4080fe:	48 29 c3             	sub    %rax,%rbx
  408101:	48 89 da             	mov    %rbx,%rdx
  408104:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408108:	48 39 c2             	cmp    %rax,%rdx
  40810b:	0f 92 c0             	setb   %al
  40810e:	84 c0                	test   %al,%al
  408110:	74 0c                	je     40811e <_ZNKSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EE12_M_check_lenEmPKc+0x50>
	  __throw_length_error(__N(__s));
  408112:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408116:	48 89 c7             	mov    %rax,%rdi
  408119:	e8 f2 94 ff ff       	callq  401610 <_ZSt20__throw_length_errorPKc@plt>

	const size_type __len = size() + std::max(size(), __n);
  40811e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408122:	48 89 c7             	mov    %rax,%rdi
  408125:	e8 2e d5 ff ff       	callq  405658 <_ZNKSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EE4sizeEv>
  40812a:	48 89 c3             	mov    %rax,%rbx
  40812d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408131:	48 89 c7             	mov    %rax,%rdi
  408134:	e8 1f d5 ff ff       	callq  405658 <_ZNKSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EE4sizeEv>
  408139:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40813d:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  408141:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  408145:	48 89 d6             	mov    %rdx,%rsi
  408148:	48 89 c7             	mov    %rax,%rdi
  40814b:	e8 8a 0a 00 00       	callq  408bda <_ZSt3maxImERKT_S2_S2_>
  408150:	48 8b 00             	mov    (%rax),%rax
  408153:	48 01 d8             	add    %rbx,%rax
  408156:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  40815a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40815e:	48 89 c7             	mov    %rax,%rdi
  408161:	e8 f2 d4 ff ff       	callq  405658 <_ZNKSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EE4sizeEv>
  408166:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  40816a:	77 12                	ja     40817e <_ZNKSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EE12_M_check_lenEmPKc+0xb0>
  40816c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408170:	48 89 c7             	mov    %rax,%rdi
  408173:	e8 ac 0e 00 00       	callq  409024 <_ZNKSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EE8max_sizeEv>
  408178:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  40817c:	73 0e                	jae    40818c <_ZNKSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EE12_M_check_lenEmPKc+0xbe>
  40817e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408182:	48 89 c7             	mov    %rax,%rdi
  408185:	e8 9a 0e 00 00       	callq  409024 <_ZNKSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EE8max_sizeEv>
  40818a:	eb 04                	jmp    408190 <_ZNKSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EE12_M_check_lenEmPKc+0xc2>
  40818c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
  408190:	48 83 c4 38          	add    $0x38,%rsp
  408194:	5b                   	pop    %rbx
  408195:	5d                   	pop    %rbp
  408196:	c3                   	retq   
  408197:	90                   	nop

0000000000408198 <_ZNSt12_Vector_baseISt6vectorISt5tupleIIdddEESaIS2_EESaIS4_EE11_M_allocateEm>:

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
  408198:	55                   	push   %rbp
  408199:	48 89 e5             	mov    %rsp,%rbp
  40819c:	48 83 ec 10          	sub    $0x10,%rsp
  4081a0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4081a4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }
  4081a8:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  4081ad:	74 1a                	je     4081c9 <_ZNSt12_Vector_baseISt6vectorISt5tupleIIdddEESaIS2_EESaIS4_EE11_M_allocateEm+0x31>
  4081af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4081b3:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4081b7:	ba 00 00 00 00       	mov    $0x0,%edx
  4081bc:	48 89 ce             	mov    %rcx,%rsi
  4081bf:	48 89 c7             	mov    %rax,%rdi
  4081c2:	e8 7f 0e 00 00       	callq  409046 <_ZN9__gnu_cxx13new_allocatorISt6vectorISt5tupleIIdddEESaIS3_EEE8allocateEmPKv>
  4081c7:	eb 05                	jmp    4081ce <_ZNSt12_Vector_baseISt6vectorISt5tupleIIdddEESaIS2_EESaIS4_EE11_M_allocateEm+0x36>
  4081c9:	b8 00 00 00 00       	mov    $0x0,%eax
  4081ce:	c9                   	leaveq 
  4081cf:	c3                   	retq   

00000000004081d0 <_ZSt34__uninitialized_move_if_noexcept_aIPSt6vectorISt5tupleIIdddEESaIS2_EES5_SaIS4_EET0_T_S8_S7_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
  4081d0:	55                   	push   %rbp
  4081d1:	48 89 e5             	mov    %rsp,%rbp
  4081d4:	53                   	push   %rbx
  4081d5:	48 83 ec 28          	sub    $0x28,%rsp
  4081d9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4081dd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4081e1:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4081e5:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
  4081e9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4081ed:	48 89 c7             	mov    %rax,%rdi
  4081f0:	e8 9c 0e 00 00       	callq  409091 <_ZSt32__make_move_if_noexcept_iteratorIPSt6vectorISt5tupleIIdddEESaIS2_EESt13move_iteratorIS5_EET0_T_>
  4081f5:	48 89 c3             	mov    %rax,%rbx
  4081f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4081fc:	48 89 c7             	mov    %rax,%rdi
  4081ff:	e8 8d 0e 00 00       	callq  409091 <_ZSt32__make_move_if_noexcept_iteratorIPSt6vectorISt5tupleIIdddEESaIS2_EESt13move_iteratorIS5_EET0_T_>
  408204:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  408208:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40820c:	48 89 de             	mov    %rbx,%rsi
  40820f:	48 89 c7             	mov    %rax,%rdi
  408212:	e8 9f 0e 00 00       	callq  4090b6 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPSt6vectorISt5tupleIIdddEESaIS3_EEES6_S5_ET0_T_S9_S8_RSaIT1_E>
    }
  408217:	48 83 c4 28          	add    $0x28,%rsp
  40821b:	5b                   	pop    %rbx
  40821c:	5d                   	pop    %rbp
  40821d:	c3                   	retq   

000000000040821e <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EE19_M_get_Tp_allocatorEv>:
      
    public:
      typedef _Alloc allocator_type;

      _Tp_alloc_type&
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
  40821e:	55                   	push   %rbp
  40821f:	48 89 e5             	mov    %rsp,%rbp
  408222:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
  408226:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40822a:	5d                   	pop    %rbp
  40822b:	c3                   	retq   

000000000040822c <_ZSt27__uninitialized_default_n_aIPSt5tupleIIdddEEmS1_EvT_T0_RSaIT1_E>:
	}
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline void
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
  40822c:	55                   	push   %rbp
  40822d:	48 89 e5             	mov    %rsp,%rbp
  408230:	48 83 ec 20          	sub    $0x20,%rsp
  408234:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408238:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40823c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
				allocator<_Tp>&)
    { std::__uninitialized_default_n(__first, __n); }
  408240:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  408244:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408248:	48 89 d6             	mov    %rdx,%rsi
  40824b:	48 89 c7             	mov    %rax,%rdi
  40824e:	e8 94 0e 00 00       	callq  4090e7 <_ZSt25__uninitialized_default_nIPSt5tupleIIdddEEmEvT_T0_>
  408253:	c9                   	leaveq 
  408254:	c3                   	retq   
  408255:	90                   	nop

0000000000408256 <_ZNKSt6vectorISt5tupleIIdddEESaIS1_EE12_M_check_lenEmPKc>:
        _M_emplace_back_aux(_Args&&... __args);
#endif

      // Called by the latter.
      size_type
      _M_check_len(size_type __n, const char* __s) const
  408256:	55                   	push   %rbp
  408257:	48 89 e5             	mov    %rsp,%rbp
  40825a:	53                   	push   %rbx
  40825b:	48 83 ec 38          	sub    $0x38,%rsp
  40825f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  408263:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  408267:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      {
	if (max_size() - size() < __n)
  40826b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40826f:	48 89 c7             	mov    %rax,%rdi
  408272:	e8 95 0e 00 00       	callq  40910c <_ZNKSt6vectorISt5tupleIIdddEESaIS1_EE8max_sizeEv>
  408277:	48 89 c3             	mov    %rax,%rbx
  40827a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40827e:	48 89 c7             	mov    %rax,%rdi
  408281:	e8 60 e8 ff ff       	callq  406ae6 <_ZNKSt6vectorISt5tupleIIdddEESaIS1_EE4sizeEv>
  408286:	48 29 c3             	sub    %rax,%rbx
  408289:	48 89 da             	mov    %rbx,%rdx
  40828c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408290:	48 39 c2             	cmp    %rax,%rdx
  408293:	0f 92 c0             	setb   %al
  408296:	84 c0                	test   %al,%al
  408298:	74 0c                	je     4082a6 <_ZNKSt6vectorISt5tupleIIdddEESaIS1_EE12_M_check_lenEmPKc+0x50>
	  __throw_length_error(__N(__s));
  40829a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40829e:	48 89 c7             	mov    %rax,%rdi
  4082a1:	e8 6a 93 ff ff       	callq  401610 <_ZSt20__throw_length_errorPKc@plt>

	const size_type __len = size() + std::max(size(), __n);
  4082a6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4082aa:	48 89 c7             	mov    %rax,%rdi
  4082ad:	e8 34 e8 ff ff       	callq  406ae6 <_ZNKSt6vectorISt5tupleIIdddEESaIS1_EE4sizeEv>
  4082b2:	48 89 c3             	mov    %rax,%rbx
  4082b5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4082b9:	48 89 c7             	mov    %rax,%rdi
  4082bc:	e8 25 e8 ff ff       	callq  406ae6 <_ZNKSt6vectorISt5tupleIIdddEESaIS1_EE4sizeEv>
  4082c1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  4082c5:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  4082c9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4082cd:	48 89 d6             	mov    %rdx,%rsi
  4082d0:	48 89 c7             	mov    %rax,%rdi
  4082d3:	e8 02 09 00 00       	callq  408bda <_ZSt3maxImERKT_S2_S2_>
  4082d8:	48 8b 00             	mov    (%rax),%rax
  4082db:	48 01 d8             	add    %rbx,%rax
  4082de:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  4082e2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4082e6:	48 89 c7             	mov    %rax,%rdi
  4082e9:	e8 f8 e7 ff ff       	callq  406ae6 <_ZNKSt6vectorISt5tupleIIdddEESaIS1_EE4sizeEv>
  4082ee:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  4082f2:	77 12                	ja     408306 <_ZNKSt6vectorISt5tupleIIdddEESaIS1_EE12_M_check_lenEmPKc+0xb0>
  4082f4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4082f8:	48 89 c7             	mov    %rax,%rdi
  4082fb:	e8 0c 0e 00 00       	callq  40910c <_ZNKSt6vectorISt5tupleIIdddEESaIS1_EE8max_sizeEv>
  408300:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  408304:	73 0e                	jae    408314 <_ZNKSt6vectorISt5tupleIIdddEESaIS1_EE12_M_check_lenEmPKc+0xbe>
  408306:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40830a:	48 89 c7             	mov    %rax,%rdi
  40830d:	e8 fa 0d 00 00       	callq  40910c <_ZNKSt6vectorISt5tupleIIdddEESaIS1_EE8max_sizeEv>
  408312:	eb 04                	jmp    408318 <_ZNKSt6vectorISt5tupleIIdddEESaIS1_EE12_M_check_lenEmPKc+0xc2>
  408314:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
  408318:	48 83 c4 38          	add    $0x38,%rsp
  40831c:	5b                   	pop    %rbx
  40831d:	5d                   	pop    %rbp
  40831e:	c3                   	retq   
  40831f:	90                   	nop

0000000000408320 <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EE11_M_allocateEm>:

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
  408320:	55                   	push   %rbp
  408321:	48 89 e5             	mov    %rsp,%rbp
  408324:	48 83 ec 10          	sub    $0x10,%rsp
  408328:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40832c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }
  408330:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  408335:	74 1a                	je     408351 <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EE11_M_allocateEm+0x31>
  408337:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40833b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40833f:	ba 00 00 00 00       	mov    $0x0,%edx
  408344:	48 89 ce             	mov    %rcx,%rsi
  408347:	48 89 c7             	mov    %rax,%rdi
  40834a:	e8 df 0d 00 00       	callq  40912e <_ZN9__gnu_cxx13new_allocatorISt5tupleIIdddEEE8allocateEmPKv>
  40834f:	eb 05                	jmp    408356 <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EE11_M_allocateEm+0x36>
  408351:	b8 00 00 00 00       	mov    $0x0,%eax
  408356:	c9                   	leaveq 
  408357:	c3                   	retq   

0000000000408358 <_ZSt34__uninitialized_move_if_noexcept_aIPSt5tupleIIdddEES2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
  408358:	55                   	push   %rbp
  408359:	48 89 e5             	mov    %rsp,%rbp
  40835c:	53                   	push   %rbx
  40835d:	48 83 ec 28          	sub    $0x28,%rsp
  408361:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  408365:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  408369:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40836d:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
  408371:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408375:	48 89 c7             	mov    %rax,%rdi
  408378:	e8 fc 0d 00 00       	callq  409179 <_ZSt32__make_move_if_noexcept_iteratorIPSt5tupleIIdddEESt13move_iteratorIS2_EET0_T_>
  40837d:	48 89 c3             	mov    %rax,%rbx
  408380:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408384:	48 89 c7             	mov    %rax,%rdi
  408387:	e8 ed 0d 00 00       	callq  409179 <_ZSt32__make_move_if_noexcept_iteratorIPSt5tupleIIdddEESt13move_iteratorIS2_EET0_T_>
  40838c:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  408390:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  408394:	48 89 de             	mov    %rbx,%rsi
  408397:	48 89 c7             	mov    %rax,%rdi
  40839a:	e8 ff 0d 00 00       	callq  40919e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPSt5tupleIIdddEEES3_S2_ET0_T_S6_S5_RSaIT1_E>
    }
  40839f:	48 83 c4 28          	add    $0x28,%rsp
  4083a3:	5b                   	pop    %rbx
  4083a4:	5d                   	pop    %rbp
  4083a5:	c3                   	retq   

00000000004083a6 <_ZSt8_DestroyIPSt5tupleIIdddEES1_EvT_S3_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
  4083a6:	55                   	push   %rbp
  4083a7:	48 89 e5             	mov    %rsp,%rbp
  4083aa:	48 83 ec 20          	sub    $0x20,%rsp
  4083ae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4083b2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4083b6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
  4083ba:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4083be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4083c2:	48 89 d6             	mov    %rdx,%rsi
  4083c5:	48 89 c7             	mov    %rax,%rdi
  4083c8:	e8 02 0e 00 00       	callq  4091cf <_ZSt8_DestroyIPSt5tupleIIdddEEEvT_S3_>
    }
  4083cd:	c9                   	leaveq 
  4083ce:	c3                   	retq   
  4083cf:	90                   	nop

00000000004083d0 <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EE13_M_deallocateEPS1_m>:

      void
      _M_deallocate(pointer __p, size_t __n)
  4083d0:	55                   	push   %rbp
  4083d1:	48 89 e5             	mov    %rsp,%rbp
  4083d4:	48 83 ec 20          	sub    $0x20,%rsp
  4083d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4083dc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4083e0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      {
	if (__p)
  4083e4:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  4083e9:	74 17                	je     408402 <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EE13_M_deallocateEPS1_m+0x32>
	  _M_impl.deallocate(__p, __n);
  4083eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4083ef:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4083f3:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4083f7:	48 89 ce             	mov    %rcx,%rsi
  4083fa:	48 89 c7             	mov    %rax,%rdi
  4083fd:	e8 f2 0d 00 00       	callq  4091f4 <_ZN9__gnu_cxx13new_allocatorISt5tupleIIdddEEE10deallocateEPS2_m>
      }
  408402:	c9                   	leaveq 
  408403:	c3                   	retq   

0000000000408404 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>:
      {
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl()
  408404:	55                   	push   %rbp
  408405:	48 89 e5             	mov    %rsp,%rbp
  408408:	48 83 ec 10          	sub    $0x10,%rsp
  40840c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
  408410:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408414:	48 89 c7             	mov    %rax,%rdi
  408417:	e8 fa 0d 00 00       	callq  409216 <_ZNSaImEC1Ev>
  40841c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408420:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  408427:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40842b:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  408432:	00 
  408433:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408437:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  40843e:	00 
	{ }
  40843f:	c9                   	leaveq 
  408440:	c3                   	retq   
  408441:	90                   	nop

0000000000408442 <_ZNSaImED1Ev>:
  408442:	55                   	push   %rbp
  408443:	48 89 e5             	mov    %rsp,%rbp
  408446:	48 83 ec 10          	sub    $0x10,%rsp
  40844a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40844e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408452:	48 89 c7             	mov    %rax,%rdi
  408455:	e8 d6 0d 00 00       	callq  409230 <_ZN9__gnu_cxx13new_allocatorImED1Ev>
  40845a:	c9                   	leaveq 
  40845b:	c3                   	retq   

000000000040845c <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmm>:
      pointer
      _M_allocate(size_t __n)
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }

      void
      _M_deallocate(pointer __p, size_t __n)
  40845c:	55                   	push   %rbp
  40845d:	48 89 e5             	mov    %rsp,%rbp
  408460:	48 83 ec 20          	sub    $0x20,%rsp
  408464:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408468:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40846c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      {
	if (__p)
  408470:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  408475:	74 17                	je     40848e <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmm+0x32>
	  _M_impl.deallocate(__p, __n);
  408477:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40847b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40847f:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  408483:	48 89 ce             	mov    %rcx,%rsi
  408486:	48 89 c7             	mov    %rax,%rdi
  408489:	e8 ac 0d 00 00       	callq  40923a <_ZN9__gnu_cxx13new_allocatorImE10deallocateEPmm>
      }
  40848e:	c9                   	leaveq 
  40848f:	c3                   	retq   

0000000000408490 <_ZSt8_DestroyIPmEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
  408490:	55                   	push   %rbp
  408491:	48 89 e5             	mov    %rsp,%rbp
  408494:	48 83 ec 10          	sub    $0x10,%rsp
  408498:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40849c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
  4084a0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4084a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4084a8:	48 89 d6             	mov    %rdx,%rsi
  4084ab:	48 89 c7             	mov    %rax,%rdi
  4084ae:	e8 a9 0d 00 00       	callq  40925c <_ZNSt12_Destroy_auxILb1EE9__destroyIPmEEvT_S3_>
	__destroy(__first, __last);
    }
  4084b3:	c9                   	leaveq 
  4084b4:	c3                   	retq   

00000000004084b5 <_ZNSt16allocator_traitsISaImEE9constructImImEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS0_PT_DpOS3_>:
       *  if that expression is well-formed, otherwise uses placement-new
       *  to construct an object of type @a _Tp at location @a __p from the
       *  arguments @a __args...
      */
      template<typename _Tp, typename... _Args>
	static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
  4084b5:	55                   	push   %rbp
  4084b6:	48 89 e5             	mov    %rsp,%rbp
  4084b9:	48 83 ec 20          	sub    $0x20,%rsp
  4084bd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4084c1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4084c5:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	-> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
  4084c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4084cd:	48 89 c7             	mov    %rax,%rdi
  4084d0:	e8 5a eb ff ff       	callq  40702f <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
  4084d5:	48 89 c2             	mov    %rax,%rdx
  4084d8:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4084dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4084e0:	48 89 ce             	mov    %rcx,%rsi
  4084e3:	48 89 c7             	mov    %rax,%rdi
  4084e6:	e8 7f 0d 00 00       	callq  40926a <_ZNSt16allocator_traitsISaImEE12_S_constructImImEEENSt9enable_ifIXsrNS1_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS0_PS5_DpOS6_>
  4084eb:	c9                   	leaveq 
  4084ec:	c3                   	retq   
  4084ed:	90                   	nop

00000000004084ee <_ZNSt6vectorImSaImEE19_M_emplace_back_auxIImEEEvDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
  4084ee:	55                   	push   %rbp
  4084ef:	48 89 e5             	mov    %rsp,%rbp
  4084f2:	53                   	push   %rbx
  4084f3:	48 83 ec 38          	sub    $0x38,%rsp
  4084f7:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  4084fb:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      _M_emplace_back_aux(_Args&&... __args)
      {
	const size_type __len =
	  _M_check_len(size_type(1), "vector::_M_emplace_back_aux");
  4084ff:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408503:	ba a0 be 40 00       	mov    $0x40bea0,%edx
  408508:	be 01 00 00 00       	mov    $0x1,%esi
  40850d:	48 89 c7             	mov    %rax,%rdi
  408510:	e8 8d 0d 00 00       	callq  4092a2 <_ZNKSt6vectorImSaImEE12_M_check_lenEmPKc>
  408515:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	pointer __new_start(this->_M_allocate(__len));
  408519:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40851d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  408521:	48 89 d6             	mov    %rdx,%rsi
  408524:	48 89 c7             	mov    %rax,%rdi
  408527:	e8 40 0e 00 00       	callq  40936c <_ZNSt12_Vector_baseImSaImEE11_M_allocateEm>
  40852c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	pointer __new_finish(__new_start);
  408530:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408534:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	__try
	  {
	    _Alloc_traits::construct(this->_M_impl, __new_start + size(),
				     std::forward<_Args>(__args)...);
  408538:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40853c:	48 89 c7             	mov    %rax,%rdi
  40853f:	e8 eb ea ff ff       	callq  40702f <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
  408544:	48 89 c3             	mov    %rax,%rbx
	  _M_check_len(size_type(1), "vector::_M_emplace_back_aux");
	pointer __new_start(this->_M_allocate(__len));
	pointer __new_finish(__new_start);
	__try
	  {
	    _Alloc_traits::construct(this->_M_impl, __new_start + size(),
  408547:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40854b:	48 89 c7             	mov    %rax,%rdi
  40854e:	e8 51 0e 00 00       	callq  4093a4 <_ZNKSt6vectorImSaImEE4sizeEv>
				     std::forward<_Args>(__args)...);
  408553:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  40855a:	00 
  40855b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40855f:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  408563:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
	  _M_check_len(size_type(1), "vector::_M_emplace_back_aux");
	pointer __new_start(this->_M_allocate(__len));
	pointer __new_finish(__new_start);
	__try
	  {
	    _Alloc_traits::construct(this->_M_impl, __new_start + size(),
  408567:	48 89 da             	mov    %rbx,%rdx
  40856a:	48 89 ce             	mov    %rcx,%rsi
  40856d:	48 89 c7             	mov    %rax,%rdi
  408570:	e8 40 ff ff ff       	callq  4084b5 <_ZNSt16allocator_traitsISaImEE9constructImImEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS0_PT_DpOS3_>
				     std::forward<_Args>(__args)...);
	    __new_finish = 0;
  408575:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  40857c:	00 

	    __new_finish
	      = std::__uninitialized_move_if_noexcept_a
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
	       __new_start, _M_get_Tp_allocator());
  40857d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408581:	48 89 c7             	mov    %rax,%rdi
  408584:	e8 b9 e8 ff ff       	callq  406e42 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
  408589:	48 89 c1             	mov    %rax,%rcx
  40858c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408590:	48 8b 70 08          	mov    0x8(%rax),%rsi
  408594:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408598:	48 8b 00             	mov    (%rax),%rax
	  {
	    _Alloc_traits::construct(this->_M_impl, __new_start + size(),
				     std::forward<_Args>(__args)...);
	    __new_finish = 0;

	    __new_finish
  40859b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40859f:	48 89 c7             	mov    %rax,%rdi
  4085a2:	e8 23 0e 00 00       	callq  4093ca <_ZSt34__uninitialized_move_if_noexcept_aIPmS0_SaImEET0_T_S3_S2_RT1_>
  4085a7:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	      = std::__uninitialized_move_if_noexcept_a
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
	       __new_start, _M_get_Tp_allocator());

	    ++__new_finish;
  4085ab:	48 83 45 d8 08       	addq   $0x8,-0x28(%rbp)
	      std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	    _M_deallocate(__new_start, __len);
	    __throw_exception_again;
	  }
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
  4085b0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4085b4:	48 89 c7             	mov    %rax,%rdi
  4085b7:	e8 86 e8 ff ff       	callq  406e42 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
  4085bc:	48 89 c2             	mov    %rax,%rdx
  4085bf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4085c3:	48 8b 48 08          	mov    0x8(%rax),%rcx
  4085c7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4085cb:	48 8b 00             	mov    (%rax),%rax
	    else
	      std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	    _M_deallocate(__new_start, __len);
	    __throw_exception_again;
	  }
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  4085ce:	48 89 ce             	mov    %rcx,%rsi
  4085d1:	48 89 c7             	mov    %rax,%rdi
  4085d4:	e8 77 e8 ff ff       	callq  406e50 <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
  4085d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4085dd:	48 8b 40 10          	mov    0x10(%rax),%rax
  4085e1:	48 89 c2             	mov    %rax,%rdx
  4085e4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4085e8:	48 8b 00             	mov    (%rax),%rax
  4085eb:	48 29 c2             	sub    %rax,%rdx
  4085ee:	48 89 d0             	mov    %rdx,%rax
  4085f1:	48 c1 f8 03          	sar    $0x3,%rax
  4085f5:	48 89 c2             	mov    %rax,%rdx
  4085f8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4085fc:	48 8b 08             	mov    (%rax),%rcx
  4085ff:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
	    _M_deallocate(__new_start, __len);
	    __throw_exception_again;
	  }
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
  408603:	48 89 ce             	mov    %rcx,%rsi
  408606:	48 89 c7             	mov    %rax,%rdi
  408609:	e8 4e fe ff ff       	callq  40845c <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmm>
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
  40860e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408612:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  408616:	48 89 10             	mov    %rdx,(%rax)
	this->_M_impl._M_finish = __new_finish;
  408619:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40861d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  408621:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_impl._M_end_of_storage = __new_start + __len;
  408625:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408629:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  408630:	00 
  408631:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408635:	48 01 c2             	add    %rax,%rdx
  408638:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40863c:	48 89 50 10          	mov    %rdx,0x10(%rax)
  408640:	e9 8c 00 00 00       	jmpq   4086d1 <_ZNSt6vectorImSaImEE19_M_emplace_back_auxIImEEEvDpOT_+0x1e3>
  408645:	48 89 c3             	mov    %rax,%rbx
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
	       __new_start, _M_get_Tp_allocator());

	    ++__new_finish;
	  }
	__catch(...)
  408648:	e8 43 92 ff ff       	callq  401890 <__cxa_end_catch@plt>
  40864d:	48 89 d8             	mov    %rbx,%rax
  408650:	48 89 c7             	mov    %rax,%rdi
  408653:	e8 c8 92 ff ff       	callq  401920 <_Unwind_Resume@plt>
  408658:	48 89 c7             	mov    %rax,%rdi
  40865b:	e8 70 92 ff ff       	callq  4018d0 <__cxa_begin_catch@plt>
	  {
	    if (!__new_finish)
  408660:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  408665:	75 2c                	jne    408693 <_ZNSt6vectorImSaImEE19_M_emplace_back_auxIImEEEvDpOT_+0x1a5>
	      _Alloc_traits::destroy(this->_M_impl, __new_start + size());
  408667:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40866b:	48 89 c7             	mov    %rax,%rdi
  40866e:	e8 31 0d 00 00       	callq  4093a4 <_ZNKSt6vectorImSaImEE4sizeEv>
  408673:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  40867a:	00 
  40867b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40867f:	48 01 c2             	add    %rax,%rdx
  408682:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408686:	48 89 d6             	mov    %rdx,%rsi
  408689:	48 89 c7             	mov    %rax,%rdi
  40868c:	e8 87 0d 00 00       	callq  409418 <_ZNSt16allocator_traitsISaImEE7destroyImEEvRS0_PT_>
  408691:	eb 22                	jmp    4086b5 <_ZNSt6vectorImSaImEE19_M_emplace_back_auxIImEEEvDpOT_+0x1c7>
	    else
	      std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
  408693:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408697:	48 89 c7             	mov    %rax,%rdi
  40869a:	e8 a3 e7 ff ff       	callq  406e42 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
  40869f:	48 89 c2             	mov    %rax,%rdx
  4086a2:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  4086a6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4086aa:	48 89 ce             	mov    %rcx,%rsi
  4086ad:	48 89 c7             	mov    %rax,%rdi
  4086b0:	e8 9b e7 ff ff       	callq  406e50 <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>
	    _M_deallocate(__new_start, __len);
  4086b5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4086b9:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4086bd:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  4086c1:	48 89 ce             	mov    %rcx,%rsi
  4086c4:	48 89 c7             	mov    %rax,%rdi
  4086c7:	e8 90 fd ff ff       	callq  40845c <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmm>
	    __throw_exception_again;
  4086cc:	e8 af 8f ff ff       	callq  401680 <__cxa_rethrow@plt>
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
	this->_M_impl._M_finish = __new_finish;
	this->_M_impl._M_end_of_storage = __new_start + __len;
      }
  4086d1:	48 83 c4 38          	add    $0x38,%rsp
  4086d5:	5b                   	pop    %rbx
  4086d6:	5d                   	pop    %rbp
  4086d7:	c3                   	retq   

00000000004086d8 <_ZSt11__addressofIN7barrier35centralized_sense_reversing_barrierEEPT_RS2_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  4086d8:	55                   	push   %rbp
  4086d9:	48 89 e5             	mov    %rsp,%rbp
  4086dc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return reinterpret_cast<_Tp*>
	(&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
  4086e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  4086e4:	5d                   	pop    %rbp
  4086e5:	c3                   	retq   

00000000004086e6 <_ZSt11__addressofISt6atomicIbEEPT_RS2_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  4086e6:	55                   	push   %rbp
  4086e7:	48 89 e5             	mov    %rsp,%rbp
  4086ea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return reinterpret_cast<_Tp*>
	(&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
  4086ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  4086f2:	5d                   	pop    %rbp
  4086f3:	c3                   	retq   

00000000004086f4 <_ZNSt11_Tuple_implILm5EIEEC1Ev>:
  template<std::size_t _Idx>
    struct _Tuple_impl<_Idx>
    {
      template<std::size_t, typename...> friend class _Tuple_impl;

      _Tuple_impl() = default;
  4086f4:	55                   	push   %rbp
  4086f5:	48 89 e5             	mov    %rsp,%rbp
  4086f8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4086fc:	5d                   	pop    %rbp
  4086fd:	c3                   	retq   

00000000004086fe <_ZNSt11_Tuple_implILm4EISt17reference_wrapperISt6atomicIbEEEEC1IS3_IEvEEOT_DpOT0_>:
      : _Inherited(__tail...), _Base(__head) { }

      template<typename _UHead, typename... _UTail, typename = typename
               enable_if<sizeof...(_Tail) == sizeof...(_UTail)>::type> 
        explicit
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
  4086fe:	55                   	push   %rbp
  4086ff:	48 89 e5             	mov    %rsp,%rbp
  408702:	48 83 ec 10          	sub    $0x10,%rsp
  408706:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40870a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Inherited(std::forward<_UTail>(__tail)...),
	  _Base(std::forward<_UHead>(__head)) { }
  40870e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408712:	48 89 c7             	mov    %rax,%rdi
  408715:	e8 da ff ff ff       	callq  4086f4 <_ZNSt11_Tuple_implILm5EIEEC1Ev>
  40871a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40871e:	48 89 c7             	mov    %rax,%rdi
  408721:	e8 f1 d1 ff ff       	callq  405917 <_ZSt7forwardISt17reference_wrapperISt6atomicIbEEEOT_RNSt16remove_referenceIS4_E4typeE>
  408726:	48 89 c2             	mov    %rax,%rdx
  408729:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40872d:	48 89 d6             	mov    %rdx,%rsi
  408730:	48 89 c7             	mov    %rax,%rdi
  408733:	e8 6c eb ff ff       	callq  4072a4 <_ZNSt10_Head_baseILm4ESt17reference_wrapperISt6atomicIbEELb0EEC1IS3_vEEOT_>
  408738:	c9                   	leaveq 
  408739:	c3                   	retq   

000000000040873a <_ZNSt10_Head_baseILm3EmLb0EEC1IRmvEEOT_>:
      : _M_head_impl(__h) { }

      template<typename _UHead, typename = typename
	       enable_if<!is_convertible<_UHead,
	                                 __uses_alloc_base>::value>::type>
        constexpr _Head_base(_UHead&& __h)
  40873a:	55                   	push   %rbp
  40873b:	48 89 e5             	mov    %rsp,%rbp
  40873e:	48 83 ec 10          	sub    $0x10,%rsp
  408742:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408746:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
  40874a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40874e:	48 89 c7             	mov    %rax,%rdi
  408751:	e8 b3 d1 ff ff       	callq  405909 <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
  408756:	48 8b 10             	mov    (%rax),%rdx
  408759:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40875d:	48 89 10             	mov    %rdx,(%rax)
  408760:	c9                   	leaveq 
  408761:	c3                   	retq   

0000000000408762 <_ZNSt11_Tuple_implILm3EImSt17reference_wrapperISt6atomicIbEEEEC1IRmIS3_EvEEOT_DpOT0_>:
      : _Inherited(__tail...), _Base(__head) { }

      template<typename _UHead, typename... _UTail, typename = typename
               enable_if<sizeof...(_Tail) == sizeof...(_UTail)>::type> 
        explicit
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
  408762:	55                   	push   %rbp
  408763:	48 89 e5             	mov    %rsp,%rbp
  408766:	48 83 ec 20          	sub    $0x20,%rsp
  40876a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40876e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  408772:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: _Inherited(std::forward<_UTail>(__tail)...),
  408776:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40877a:	48 89 c7             	mov    %rax,%rdi
  40877d:	e8 95 d1 ff ff       	callq  405917 <_ZSt7forwardISt17reference_wrapperISt6atomicIbEEEOT_RNSt16remove_referenceIS4_E4typeE>
  408782:	48 89 c2             	mov    %rax,%rdx
	  _Base(std::forward<_UHead>(__head)) { }
  408785:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408789:	48 89 d6             	mov    %rdx,%rsi
  40878c:	48 89 c7             	mov    %rax,%rdi
  40878f:	e8 6a ff ff ff       	callq  4086fe <_ZNSt11_Tuple_implILm4EISt17reference_wrapperISt6atomicIbEEEEC1IS3_IEvEEOT_DpOT0_>
  408794:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408798:	48 89 c7             	mov    %rax,%rdi
  40879b:	e8 69 d1 ff ff       	callq  405909 <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
  4087a0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4087a4:	48 83 c2 08          	add    $0x8,%rdx
  4087a8:	48 89 c6             	mov    %rax,%rsi
  4087ab:	48 89 d7             	mov    %rdx,%rdi
  4087ae:	e8 87 ff ff ff       	callq  40873a <_ZNSt10_Head_baseILm3EmLb0EEC1IRmvEEOT_>
  4087b3:	c9                   	leaveq 
  4087b4:	c3                   	retq   
  4087b5:	90                   	nop

00000000004087b6 <_ZNSt10_Head_baseILm2EmLb0EEC1ERKm>:
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }

      constexpr _Head_base(const _Head& __h)
  4087b6:	55                   	push   %rbp
  4087b7:	48 89 e5             	mov    %rsp,%rbp
  4087ba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4087be:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_head_impl(__h) { }
  4087c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4087c6:	48 8b 10             	mov    (%rax),%rdx
  4087c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4087cd:	48 89 10             	mov    %rdx,(%rax)
  4087d0:	5d                   	pop    %rbp
  4087d1:	c3                   	retq   

00000000004087d2 <_ZNSt11_Tuple_implILm2EImmSt17reference_wrapperISt6atomicIbEEEEC1IRKmIRmS3_EvEEOT_DpOT0_>:
      : _Inherited(__tail...), _Base(__head) { }

      template<typename _UHead, typename... _UTail, typename = typename
               enable_if<sizeof...(_Tail) == sizeof...(_UTail)>::type> 
        explicit
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
  4087d2:	55                   	push   %rbp
  4087d3:	48 89 e5             	mov    %rsp,%rbp
  4087d6:	53                   	push   %rbx
  4087d7:	48 83 ec 28          	sub    $0x28,%rsp
  4087db:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4087df:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4087e3:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4087e7:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	: _Inherited(std::forward<_UTail>(__tail)...),
  4087eb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4087ef:	48 89 c7             	mov    %rax,%rdi
  4087f2:	e8 20 d1 ff ff       	callq  405917 <_ZSt7forwardISt17reference_wrapperISt6atomicIbEEEOT_RNSt16remove_referenceIS4_E4typeE>
  4087f7:	48 89 c3             	mov    %rax,%rbx
  4087fa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4087fe:	48 89 c7             	mov    %rax,%rdi
  408801:	e8 03 d1 ff ff       	callq  405909 <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
  408806:	48 89 c1             	mov    %rax,%rcx
	  _Base(std::forward<_UHead>(__head)) { }
  408809:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40880d:	48 89 da             	mov    %rbx,%rdx
  408810:	48 89 ce             	mov    %rcx,%rsi
  408813:	48 89 c7             	mov    %rax,%rdi
  408816:	e8 47 ff ff ff       	callq  408762 <_ZNSt11_Tuple_implILm3EImSt17reference_wrapperISt6atomicIbEEEEC1IRmIS3_EvEEOT_DpOT0_>
  40881b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40881f:	48 89 c7             	mov    %rax,%rdi
  408822:	e8 d4 d0 ff ff       	callq  4058fb <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
  408827:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40882b:	48 83 c2 10          	add    $0x10,%rdx
  40882f:	48 89 c6             	mov    %rax,%rsi
  408832:	48 89 d7             	mov    %rdx,%rdi
  408835:	e8 7c ff ff ff       	callq  4087b6 <_ZNSt10_Head_baseILm2EmLb0EEC1ERKm>
  40883a:	48 83 c4 28          	add    $0x28,%rsp
  40883e:	5b                   	pop    %rbx
  40883f:	5d                   	pop    %rbp
  408840:	c3                   	retq   
  408841:	90                   	nop

0000000000408842 <_ZNSt11_Tuple_implILm1EISt17reference_wrapperIN7barrier35centralized_sense_reversing_barrierEEmmS0_ISt6atomicIbEEEEC1IS3_IRKmRmS6_EvEEOT_DpOT0_>:
      : _Inherited(__tail...), _Base(__head) { }

      template<typename _UHead, typename... _UTail, typename = typename
               enable_if<sizeof...(_Tail) == sizeof...(_UTail)>::type> 
        explicit
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
  408842:	55                   	push   %rbp
  408843:	48 89 e5             	mov    %rsp,%rbp
  408846:	41 54                	push   %r12
  408848:	53                   	push   %rbx
  408849:	48 83 ec 30          	sub    $0x30,%rsp
  40884d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  408851:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  408855:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  408859:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  40885d:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
	: _Inherited(std::forward<_UTail>(__tail)...),
  408861:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408865:	48 89 c7             	mov    %rax,%rdi
  408868:	e8 aa d0 ff ff       	callq  405917 <_ZSt7forwardISt17reference_wrapperISt6atomicIbEEEOT_RNSt16remove_referenceIS4_E4typeE>
  40886d:	49 89 c4             	mov    %rax,%r12
  408870:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408874:	48 89 c7             	mov    %rax,%rdi
  408877:	e8 8d d0 ff ff       	callq  405909 <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
  40887c:	48 89 c3             	mov    %rax,%rbx
  40887f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408883:	48 89 c7             	mov    %rax,%rdi
  408886:	e8 70 d0 ff ff       	callq  4058fb <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
  40888b:	48 89 c6             	mov    %rax,%rsi
	  _Base(std::forward<_UHead>(__head)) { }
  40888e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408892:	4c 89 e1             	mov    %r12,%rcx
  408895:	48 89 da             	mov    %rbx,%rdx
  408898:	48 89 c7             	mov    %rax,%rdi
  40889b:	e8 32 ff ff ff       	callq  4087d2 <_ZNSt11_Tuple_implILm2EImmSt17reference_wrapperISt6atomicIbEEEEC1IRKmIRmS3_EvEEOT_DpOT0_>
  4088a0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4088a4:	48 89 c7             	mov    %rax,%rdi
  4088a7:	e8 41 d0 ff ff       	callq  4058ed <_ZSt7forwardISt17reference_wrapperIN7barrier35centralized_sense_reversing_barrierEEEOT_RNSt16remove_referenceIS4_E4typeE>
  4088ac:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4088b0:	48 83 c2 18          	add    $0x18,%rdx
  4088b4:	48 89 c6             	mov    %rax,%rsi
  4088b7:	48 89 d7             	mov    %rdx,%rdi
  4088ba:	e8 49 ec ff ff       	callq  407508 <_ZNSt10_Head_baseILm1ESt17reference_wrapperIN7barrier35centralized_sense_reversing_barrierEELb0EEC1IS3_vEEOT_>
  4088bf:	48 83 c4 30          	add    $0x30,%rsp
  4088c3:	5b                   	pop    %rbx
  4088c4:	41 5c                	pop    %r12
  4088c6:	5d                   	pop    %rbp
  4088c7:	c3                   	retq   

00000000004088c8 <_ZNSt11_Tuple_implILm1EIddEEaSEOS0_>:
	_M_tail(*this) = _M_tail(__in);
	return *this;
      }

      _Tuple_impl&
      operator=(_Tuple_impl&& __in)
  4088c8:	55                   	push   %rbp
  4088c9:	48 89 e5             	mov    %rsp,%rbp
  4088cc:	53                   	push   %rbx
  4088cd:	48 83 ec 18          	sub    $0x18,%rsp
  4088d1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4088d5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      noexcept(__and_<is_nothrow_move_assignable<_Head>,
	              is_nothrow_move_assignable<_Inherited>>::value)
      {
	_M_head(*this) = std::forward<_Head>(_M_head(__in));
  4088d9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4088dd:	48 89 c7             	mov    %rax,%rdi
  4088e0:	e8 95 b8 ff ff       	callq  40417a <_ZNSt11_Tuple_implILm1EIddEE7_M_headERS0_>
  4088e5:	48 89 c3             	mov    %rax,%rbx
  4088e8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4088ec:	48 89 c7             	mov    %rax,%rdi
  4088ef:	e8 86 b8 ff ff       	callq  40417a <_ZNSt11_Tuple_implILm1EIddEE7_M_headERS0_>
  4088f4:	48 89 c7             	mov    %rax,%rdi
  4088f7:	e8 c2 b5 ff ff       	callq  403ebe <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
  4088fc:	48 8b 00             	mov    (%rax),%rax
  4088ff:	48 89 03             	mov    %rax,(%rbx)
	_M_tail(*this) = std::move(_M_tail(__in));
  408902:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408906:	48 89 c7             	mov    %rax,%rdi
  408909:	e8 42 b8 ff ff       	callq  404150 <_ZNSt11_Tuple_implILm1EIddEE7_M_tailERS0_>
  40890e:	48 89 c7             	mov    %rax,%rdi
  408911:	e8 48 b8 ff ff       	callq  40415e <_ZSt4moveIRSt11_Tuple_implILm2EIdEEEONSt16remove_referenceIT_E4typeEOS4_>
  408916:	48 89 c3             	mov    %rax,%rbx
  408919:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40891d:	48 89 c7             	mov    %rax,%rdi
  408920:	e8 2b b8 ff ff       	callq  404150 <_ZNSt11_Tuple_implILm1EIddEE7_M_tailERS0_>
  408925:	48 89 de             	mov    %rbx,%rsi
  408928:	48 89 c7             	mov    %rax,%rdi
  40892b:	e8 0e 0b 00 00       	callq  40943e <_ZNSt11_Tuple_implILm2EIdEEaSEOS0_>
	return *this;
  408930:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
  408934:	48 83 c4 18          	add    $0x18,%rsp
  408938:	5b                   	pop    %rbx
  408939:	5d                   	pop    %rbp
  40893a:	c3                   	retq   

000000000040893b <_ZNSt16allocator_traitsISaISt6vectorISt5tupleIIdddEESaIS2_EEEE37select_on_container_copy_constructionERKS5_>:
       *
       *  Returns @c __rhs.select_on_container_copy_construction() if that
       *  expression is well-formed, otherwise returns @a __rhs
      */
      static _Alloc
      select_on_container_copy_construction(const _Alloc& __rhs)
  40893b:	55                   	push   %rbp
  40893c:	48 89 e5             	mov    %rsp,%rbp
  40893f:	48 83 ec 10          	sub    $0x10,%rsp
  408943:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408947:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return _S_select(__rhs); }
  40894b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40894f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  408953:	48 89 d6             	mov    %rdx,%rsi
  408956:	48 89 c7             	mov    %rax,%rdi
  408959:	e8 45 0b 00 00       	callq  4094a3 <_ZNSt16allocator_traitsISaISt6vectorISt5tupleIIdddEESaIS2_EEEE9_S_selectIKS5_EENSt9enable_ifIXntsrNS6_15__select_helperIT_EE5valueESB_E4typeERSB_>
  40895e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408962:	c9                   	leaveq 
  408963:	c3                   	retq   

0000000000408964 <_ZNSaISt6vectorISt5tupleIIdddEESaIS1_EEEC1ERKS4_>:
      typedef true_type propagate_on_container_move_assignment;
#endif

      allocator() throw() { }

      allocator(const allocator& __a) throw()
  408964:	55                   	push   %rbp
  408965:	48 89 e5             	mov    %rsp,%rbp
  408968:	48 83 ec 10          	sub    $0x10,%rsp
  40896c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408970:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
  408974:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  408978:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40897c:	48 89 d6             	mov    %rdx,%rsi
  40897f:	48 89 c7             	mov    %rax,%rdi
  408982:	e8 45 0b 00 00       	callq  4094cc <_ZN9__gnu_cxx13new_allocatorISt6vectorISt5tupleIIdddEESaIS3_EEEC1ERKS6_>
  408987:	c9                   	leaveq 
  408988:	c3                   	retq   
  408989:	90                   	nop

000000000040898a <_ZN9__gnu_cxx13new_allocatorISt6vectorISt5tupleIIdddEESaIS3_EEED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  40898a:	55                   	push   %rbp
  40898b:	48 89 e5             	mov    %rsp,%rbp
  40898e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408992:	5d                   	pop    %rbp
  408993:	c3                   	retq   

0000000000408994 <_ZNSt12_Vector_baseISt6vectorISt5tupleIIdddEESaIS2_EESaIS4_EE12_Vector_implC1ERKS5_>:

	_Vector_impl()
	: _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
	{ }

	_Vector_impl(_Tp_alloc_type const& __a)
  408994:	55                   	push   %rbp
  408995:	48 89 e5             	mov    %rsp,%rbp
  408998:	48 83 ec 10          	sub    $0x10,%rsp
  40899c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4089a0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
  4089a4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4089a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4089ac:	48 89 d6             	mov    %rdx,%rsi
  4089af:	48 89 c7             	mov    %rax,%rdi
  4089b2:	e8 ad ff ff ff       	callq  408964 <_ZNSaISt6vectorISt5tupleIIdddEESaIS1_EEEC1ERKS4_>
  4089b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4089bb:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  4089c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4089c6:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  4089cd:	00 
  4089ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4089d2:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  4089d9:	00 
	{ }
  4089da:	c9                   	leaveq 
  4089db:	c3                   	retq   

00000000004089dc <_ZNSt12_Vector_baseISt6vectorISt5tupleIIdddEESaIS2_EESaIS4_EE17_M_create_storageEm>:
	  _M_impl.deallocate(__p, __n);
      }

    private:
      void
      _M_create_storage(size_t __n)
  4089dc:	55                   	push   %rbp
  4089dd:	48 89 e5             	mov    %rsp,%rbp
  4089e0:	48 83 ec 10          	sub    $0x10,%rsp
  4089e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4089e8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      {
	this->_M_impl._M_start = this->_M_allocate(__n);
  4089ec:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4089f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4089f4:	48 89 d6             	mov    %rdx,%rsi
  4089f7:	48 89 c7             	mov    %rax,%rdi
  4089fa:	e8 99 f7 ff ff       	callq  408198 <_ZNSt12_Vector_baseISt6vectorISt5tupleIIdddEESaIS2_EESaIS4_EE11_M_allocateEm>
  4089ff:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  408a03:	48 89 02             	mov    %rax,(%rdx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
  408a06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408a0a:	48 8b 10             	mov    (%rax),%rdx
  408a0d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408a11:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  408a15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408a19:	48 8b 08             	mov    (%rax),%rcx
  408a1c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  408a20:	48 89 d0             	mov    %rdx,%rax
  408a23:	48 01 c0             	add    %rax,%rax
  408a26:	48 01 d0             	add    %rdx,%rax
  408a29:	48 c1 e0 03          	shl    $0x3,%rax
  408a2d:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  408a31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408a35:	48 89 50 10          	mov    %rdx,0x10(%rax)
      }
  408a39:	c9                   	leaveq 
  408a3a:	c3                   	retq   
  408a3b:	90                   	nop

0000000000408a3c <_ZN9__gnu_cxx17__normal_iteratorIPKSt6vectorISt5tupleIIdddEESaIS3_EES1_IS5_SaIS5_EEEC1ERKS7_>:
      typedef typename __traits_type::pointer   	pointer;

      _GLIBCXX_CONSTEXPR __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
  408a3c:	55                   	push   %rbp
  408a3d:	48 89 e5             	mov    %rsp,%rbp
  408a40:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408a44:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  408a48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408a4c:	48 8b 10             	mov    (%rax),%rdx
  408a4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408a53:	48 89 10             	mov    %rdx,(%rax)
  408a56:	5d                   	pop    %rbp
  408a57:	c3                   	retq   

0000000000408a58 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorISt5tupleIIdddEESaIS4_EES2_IS6_SaIS6_EEEEPS6_ET0_T_SE_SD_>:
   *
   *  Like copy(), but does not require an initialized output range.
  */
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
  408a58:	55                   	push   %rbp
  408a59:	48 89 e5             	mov    %rsp,%rbp
  408a5c:	48 83 ec 20          	sub    $0x20,%rsp
  408a60:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  408a64:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  408a68:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;

      return std::__uninitialized_copy<(__is_trivial(_ValueType1)
					&& __is_trivial(_ValueType2))>::
	__uninit_copy(__first, __last, __result);
  408a6c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  408a70:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  408a74:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408a78:	48 89 ce             	mov    %rcx,%rsi
  408a7b:	48 89 c7             	mov    %rax,%rdi
  408a7e:	e8 57 0a 00 00       	callq  4094da <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorISt5tupleIIdddEESaIS6_EES4_IS8_SaIS8_EEEEPS8_EET0_T_SG_SF_>
    }
  408a83:	c9                   	leaveq 
  408a84:	c3                   	retq   
  408a85:	90                   	nop

0000000000408a86 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED1Ev>:
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
      
      virtual
      ~_Sp_counted_base() noexcept
  408a86:	55                   	push   %rbp
  408a87:	48 89 e5             	mov    %rsp,%rbp
  408a8a:	48 83 ec 10          	sub    $0x10,%rsp
  408a8e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { }
  408a92:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408a96:	48 c7 00 d0 c2 40 00 	movq   $0x40c2d0,(%rax)
  408a9d:	b8 00 00 00 00       	mov    $0x0,%eax
  408aa2:	85 c0                	test   %eax,%eax
  408aa4:	74 0c                	je     408ab2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED1Ev+0x2c>
  408aa6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408aaa:	48 89 c7             	mov    %rax,%rdi
  408aad:	e8 ae 8b ff ff       	callq  401660 <_ZdlPv@plt>
  408ab2:	c9                   	leaveq 
  408ab3:	c3                   	retq   

0000000000408ab4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED0Ev>:
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
      
      virtual
      ~_Sp_counted_base() noexcept
  408ab4:	55                   	push   %rbp
  408ab5:	48 89 e5             	mov    %rsp,%rbp
  408ab8:	48 83 ec 10          	sub    $0x10,%rsp
  408abc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { }
  408ac0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408ac4:	48 89 c7             	mov    %rax,%rdi
  408ac7:	e8 ba ff ff ff       	callq  408a86 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED1Ev>
  408acc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408ad0:	48 89 c7             	mov    %rax,%rdi
  408ad3:	e8 88 8b ff ff       	callq  401660 <_ZdlPv@plt>
  408ad8:	c9                   	leaveq 
  408ad9:	c3                   	retq   

0000000000408ada <_ZNSaIdEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. std::allocator propagate_on_container_move_assignment
      typedef true_type propagate_on_container_move_assignment;
#endif

      allocator() throw() { }
  408ada:	55                   	push   %rbp
  408adb:	48 89 e5             	mov    %rsp,%rbp
  408ade:	48 83 ec 10          	sub    $0x10,%rsp
  408ae2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408ae6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408aea:	48 89 c7             	mov    %rax,%rdi
  408aed:	e8 96 0a 00 00       	callq  409588 <_ZN9__gnu_cxx13new_allocatorIdEC1Ev>
  408af2:	c9                   	leaveq 
  408af3:	c3                   	retq   

0000000000408af4 <_ZN9__gnu_cxx13new_allocatorIdED1Ev>:
  408af4:	55                   	push   %rbp
  408af5:	48 89 e5             	mov    %rsp,%rbp
  408af8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408afc:	5d                   	pop    %rbp
  408afd:	c3                   	retq   

0000000000408afe <_ZNSt12_Destroy_auxILb1EE9__destroyIPdEEvT_S3_>:
  template<>
    struct _Destroy_aux<true>
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator, _ForwardIterator) { }
  408afe:	55                   	push   %rbp
  408aff:	48 89 e5             	mov    %rsp,%rbp
  408b02:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408b06:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  408b0a:	5d                   	pop    %rbp
  408b0b:	c3                   	retq   

0000000000408b0c <_ZNSt16allocator_traitsISaIdEE11_S_max_sizeIKS0_EENSt9enable_ifIXsrNS1_16__maxsize_helperIT_EE5valueEmE4typeERS6_>:
	};

      template<typename _Alloc2>
	static typename
       	enable_if<__maxsize_helper<_Alloc2>::value, size_type>::type
       	_S_max_size(_Alloc2& __a)
  408b0c:	55                   	push   %rbp
  408b0d:	48 89 e5             	mov    %rsp,%rbp
  408b10:	48 83 ec 10          	sub    $0x10,%rsp
  408b14:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{ return __a.max_size(); }
  408b18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408b1c:	48 89 c7             	mov    %rax,%rdi
  408b1f:	e8 6e 0a 00 00       	callq  409592 <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>
  408b24:	c9                   	leaveq 
  408b25:	c3                   	retq   

0000000000408b26 <_ZN9__gnu_cxx13new_allocatorIdE8allocateEmPKv>:
      { return std::__addressof(__x); }

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
  408b26:	55                   	push   %rbp
  408b27:	48 89 e5             	mov    %rsp,%rbp
  408b2a:	48 83 ec 20          	sub    $0x20,%rsp
  408b2e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408b32:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  408b36:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { 
	if (__n > this->max_size())
  408b3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408b3e:	48 89 c7             	mov    %rax,%rdi
  408b41:	e8 4c 0a 00 00       	callq  409592 <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>
  408b46:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  408b4a:	0f 92 c0             	setb   %al
  408b4d:	84 c0                	test   %al,%al
  408b4f:	74 05                	je     408b56 <_ZN9__gnu_cxx13new_allocatorIdE8allocateEmPKv+0x30>
	  std::__throw_bad_alloc();
  408b51:	e8 4a 8d ff ff       	callq  4018a0 <_ZSt17__throw_bad_allocv@plt>

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  408b56:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408b5a:	48 c1 e0 03          	shl    $0x3,%rax
  408b5e:	48 89 c7             	mov    %rax,%rdi
  408b61:	e8 aa 8d ff ff       	callq  401910 <_Znwm@plt>
      }
  408b66:	c9                   	leaveq 
  408b67:	c3                   	retq   

0000000000408b68 <_ZSt18uninitialized_copyISt13move_iteratorIPdES1_ET0_T_S4_S3_>:
   *
   *  Like copy(), but does not require an initialized output range.
  */
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
  408b68:	55                   	push   %rbp
  408b69:	48 89 e5             	mov    %rsp,%rbp
  408b6c:	48 83 ec 20          	sub    $0x20,%rsp
  408b70:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  408b74:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  408b78:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;

      return std::__uninitialized_copy<(__is_trivial(_ValueType1)
					&& __is_trivial(_ValueType2))>::
	__uninit_copy(__first, __last, __result);
  408b7c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  408b80:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  408b84:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408b88:	48 89 ce             	mov    %rcx,%rsi
  408b8b:	48 89 c7             	mov    %rax,%rdi
  408b8e:	e8 13 0a 00 00       	callq  4095a6 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPdES3_EET0_T_S6_S5_>
    }
  408b93:	c9                   	leaveq 
  408b94:	c3                   	retq   
  408b95:	90                   	nop

0000000000408b96 <_ZN9__gnu_cxx13new_allocatorIdE9constructIdIRKdEEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
  408b96:	55                   	push   %rbp
  408b97:	48 89 e5             	mov    %rsp,%rbp
  408b9a:	53                   	push   %rbx
  408b9b:	48 83 ec 28          	sub    $0x28,%rsp
  408b9f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  408ba3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  408ba7:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  408bab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408baf:	48 89 c7             	mov    %rax,%rdi
  408bb2:	e8 65 c5 ff ff       	callq  40511c <_ZSt7forwardIRKdEOT_RNSt16remove_referenceIS2_E4typeE>
  408bb7:	48 8b 18             	mov    (%rax),%rbx
  408bba:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408bbe:	48 89 c6             	mov    %rax,%rsi
  408bc1:	bf 08 00 00 00       	mov    $0x8,%edi
  408bc6:	e8 92 af ff ff       	callq  403b5d <_ZnwmPv>
  408bcb:	48 85 c0             	test   %rax,%rax
  408bce:	74 03                	je     408bd3 <_ZN9__gnu_cxx13new_allocatorIdE9constructIdIRKdEEEvPT_DpOT0_+0x3d>
  408bd0:	48 89 18             	mov    %rbx,(%rax)
  408bd3:	48 83 c4 28          	add    $0x28,%rsp
  408bd7:	5b                   	pop    %rbx
  408bd8:	5d                   	pop    %rbp
  408bd9:	c3                   	retq   

0000000000408bda <_ZSt3maxImERKT_S2_S2_>:
   *  temporary expressions, since they are only evaluated once, unlike a
   *  preprocessor macro.
  */
  template<typename _Tp>
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
  408bda:	55                   	push   %rbp
  408bdb:	48 89 e5             	mov    %rsp,%rbp
  408bde:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408be2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
  408be6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408bea:	48 8b 10             	mov    (%rax),%rdx
  408bed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408bf1:	48 8b 00             	mov    (%rax),%rax
  408bf4:	48 39 c2             	cmp    %rax,%rdx
  408bf7:	73 06                	jae    408bff <_ZSt3maxImERKT_S2_S2_+0x25>
	return __b;
  408bf9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408bfd:	eb 04                	jmp    408c03 <_ZSt3maxImERKT_S2_S2_+0x29>
      return __a;
  408bff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  408c03:	5d                   	pop    %rbp
  408c04:	c3                   	retq   

0000000000408c05 <_ZNSt16allocator_traitsISaIdEE10_S_destroyIdEENSt9enable_ifIXsrNS1_16__destroy_helperIT_EE5valueEvE4typeERS0_PS5_>:
	  static const bool value = type::value;
	};

      template<typename _Tp>
	static typename enable_if<__destroy_helper<_Tp>::value, void>::type
       	_S_destroy(_Alloc& __a, _Tp* __p)
  408c05:	55                   	push   %rbp
  408c06:	48 89 e5             	mov    %rsp,%rbp
  408c09:	48 83 ec 10          	sub    $0x10,%rsp
  408c0d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408c11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ __a.destroy(__p); }
  408c15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  408c19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408c1d:	48 89 d6             	mov    %rdx,%rsi
  408c20:	48 89 c7             	mov    %rax,%rdi
  408c23:	e8 ac 09 00 00       	callq  4095d4 <_ZN9__gnu_cxx13new_allocatorIdE7destroyIdEEvPT_>
  408c28:	c9                   	leaveq 
  408c29:	c3                   	retq   

0000000000408c2a <_ZNSaISt6threadEC1Ev>:
  408c2a:	55                   	push   %rbp
  408c2b:	48 89 e5             	mov    %rsp,%rbp
  408c2e:	48 83 ec 10          	sub    $0x10,%rsp
  408c32:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408c36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408c3a:	48 89 c7             	mov    %rax,%rdi
  408c3d:	e8 a0 09 00 00       	callq  4095e2 <_ZN9__gnu_cxx13new_allocatorISt6threadEC1Ev>
  408c42:	c9                   	leaveq 
  408c43:	c3                   	retq   

0000000000408c44 <_ZN9__gnu_cxx13new_allocatorISt6threadED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  408c44:	55                   	push   %rbp
  408c45:	48 89 e5             	mov    %rsp,%rbp
  408c48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408c4c:	5d                   	pop    %rbp
  408c4d:	c3                   	retq   

0000000000408c4e <_ZN9__gnu_cxx13new_allocatorISt6threadE10deallocateEPS1_m>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
  408c4e:	55                   	push   %rbp
  408c4f:	48 89 e5             	mov    %rsp,%rbp
  408c52:	48 83 ec 20          	sub    $0x20,%rsp
  408c56:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408c5a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  408c5e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { ::operator delete(__p); }
  408c62:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408c66:	48 89 c7             	mov    %rax,%rdi
  408c69:	e8 f2 89 ff ff       	callq  401660 <_ZdlPv@plt>
  408c6e:	c9                   	leaveq 
  408c6f:	c3                   	retq   

0000000000408c70 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6threadEEvT_S4_>:
  template<bool>
    struct _Destroy_aux
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
  408c70:	55                   	push   %rbp
  408c71:	48 89 e5             	mov    %rsp,%rbp
  408c74:	48 83 ec 10          	sub    $0x10,%rsp
  408c78:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408c7c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{
	  for (; __first != __last; ++__first)
  408c80:	eb 19                	jmp    408c9b <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6threadEEvT_S4_+0x2b>
	    std::_Destroy(std::__addressof(*__first));
  408c82:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408c86:	48 89 c7             	mov    %rax,%rdi
  408c89:	e8 5e 09 00 00       	callq  4095ec <_ZSt11__addressofISt6threadEPT_RS1_>
  408c8e:	48 89 c7             	mov    %rax,%rdi
  408c91:	e8 64 09 00 00       	callq  4095fa <_ZSt8_DestroyISt6threadEvPT_>
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
  408c96:	48 83 45 f8 08       	addq   $0x8,-0x8(%rbp)
  408c9b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408c9f:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  408ca3:	75 dd                	jne    408c82 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6threadEEvT_S4_+0x12>
	    std::_Destroy(std::__addressof(*__first));
	}
  408ca5:	c9                   	leaveq 
  408ca6:	c3                   	retq   
  408ca7:	90                   	nop

0000000000408ca8 <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEEC1Ev>:
  408ca8:	55                   	push   %rbp
  408ca9:	48 89 e5             	mov    %rsp,%rbp
  408cac:	48 83 ec 10          	sub    $0x10,%rsp
  408cb0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408cb4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408cb8:	48 89 c7             	mov    %rax,%rdi
  408cbb:	e8 54 09 00 00       	callq  409614 <_ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEEC1Ev>
  408cc0:	c9                   	leaveq 
  408cc1:	c3                   	retq   

0000000000408cc2 <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
  408cc2:	55                   	push   %rbp
  408cc3:	48 89 e5             	mov    %rsp,%rbp
  408cc6:	48 83 ec 10          	sub    $0x10,%rsp
  408cca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408cce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408cd2:	48 89 c7             	mov    %rax,%rdi
  408cd5:	e8 44 09 00 00       	callq  40961e <_ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEED1Ev>
  408cda:	c9                   	leaveq 
  408cdb:	c3                   	retq   

0000000000408cdc <_ZSt15allocate_sharedINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaIS8_EIS7_EESt10shared_ptrIT_ERKT0_DpOT1_>:
   *  A copy of @a __a will be used to allocate memory for the shared_ptr
   *  and the new object.
   */
  template<typename _Tp, typename _Alloc, typename... _Args>
    inline shared_ptr<_Tp>
    allocate_shared(const _Alloc& __a, _Args&&... __args)
  408cdc:	55                   	push   %rbp
  408cdd:	48 89 e5             	mov    %rsp,%rbp
  408ce0:	53                   	push   %rbx
  408ce1:	48 83 ec 38          	sub    $0x38,%rsp
  408ce5:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  408ce9:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  408ced:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    {
      return shared_ptr<_Tp>(_Sp_make_shared_tag(), __a,
			     std::forward<_Args>(__args)...);
  408cf1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408cf5:	48 89 c7             	mov    %rax,%rdi
  408cf8:	e8 ce d5 ff ff       	callq  4062cb <_ZSt7forwardISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEOT_RNSt16remove_referenceIS6_E4typeE>
  408cfd:	48 89 c2             	mov    %rax,%rdx
  408d00:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  408d04:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408d08:	88 1c 24             	mov    %bl,(%rsp)
  408d0b:	48 89 ce             	mov    %rcx,%rsi
  408d0e:	48 89 c7             	mov    %rax,%rdi
  408d11:	e8 12 09 00 00       	callq  409628 <_ZNSt10shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEEC1ISaIS8_EIS7_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
  408d16:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408d1a:	48 83 c4 38          	add    $0x38,%rsp
  408d1e:	5b                   	pop    %rbx
  408d1f:	5d                   	pop    %rbp
  408d20:	c3                   	retq   
  408d21:	90                   	nop

0000000000408d22 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EE7_M_swapERS2_>:
	  }
	return *this;
      }

      void
      _M_swap(__shared_count& __r) noexcept
  408d22:	55                   	push   %rbp
  408d23:	48 89 e5             	mov    %rsp,%rbp
  408d26:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  408d2a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
  408d2e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408d32:	48 8b 00             	mov    (%rax),%rax
  408d35:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	__r._M_pi = _M_pi;
  408d39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408d3d:	48 8b 10             	mov    (%rax),%rdx
  408d40:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408d44:	48 89 10             	mov    %rdx,(%rax)
	_M_pi = __tmp;
  408d47:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408d4b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  408d4f:	48 89 10             	mov    %rdx,(%rax)
      }
  408d52:	5d                   	pop    %rbp
  408d53:	c3                   	retq   

0000000000408d54 <_ZNSt16allocator_traitsISaISt6threadEE12_S_constructIS0_IS0_EEENSt9enable_ifIXsrNS2_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS1_PS6_DpOS7_>:
	};

      template<typename _Tp, typename... _Args>
	static typename
       	enable_if<__construct_helper<_Tp, _Args...>::value, void>::type
       	_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
  408d54:	55                   	push   %rbp
  408d55:	48 89 e5             	mov    %rsp,%rbp
  408d58:	48 83 ec 20          	sub    $0x20,%rsp
  408d5c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408d60:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  408d64:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
  408d68:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408d6c:	48 89 c7             	mov    %rax,%rdi
  408d6f:	e8 dc d5 ff ff       	callq  406350 <_ZSt7forwardISt6threadEOT_RNSt16remove_referenceIS1_E4typeE>
  408d74:	48 89 c2             	mov    %rax,%rdx
  408d77:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  408d7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408d7f:	48 89 ce             	mov    %rcx,%rsi
  408d82:	48 89 c7             	mov    %rax,%rdi
  408d85:	e8 e0 08 00 00       	callq  40966a <_ZN9__gnu_cxx13new_allocatorISt6threadE9constructIS1_IS1_EEEvPT_DpOT0_>
  408d8a:	c9                   	leaveq 
  408d8b:	c3                   	retq   

0000000000408d8c <_ZNKSt6vectorISt6threadSaIS0_EE12_M_check_lenEmPKc>:
        _M_emplace_back_aux(_Args&&... __args);
#endif

      // Called by the latter.
      size_type
      _M_check_len(size_type __n, const char* __s) const
  408d8c:	55                   	push   %rbp
  408d8d:	48 89 e5             	mov    %rsp,%rbp
  408d90:	53                   	push   %rbx
  408d91:	48 83 ec 38          	sub    $0x38,%rsp
  408d95:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  408d99:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  408d9d:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      {
	if (max_size() - size() < __n)
  408da1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408da5:	48 89 c7             	mov    %rax,%rdi
  408da8:	e8 09 09 00 00       	callq  4096b6 <_ZNKSt6vectorISt6threadSaIS0_EE8max_sizeEv>
  408dad:	48 89 c3             	mov    %rax,%rbx
  408db0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408db4:	48 89 c7             	mov    %rax,%rdi
  408db7:	e8 d2 00 00 00       	callq  408e8e <_ZNKSt6vectorISt6threadSaIS0_EE4sizeEv>
  408dbc:	48 29 c3             	sub    %rax,%rbx
  408dbf:	48 89 da             	mov    %rbx,%rdx
  408dc2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408dc6:	48 39 c2             	cmp    %rax,%rdx
  408dc9:	0f 92 c0             	setb   %al
  408dcc:	84 c0                	test   %al,%al
  408dce:	74 0c                	je     408ddc <_ZNKSt6vectorISt6threadSaIS0_EE12_M_check_lenEmPKc+0x50>
	  __throw_length_error(__N(__s));
  408dd0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408dd4:	48 89 c7             	mov    %rax,%rdi
  408dd7:	e8 34 88 ff ff       	callq  401610 <_ZSt20__throw_length_errorPKc@plt>

	const size_type __len = size() + std::max(size(), __n);
  408ddc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408de0:	48 89 c7             	mov    %rax,%rdi
  408de3:	e8 a6 00 00 00       	callq  408e8e <_ZNKSt6vectorISt6threadSaIS0_EE4sizeEv>
  408de8:	48 89 c3             	mov    %rax,%rbx
  408deb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408def:	48 89 c7             	mov    %rax,%rdi
  408df2:	e8 97 00 00 00       	callq  408e8e <_ZNKSt6vectorISt6threadSaIS0_EE4sizeEv>
  408df7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  408dfb:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  408dff:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  408e03:	48 89 d6             	mov    %rdx,%rsi
  408e06:	48 89 c7             	mov    %rax,%rdi
  408e09:	e8 cc fd ff ff       	callq  408bda <_ZSt3maxImERKT_S2_S2_>
  408e0e:	48 8b 00             	mov    (%rax),%rax
  408e11:	48 01 d8             	add    %rbx,%rax
  408e14:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  408e18:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408e1c:	48 89 c7             	mov    %rax,%rdi
  408e1f:	e8 6a 00 00 00       	callq  408e8e <_ZNKSt6vectorISt6threadSaIS0_EE4sizeEv>
  408e24:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  408e28:	77 12                	ja     408e3c <_ZNKSt6vectorISt6threadSaIS0_EE12_M_check_lenEmPKc+0xb0>
  408e2a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408e2e:	48 89 c7             	mov    %rax,%rdi
  408e31:	e8 80 08 00 00       	callq  4096b6 <_ZNKSt6vectorISt6threadSaIS0_EE8max_sizeEv>
  408e36:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  408e3a:	73 0e                	jae    408e4a <_ZNKSt6vectorISt6threadSaIS0_EE12_M_check_lenEmPKc+0xbe>
  408e3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408e40:	48 89 c7             	mov    %rax,%rdi
  408e43:	e8 6e 08 00 00       	callq  4096b6 <_ZNKSt6vectorISt6threadSaIS0_EE8max_sizeEv>
  408e48:	eb 04                	jmp    408e4e <_ZNKSt6vectorISt6threadSaIS0_EE12_M_check_lenEmPKc+0xc2>
  408e4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
  408e4e:	48 83 c4 38          	add    $0x38,%rsp
  408e52:	5b                   	pop    %rbx
  408e53:	5d                   	pop    %rbp
  408e54:	c3                   	retq   
  408e55:	90                   	nop

0000000000408e56 <_ZNSt12_Vector_baseISt6threadSaIS0_EE11_M_allocateEm>:

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
  408e56:	55                   	push   %rbp
  408e57:	48 89 e5             	mov    %rsp,%rbp
  408e5a:	48 83 ec 10          	sub    $0x10,%rsp
  408e5e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408e62:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }
  408e66:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  408e6b:	74 1a                	je     408e87 <_ZNSt12_Vector_baseISt6threadSaIS0_EE11_M_allocateEm+0x31>
  408e6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408e71:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  408e75:	ba 00 00 00 00       	mov    $0x0,%edx
  408e7a:	48 89 ce             	mov    %rcx,%rsi
  408e7d:	48 89 c7             	mov    %rax,%rdi
  408e80:	e8 53 08 00 00       	callq  4096d8 <_ZN9__gnu_cxx13new_allocatorISt6threadE8allocateEmPKv>
  408e85:	eb 05                	jmp    408e8c <_ZNSt12_Vector_baseISt6threadSaIS0_EE11_M_allocateEm+0x36>
  408e87:	b8 00 00 00 00       	mov    $0x0,%eax
  408e8c:	c9                   	leaveq 
  408e8d:	c3                   	retq   

0000000000408e8e <_ZNKSt6vectorISt6threadSaIS0_EE4sizeEv>:
#endif

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
  408e8e:	55                   	push   %rbp
  408e8f:	48 89 e5             	mov    %rsp,%rbp
  408e92:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  408e96:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408e9a:	48 8b 40 08          	mov    0x8(%rax),%rax
  408e9e:	48 89 c2             	mov    %rax,%rdx
  408ea1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408ea5:	48 8b 00             	mov    (%rax),%rax
  408ea8:	48 29 c2             	sub    %rax,%rdx
  408eab:	48 89 d0             	mov    %rdx,%rax
  408eae:	48 c1 f8 03          	sar    $0x3,%rax
  408eb2:	5d                   	pop    %rbp
  408eb3:	c3                   	retq   

0000000000408eb4 <_ZSt34__uninitialized_move_if_noexcept_aIPSt6threadS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
  408eb4:	55                   	push   %rbp
  408eb5:	48 89 e5             	mov    %rsp,%rbp
  408eb8:	53                   	push   %rbx
  408eb9:	48 83 ec 28          	sub    $0x28,%rsp
  408ebd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  408ec1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  408ec5:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  408ec9:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
  408ecd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408ed1:	48 89 c7             	mov    %rax,%rdi
  408ed4:	e8 41 08 00 00       	callq  40971a <_ZSt32__make_move_if_noexcept_iteratorIPSt6threadSt13move_iteratorIS1_EET0_T_>
  408ed9:	48 89 c3             	mov    %rax,%rbx
  408edc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408ee0:	48 89 c7             	mov    %rax,%rdi
  408ee3:	e8 32 08 00 00       	callq  40971a <_ZSt32__make_move_if_noexcept_iteratorIPSt6threadSt13move_iteratorIS1_EET0_T_>
  408ee8:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  408eec:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  408ef0:	48 89 de             	mov    %rbx,%rsi
  408ef3:	48 89 c7             	mov    %rax,%rdi
  408ef6:	e8 44 08 00 00       	callq  40973f <_ZSt22__uninitialized_copy_aISt13move_iteratorIPSt6threadES2_S1_ET0_T_S5_S4_RSaIT1_E>
    }
  408efb:	48 83 c4 28          	add    $0x28,%rsp
  408eff:	5b                   	pop    %rbx
  408f00:	5d                   	pop    %rbp
  408f01:	c3                   	retq   

0000000000408f02 <_ZNSt16allocator_traitsISaISt6threadEE7destroyIS0_EEvRS1_PT_>:
       *
       *  Calls @c __a.destroy(__p) if that expression is well-formed,
       *  otherwise calls @c __p->~_Tp()
      */
      template <class _Tp>
	static void destroy(_Alloc& __a, _Tp* __p)
  408f02:	55                   	push   %rbp
  408f03:	48 89 e5             	mov    %rsp,%rbp
  408f06:	48 83 ec 10          	sub    $0x10,%rsp
  408f0a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408f0e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ _S_destroy(__a, __p); }
  408f12:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  408f16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408f1a:	48 89 d6             	mov    %rdx,%rsi
  408f1d:	48 89 c7             	mov    %rax,%rdi
  408f20:	e8 4b 08 00 00       	callq  409770 <_ZNSt16allocator_traitsISaISt6threadEE10_S_destroyIS0_EENSt9enable_ifIXsrNS2_16__destroy_helperIT_EE5valueEvE4typeERS1_PS6_>
  408f25:	c9                   	leaveq 
  408f26:	c3                   	retq   

0000000000408f27 <_ZNSt8__detail4_ModImLm4294967296ELm1ELm0ELb1ELb1EE6__calcEm>:
    // - a * (m - 1) + c fits in _Tp, there is no overflow.
    template<typename _Tp, _Tp __m, _Tp __a, _Tp __c, bool __s>
      struct _Mod<_Tp, __m, __a, __c, true, __s>
      {
	static _Tp
	__calc(_Tp __x)
  408f27:	55                   	push   %rbp
  408f28:	48 89 e5             	mov    %rsp,%rbp
  408f2b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	{
	  _Tp __res = __a * __x + __c;
  408f2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408f33:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  if (__m)
	    __res %= __m;
  408f37:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  408f3c:	48 21 45 f8          	and    %rax,-0x8(%rbp)
	  return __res;
  408f40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
	}
  408f44:	5d                   	pop    %rbp
  408f45:	c3                   	retq   

0000000000408f46 <_ZNSt8__detail4_ModImLm624ELm1ELm0ELb1ELb1EE6__calcEm>:
    // - a * (m - 1) + c fits in _Tp, there is no overflow.
    template<typename _Tp, _Tp __m, _Tp __a, _Tp __c, bool __s>
      struct _Mod<_Tp, __m, __a, __c, true, __s>
      {
	static _Tp
	__calc(_Tp __x)
  408f46:	55                   	push   %rbp
  408f47:	48 89 e5             	mov    %rsp,%rbp
  408f4a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	{
	  _Tp __res = __a * __x + __c;
  408f4e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408f52:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  if (__m)
	    __res %= __m;
  408f56:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  408f5a:	48 89 c8             	mov    %rcx,%rax
  408f5d:	48 c1 e8 04          	shr    $0x4,%rax
  408f61:	48 ba 21 0d d2 20 0d 	movabs $0xd20d20d20d20d21,%rdx
  408f68:	d2 20 0d 
  408f6b:	48 f7 e2             	mul    %rdx
  408f6e:	48 89 d0             	mov    %rdx,%rax
  408f71:	48 d1 e8             	shr    %rax
  408f74:	48 69 c0 70 02 00 00 	imul   $0x270,%rax,%rax
  408f7b:	48 29 c1             	sub    %rax,%rcx
  408f7e:	48 89 c8             	mov    %rcx,%rax
  408f81:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  return __res;
  408f85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
	}
  408f89:	5d                   	pop    %rbp
  408f8a:	c3                   	retq   
  408f8b:	90                   	nop

0000000000408f8c <_ZNSaISt6vectorISt5tupleIIdddEESaIS1_EEEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. std::allocator propagate_on_container_move_assignment
      typedef true_type propagate_on_container_move_assignment;
#endif

      allocator() throw() { }
  408f8c:	55                   	push   %rbp
  408f8d:	48 89 e5             	mov    %rsp,%rbp
  408f90:	48 83 ec 10          	sub    $0x10,%rsp
  408f94:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408f98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408f9c:	48 89 c7             	mov    %rax,%rdi
  408f9f:	e8 f2 07 00 00       	callq  409796 <_ZN9__gnu_cxx13new_allocatorISt6vectorISt5tupleIIdddEESaIS3_EEEC1Ev>
  408fa4:	c9                   	leaveq 
  408fa5:	c3                   	retq   

0000000000408fa6 <_ZN9__gnu_cxx13new_allocatorISt6vectorISt5tupleIIdddEESaIS3_EEE10deallocateEPS5_m>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
  408fa6:	55                   	push   %rbp
  408fa7:	48 89 e5             	mov    %rsp,%rbp
  408faa:	48 83 ec 20          	sub    $0x20,%rsp
  408fae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408fb2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  408fb6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { ::operator delete(__p); }
  408fba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408fbe:	48 89 c7             	mov    %rax,%rdi
  408fc1:	e8 9a 86 ff ff       	callq  401660 <_ZdlPv@plt>
  408fc6:	c9                   	leaveq 
  408fc7:	c3                   	retq   

0000000000408fc8 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorISt5tupleIIdddEESaIS4_EEEEvT_S8_>:
  template<bool>
    struct _Destroy_aux
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
  408fc8:	55                   	push   %rbp
  408fc9:	48 89 e5             	mov    %rsp,%rbp
  408fcc:	48 83 ec 10          	sub    $0x10,%rsp
  408fd0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408fd4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{
	  for (; __first != __last; ++__first)
  408fd8:	eb 19                	jmp    408ff3 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorISt5tupleIIdddEESaIS4_EEEEvT_S8_+0x2b>
	    std::_Destroy(std::__addressof(*__first));
  408fda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408fde:	48 89 c7             	mov    %rax,%rdi
  408fe1:	e8 ba 07 00 00       	callq  4097a0 <_ZSt11__addressofISt6vectorISt5tupleIIdddEESaIS2_EEEPT_RS5_>
  408fe6:	48 89 c7             	mov    %rax,%rdi
  408fe9:	e8 c0 07 00 00       	callq  4097ae <_ZSt8_DestroyISt6vectorISt5tupleIIdddEESaIS2_EEEvPT_>
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
  408fee:	48 83 45 f8 18       	addq   $0x18,-0x8(%rbp)
  408ff3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408ff7:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  408ffb:	75 dd                	jne    408fda <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorISt5tupleIIdddEESaIS4_EEEEvT_S8_+0x12>
	    std::_Destroy(std::__addressof(*__first));
	}
  408ffd:	c9                   	leaveq 
  408ffe:	c3                   	retq   

0000000000408fff <_ZSt25__uninitialized_default_nIPSt6vectorISt5tupleIIdddEESaIS2_EEmEvT_T0_>:

  // __uninitialized_default_n
  // Fills [first, first + n) with n default constructed value_type(s).
  template<typename _ForwardIterator, typename _Size>
    inline void
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
  408fff:	55                   	push   %rbp
  409000:	48 89 e5             	mov    %rsp,%rbp
  409003:	48 83 ec 10          	sub    $0x10,%rsp
  409007:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40900b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType;

      std::__uninitialized_default_n_1<__is_trivial(_ValueType)>::
  40900f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  409013:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409017:	48 89 d6             	mov    %rdx,%rsi
  40901a:	48 89 c7             	mov    %rax,%rdi
  40901d:	e8 a6 07 00 00       	callq  4097c8 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPSt6vectorISt5tupleIIdddEESaIS4_EEmEEvT_T0_>
	__uninit_default_n(__first, __n);
    }
  409022:	c9                   	leaveq 
  409023:	c3                   	retq   

0000000000409024 <_ZNKSt6vectorIS_ISt5tupleIIdddEESaIS1_EESaIS3_EE8max_sizeEv>:

      /**  Returns the size() of the largest possible %vector.  */
      size_type
      max_size() const _GLIBCXX_NOEXCEPT
  409024:	55                   	push   %rbp
  409025:	48 89 e5             	mov    %rsp,%rbp
  409028:	48 83 ec 10          	sub    $0x10,%rsp
  40902c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
  409030:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409034:	48 89 c7             	mov    %rax,%rdi
  409037:	e8 32 e6 ff ff       	callq  40766e <_ZNKSt12_Vector_baseISt6vectorISt5tupleIIdddEESaIS2_EESaIS4_EE19_M_get_Tp_allocatorEv>
  40903c:	48 89 c7             	mov    %rax,%rdi
  40903f:	e8 00 08 00 00       	callq  409844 <_ZNSt16allocator_traitsISaISt6vectorISt5tupleIIdddEESaIS2_EEEE8max_sizeERKS5_>
  409044:	c9                   	leaveq 
  409045:	c3                   	retq   

0000000000409046 <_ZN9__gnu_cxx13new_allocatorISt6vectorISt5tupleIIdddEESaIS3_EEE8allocateEmPKv>:
      { return std::__addressof(__x); }

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
  409046:	55                   	push   %rbp
  409047:	48 89 e5             	mov    %rsp,%rbp
  40904a:	48 83 ec 20          	sub    $0x20,%rsp
  40904e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409052:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  409056:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { 
	if (__n > this->max_size())
  40905a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40905e:	48 89 c7             	mov    %rax,%rdi
  409061:	e8 f8 07 00 00       	callq  40985e <_ZNK9__gnu_cxx13new_allocatorISt6vectorISt5tupleIIdddEESaIS3_EEE8max_sizeEv>
  409066:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  40906a:	0f 92 c0             	setb   %al
  40906d:	84 c0                	test   %al,%al
  40906f:	74 05                	je     409076 <_ZN9__gnu_cxx13new_allocatorISt6vectorISt5tupleIIdddEESaIS3_EEE8allocateEmPKv+0x30>
	  std::__throw_bad_alloc();
  409071:	e8 2a 88 ff ff       	callq  4018a0 <_ZSt17__throw_bad_allocv@plt>

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  409076:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40907a:	48 89 d0             	mov    %rdx,%rax
  40907d:	48 01 c0             	add    %rax,%rax
  409080:	48 01 d0             	add    %rdx,%rax
  409083:	48 c1 e0 03          	shl    $0x3,%rax
  409087:	48 89 c7             	mov    %rax,%rdi
  40908a:	e8 81 88 ff ff       	callq  401910 <_Znwm@plt>
      }
  40908f:	c9                   	leaveq 
  409090:	c3                   	retq   

0000000000409091 <_ZSt32__make_move_if_noexcept_iteratorIPSt6vectorISt5tupleIIdddEESaIS2_EESt13move_iteratorIS5_EET0_T_>:
  template<typename _Iterator, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond
      <typename iterator_traits<_Iterator>::value_type>::value,
                _Iterator, move_iterator<_Iterator>>::type>
    inline _ReturnType
    __make_move_if_noexcept_iterator(_Iterator __i)
  409091:	55                   	push   %rbp
  409092:	48 89 e5             	mov    %rsp,%rbp
  409095:	48 83 ec 20          	sub    $0x20,%rsp
  409099:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return _ReturnType(__i); }
  40909d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4090a1:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  4090a5:	48 89 d6             	mov    %rdx,%rsi
  4090a8:	48 89 c7             	mov    %rax,%rdi
  4090ab:	e8 c2 07 00 00       	callq  409872 <_ZNSt13move_iteratorIPSt6vectorISt5tupleIIdddEESaIS2_EEEC1ES5_>
  4090b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4090b4:	c9                   	leaveq 
  4090b5:	c3                   	retq   

00000000004090b6 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPSt6vectorISt5tupleIIdddEESaIS3_EEES6_S5_ET0_T_S9_S8_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
  4090b6:	55                   	push   %rbp
  4090b7:	48 89 e5             	mov    %rsp,%rbp
  4090ba:	48 83 ec 20          	sub    $0x20,%rsp
  4090be:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  4090c2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4090c6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4090ca:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
  4090ce:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4090d2:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4090d6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4090da:	48 89 ce             	mov    %rcx,%rsi
  4090dd:	48 89 c7             	mov    %rax,%rdi
  4090e0:	e8 a6 07 00 00       	callq  40988b <_ZSt18uninitialized_copyISt13move_iteratorIPSt6vectorISt5tupleIIdddEESaIS3_EEES6_ET0_T_S9_S8_>
  4090e5:	c9                   	leaveq 
  4090e6:	c3                   	retq   

00000000004090e7 <_ZSt25__uninitialized_default_nIPSt5tupleIIdddEEmEvT_T0_>:

  // __uninitialized_default_n
  // Fills [first, first + n) with n default constructed value_type(s).
  template<typename _ForwardIterator, typename _Size>
    inline void
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
  4090e7:	55                   	push   %rbp
  4090e8:	48 89 e5             	mov    %rsp,%rbp
  4090eb:	48 83 ec 10          	sub    $0x10,%rsp
  4090ef:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4090f3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType;

      std::__uninitialized_default_n_1<__is_trivial(_ValueType)>::
  4090f7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4090fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4090ff:	48 89 d6             	mov    %rdx,%rsi
  409102:	48 89 c7             	mov    %rax,%rdi
  409105:	e8 ae 07 00 00       	callq  4098b8 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPSt5tupleIIdddEEmEEvT_T0_>
	__uninit_default_n(__first, __n);
    }
  40910a:	c9                   	leaveq 
  40910b:	c3                   	retq   

000000000040910c <_ZNKSt6vectorISt5tupleIIdddEESaIS1_EE8max_sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }

      /**  Returns the size() of the largest possible %vector.  */
      size_type
      max_size() const _GLIBCXX_NOEXCEPT
  40910c:	55                   	push   %rbp
  40910d:	48 89 e5             	mov    %rsp,%rbp
  409110:	48 83 ec 10          	sub    $0x10,%rsp
  409114:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
  409118:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40911c:	48 89 c7             	mov    %rax,%rdi
  40911f:	e8 f0 07 00 00       	callq  409914 <_ZNKSt12_Vector_baseISt5tupleIIdddEESaIS1_EE19_M_get_Tp_allocatorEv>
  409124:	48 89 c7             	mov    %rax,%rdi
  409127:	e8 cd 07 00 00       	callq  4098f9 <_ZNSt16allocator_traitsISaISt5tupleIIdddEEEE8max_sizeERKS2_>
  40912c:	c9                   	leaveq 
  40912d:	c3                   	retq   

000000000040912e <_ZN9__gnu_cxx13new_allocatorISt5tupleIIdddEEE8allocateEmPKv>:
      { return std::__addressof(__x); }

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
  40912e:	55                   	push   %rbp
  40912f:	48 89 e5             	mov    %rsp,%rbp
  409132:	48 83 ec 20          	sub    $0x20,%rsp
  409136:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40913a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40913e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { 
	if (__n > this->max_size())
  409142:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409146:	48 89 c7             	mov    %rax,%rdi
  409149:	e8 d4 07 00 00       	callq  409922 <_ZNK9__gnu_cxx13new_allocatorISt5tupleIIdddEEE8max_sizeEv>
  40914e:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  409152:	0f 92 c0             	setb   %al
  409155:	84 c0                	test   %al,%al
  409157:	74 05                	je     40915e <_ZN9__gnu_cxx13new_allocatorISt5tupleIIdddEEE8allocateEmPKv+0x30>
	  std::__throw_bad_alloc();
  409159:	e8 42 87 ff ff       	callq  4018a0 <_ZSt17__throw_bad_allocv@plt>

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  40915e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  409162:	48 89 d0             	mov    %rdx,%rax
  409165:	48 01 c0             	add    %rax,%rax
  409168:	48 01 d0             	add    %rdx,%rax
  40916b:	48 c1 e0 03          	shl    $0x3,%rax
  40916f:	48 89 c7             	mov    %rax,%rdi
  409172:	e8 99 87 ff ff       	callq  401910 <_Znwm@plt>
      }
  409177:	c9                   	leaveq 
  409178:	c3                   	retq   

0000000000409179 <_ZSt32__make_move_if_noexcept_iteratorIPSt5tupleIIdddEESt13move_iteratorIS2_EET0_T_>:
  template<typename _Iterator, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond
      <typename iterator_traits<_Iterator>::value_type>::value,
                _Iterator, move_iterator<_Iterator>>::type>
    inline _ReturnType
    __make_move_if_noexcept_iterator(_Iterator __i)
  409179:	55                   	push   %rbp
  40917a:	48 89 e5             	mov    %rsp,%rbp
  40917d:	48 83 ec 20          	sub    $0x20,%rsp
  409181:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return _ReturnType(__i); }
  409185:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  409189:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  40918d:	48 89 d6             	mov    %rdx,%rsi
  409190:	48 89 c7             	mov    %rax,%rdi
  409193:	e8 9e 07 00 00       	callq  409936 <_ZNSt13move_iteratorIPSt5tupleIIdddEEEC1ES2_>
  409198:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40919c:	c9                   	leaveq 
  40919d:	c3                   	retq   

000000000040919e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPSt5tupleIIdddEEES3_S2_ET0_T_S6_S5_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
  40919e:	55                   	push   %rbp
  40919f:	48 89 e5             	mov    %rsp,%rbp
  4091a2:	48 83 ec 20          	sub    $0x20,%rsp
  4091a6:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  4091aa:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4091ae:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4091b2:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
  4091b6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4091ba:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4091be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4091c2:	48 89 ce             	mov    %rcx,%rsi
  4091c5:	48 89 c7             	mov    %rax,%rdi
  4091c8:	e8 82 07 00 00       	callq  40994f <_ZSt18uninitialized_copyISt13move_iteratorIPSt5tupleIIdddEEES3_ET0_T_S6_S5_>
  4091cd:	c9                   	leaveq 
  4091ce:	c3                   	retq   

00000000004091cf <_ZSt8_DestroyIPSt5tupleIIdddEEEvT_S3_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
  4091cf:	55                   	push   %rbp
  4091d0:	48 89 e5             	mov    %rsp,%rbp
  4091d3:	48 83 ec 10          	sub    $0x10,%rsp
  4091d7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4091db:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
  4091df:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4091e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4091e7:	48 89 d6             	mov    %rdx,%rsi
  4091ea:	48 89 c7             	mov    %rax,%rdi
  4091ed:	e8 8a 07 00 00       	callq  40997c <_ZNSt12_Destroy_auxILb1EE9__destroyIPSt5tupleIIdddEEEEvT_S5_>
	__destroy(__first, __last);
    }
  4091f2:	c9                   	leaveq 
  4091f3:	c3                   	retq   

00000000004091f4 <_ZN9__gnu_cxx13new_allocatorISt5tupleIIdddEEE10deallocateEPS2_m>:

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
  4091f4:	55                   	push   %rbp
  4091f5:	48 89 e5             	mov    %rsp,%rbp
  4091f8:	48 83 ec 20          	sub    $0x20,%rsp
  4091fc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409200:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  409204:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { ::operator delete(__p); }
  409208:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40920c:	48 89 c7             	mov    %rax,%rdi
  40920f:	e8 4c 84 ff ff       	callq  401660 <_ZdlPv@plt>
  409214:	c9                   	leaveq 
  409215:	c3                   	retq   

0000000000409216 <_ZNSaImEC1Ev>:
  409216:	55                   	push   %rbp
  409217:	48 89 e5             	mov    %rsp,%rbp
  40921a:	48 83 ec 10          	sub    $0x10,%rsp
  40921e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409222:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409226:	48 89 c7             	mov    %rax,%rdi
  409229:	e8 5c 07 00 00       	callq  40998a <_ZN9__gnu_cxx13new_allocatorImEC1Ev>
  40922e:	c9                   	leaveq 
  40922f:	c3                   	retq   

0000000000409230 <_ZN9__gnu_cxx13new_allocatorImED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  409230:	55                   	push   %rbp
  409231:	48 89 e5             	mov    %rsp,%rbp
  409234:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409238:	5d                   	pop    %rbp
  409239:	c3                   	retq   

000000000040923a <_ZN9__gnu_cxx13new_allocatorImE10deallocateEPmm>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
  40923a:	55                   	push   %rbp
  40923b:	48 89 e5             	mov    %rsp,%rbp
  40923e:	48 83 ec 20          	sub    $0x20,%rsp
  409242:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409246:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40924a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { ::operator delete(__p); }
  40924e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  409252:	48 89 c7             	mov    %rax,%rdi
  409255:	e8 06 84 ff ff       	callq  401660 <_ZdlPv@plt>
  40925a:	c9                   	leaveq 
  40925b:	c3                   	retq   

000000000040925c <_ZNSt12_Destroy_auxILb1EE9__destroyIPmEEvT_S3_>:
  template<>
    struct _Destroy_aux<true>
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator, _ForwardIterator) { }
  40925c:	55                   	push   %rbp
  40925d:	48 89 e5             	mov    %rsp,%rbp
  409260:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409264:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  409268:	5d                   	pop    %rbp
  409269:	c3                   	retq   

000000000040926a <_ZNSt16allocator_traitsISaImEE12_S_constructImImEEENSt9enable_ifIXsrNS1_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS0_PS5_DpOS6_>:
	};

      template<typename _Tp, typename... _Args>
	static typename
       	enable_if<__construct_helper<_Tp, _Args...>::value, void>::type
       	_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
  40926a:	55                   	push   %rbp
  40926b:	48 89 e5             	mov    %rsp,%rbp
  40926e:	48 83 ec 20          	sub    $0x20,%rsp
  409272:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409276:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40927a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
  40927e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409282:	48 89 c7             	mov    %rax,%rdi
  409285:	e8 a5 dd ff ff       	callq  40702f <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
  40928a:	48 89 c2             	mov    %rax,%rdx
  40928d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  409291:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409295:	48 89 ce             	mov    %rcx,%rsi
  409298:	48 89 c7             	mov    %rax,%rdi
  40929b:	e8 f4 06 00 00       	callq  409994 <_ZN9__gnu_cxx13new_allocatorImE9constructImImEEEvPT_DpOT0_>
  4092a0:	c9                   	leaveq 
  4092a1:	c3                   	retq   

00000000004092a2 <_ZNKSt6vectorImSaImEE12_M_check_lenEmPKc>:
        _M_emplace_back_aux(_Args&&... __args);
#endif

      // Called by the latter.
      size_type
      _M_check_len(size_type __n, const char* __s) const
  4092a2:	55                   	push   %rbp
  4092a3:	48 89 e5             	mov    %rsp,%rbp
  4092a6:	53                   	push   %rbx
  4092a7:	48 83 ec 38          	sub    $0x38,%rsp
  4092ab:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  4092af:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  4092b3:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      {
	if (max_size() - size() < __n)
  4092b7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4092bb:	48 89 c7             	mov    %rax,%rdi
  4092be:	e8 15 07 00 00       	callq  4099d8 <_ZNKSt6vectorImSaImEE8max_sizeEv>
  4092c3:	48 89 c3             	mov    %rax,%rbx
  4092c6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4092ca:	48 89 c7             	mov    %rax,%rdi
  4092cd:	e8 d2 00 00 00       	callq  4093a4 <_ZNKSt6vectorImSaImEE4sizeEv>
  4092d2:	48 29 c3             	sub    %rax,%rbx
  4092d5:	48 89 da             	mov    %rbx,%rdx
  4092d8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4092dc:	48 39 c2             	cmp    %rax,%rdx
  4092df:	0f 92 c0             	setb   %al
  4092e2:	84 c0                	test   %al,%al
  4092e4:	74 0c                	je     4092f2 <_ZNKSt6vectorImSaImEE12_M_check_lenEmPKc+0x50>
	  __throw_length_error(__N(__s));
  4092e6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4092ea:	48 89 c7             	mov    %rax,%rdi
  4092ed:	e8 1e 83 ff ff       	callq  401610 <_ZSt20__throw_length_errorPKc@plt>

	const size_type __len = size() + std::max(size(), __n);
  4092f2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4092f6:	48 89 c7             	mov    %rax,%rdi
  4092f9:	e8 a6 00 00 00       	callq  4093a4 <_ZNKSt6vectorImSaImEE4sizeEv>
  4092fe:	48 89 c3             	mov    %rax,%rbx
  409301:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409305:	48 89 c7             	mov    %rax,%rdi
  409308:	e8 97 00 00 00       	callq  4093a4 <_ZNKSt6vectorImSaImEE4sizeEv>
  40930d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  409311:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  409315:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  409319:	48 89 d6             	mov    %rdx,%rsi
  40931c:	48 89 c7             	mov    %rax,%rdi
  40931f:	e8 b6 f8 ff ff       	callq  408bda <_ZSt3maxImERKT_S2_S2_>
  409324:	48 8b 00             	mov    (%rax),%rax
  409327:	48 01 d8             	add    %rbx,%rax
  40932a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  40932e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409332:	48 89 c7             	mov    %rax,%rdi
  409335:	e8 6a 00 00 00       	callq  4093a4 <_ZNKSt6vectorImSaImEE4sizeEv>
  40933a:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  40933e:	77 12                	ja     409352 <_ZNKSt6vectorImSaImEE12_M_check_lenEmPKc+0xb0>
  409340:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409344:	48 89 c7             	mov    %rax,%rdi
  409347:	e8 8c 06 00 00       	callq  4099d8 <_ZNKSt6vectorImSaImEE8max_sizeEv>
  40934c:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  409350:	73 0e                	jae    409360 <_ZNKSt6vectorImSaImEE12_M_check_lenEmPKc+0xbe>
  409352:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409356:	48 89 c7             	mov    %rax,%rdi
  409359:	e8 7a 06 00 00       	callq  4099d8 <_ZNKSt6vectorImSaImEE8max_sizeEv>
  40935e:	eb 04                	jmp    409364 <_ZNKSt6vectorImSaImEE12_M_check_lenEmPKc+0xc2>
  409360:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
  409364:	48 83 c4 38          	add    $0x38,%rsp
  409368:	5b                   	pop    %rbx
  409369:	5d                   	pop    %rbp
  40936a:	c3                   	retq   
  40936b:	90                   	nop

000000000040936c <_ZNSt12_Vector_baseImSaImEE11_M_allocateEm>:

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
  40936c:	55                   	push   %rbp
  40936d:	48 89 e5             	mov    %rsp,%rbp
  409370:	48 83 ec 10          	sub    $0x10,%rsp
  409374:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409378:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }
  40937c:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  409381:	74 1a                	je     40939d <_ZNSt12_Vector_baseImSaImEE11_M_allocateEm+0x31>
  409383:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409387:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40938b:	ba 00 00 00 00       	mov    $0x0,%edx
  409390:	48 89 ce             	mov    %rcx,%rsi
  409393:	48 89 c7             	mov    %rax,%rdi
  409396:	e8 5f 06 00 00       	callq  4099fa <_ZN9__gnu_cxx13new_allocatorImE8allocateEmPKv>
  40939b:	eb 05                	jmp    4093a2 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEm+0x36>
  40939d:	b8 00 00 00 00       	mov    $0x0,%eax
  4093a2:	c9                   	leaveq 
  4093a3:	c3                   	retq   

00000000004093a4 <_ZNKSt6vectorImSaImEE4sizeEv>:
#endif

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
  4093a4:	55                   	push   %rbp
  4093a5:	48 89 e5             	mov    %rsp,%rbp
  4093a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  4093ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4093b0:	48 8b 40 08          	mov    0x8(%rax),%rax
  4093b4:	48 89 c2             	mov    %rax,%rdx
  4093b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4093bb:	48 8b 00             	mov    (%rax),%rax
  4093be:	48 29 c2             	sub    %rax,%rdx
  4093c1:	48 89 d0             	mov    %rdx,%rax
  4093c4:	48 c1 f8 03          	sar    $0x3,%rax
  4093c8:	5d                   	pop    %rbp
  4093c9:	c3                   	retq   

00000000004093ca <_ZSt34__uninitialized_move_if_noexcept_aIPmS0_SaImEET0_T_S3_S2_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
  4093ca:	55                   	push   %rbp
  4093cb:	48 89 e5             	mov    %rsp,%rbp
  4093ce:	53                   	push   %rbx
  4093cf:	48 83 ec 28          	sub    $0x28,%rsp
  4093d3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4093d7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4093db:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4093df:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
  4093e3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4093e7:	48 89 c7             	mov    %rax,%rdi
  4093ea:	e8 4d 06 00 00       	callq  409a3c <_ZSt32__make_move_if_noexcept_iteratorIPmSt13move_iteratorIS0_EET0_T_>
  4093ef:	48 89 c3             	mov    %rax,%rbx
  4093f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4093f6:	48 89 c7             	mov    %rax,%rdi
  4093f9:	e8 3e 06 00 00       	callq  409a3c <_ZSt32__make_move_if_noexcept_iteratorIPmSt13move_iteratorIS0_EET0_T_>
  4093fe:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  409402:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  409406:	48 89 de             	mov    %rbx,%rsi
  409409:	48 89 c7             	mov    %rax,%rdi
  40940c:	e8 50 06 00 00       	callq  409a61 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPmES1_mET0_T_S4_S3_RSaIT1_E>
    }
  409411:	48 83 c4 28          	add    $0x28,%rsp
  409415:	5b                   	pop    %rbx
  409416:	5d                   	pop    %rbp
  409417:	c3                   	retq   

0000000000409418 <_ZNSt16allocator_traitsISaImEE7destroyImEEvRS0_PT_>:
       *
       *  Calls @c __a.destroy(__p) if that expression is well-formed,
       *  otherwise calls @c __p->~_Tp()
      */
      template <class _Tp>
	static void destroy(_Alloc& __a, _Tp* __p)
  409418:	55                   	push   %rbp
  409419:	48 89 e5             	mov    %rsp,%rbp
  40941c:	48 83 ec 10          	sub    $0x10,%rsp
  409420:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409424:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ _S_destroy(__a, __p); }
  409428:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40942c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409430:	48 89 d6             	mov    %rdx,%rsi
  409433:	48 89 c7             	mov    %rax,%rdi
  409436:	e8 57 06 00 00       	callq  409a92 <_ZNSt16allocator_traitsISaImEE10_S_destroyImEENSt9enable_ifIXsrNS1_16__destroy_helperIT_EE5valueEvE4typeERS0_PS5_>
  40943b:	c9                   	leaveq 
  40943c:	c3                   	retq   
  40943d:	90                   	nop

000000000040943e <_ZNSt11_Tuple_implILm2EIdEEaSEOS0_>:
	_M_tail(*this) = _M_tail(__in);
	return *this;
      }

      _Tuple_impl&
      operator=(_Tuple_impl&& __in)
  40943e:	55                   	push   %rbp
  40943f:	48 89 e5             	mov    %rsp,%rbp
  409442:	53                   	push   %rbx
  409443:	48 83 ec 18          	sub    $0x18,%rsp
  409447:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40944b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      noexcept(__and_<is_nothrow_move_assignable<_Head>,
	              is_nothrow_move_assignable<_Inherited>>::value)
      {
	_M_head(*this) = std::forward<_Head>(_M_head(__in));
  40944f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409453:	48 89 c7             	mov    %rax,%rdi
  409456:	e8 8e ac ff ff       	callq  4040e9 <_ZNSt11_Tuple_implILm2EIdEE7_M_headERS0_>
  40945b:	48 89 c3             	mov    %rax,%rbx
  40945e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  409462:	48 89 c7             	mov    %rax,%rdi
  409465:	e8 7f ac ff ff       	callq  4040e9 <_ZNSt11_Tuple_implILm2EIdEE7_M_headERS0_>
  40946a:	48 89 c7             	mov    %rax,%rdi
  40946d:	e8 4c aa ff ff       	callq  403ebe <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
  409472:	48 8b 00             	mov    (%rax),%rax
  409475:	48 89 03             	mov    %rax,(%rbx)
	_M_tail(*this) = std::move(_M_tail(__in));
  409478:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40947c:	48 89 c7             	mov    %rax,%rdi
  40947f:	e8 3b ac ff ff       	callq  4040bf <_ZNSt11_Tuple_implILm2EIdEE7_M_tailERS0_>
  409484:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  409488:	48 89 c7             	mov    %rax,%rdi
  40948b:	e8 2f ac ff ff       	callq  4040bf <_ZNSt11_Tuple_implILm2EIdEE7_M_tailERS0_>
  409490:	48 89 c7             	mov    %rax,%rdi
  409493:	e8 35 ac ff ff       	callq  4040cd <_ZSt4moveIRSt11_Tuple_implILm3EIEEEONSt16remove_referenceIT_E4typeEOS4_>
	return *this;
  409498:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
  40949c:	48 83 c4 18          	add    $0x18,%rsp
  4094a0:	5b                   	pop    %rbx
  4094a1:	5d                   	pop    %rbp
  4094a2:	c3                   	retq   

00000000004094a3 <_ZNSt16allocator_traitsISaISt6vectorISt5tupleIIdddEESaIS2_EEEE9_S_selectIKS5_EENSt9enable_ifIXntsrNS6_15__select_helperIT_EE5valueESB_E4typeERSB_>:
	{ return __a.select_on_container_copy_construction(); }

      template<typename _Alloc2>
	static typename
       	enable_if<!__select_helper<_Alloc2>::value, _Alloc2>::type
       	_S_select(_Alloc2& __a)
  4094a3:	55                   	push   %rbp
  4094a4:	48 89 e5             	mov    %rsp,%rbp
  4094a7:	48 83 ec 10          	sub    $0x10,%rsp
  4094ab:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4094af:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __a; }
  4094b3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4094b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4094bb:	48 89 d6             	mov    %rdx,%rsi
  4094be:	48 89 c7             	mov    %rax,%rdi
  4094c1:	e8 9e f4 ff ff       	callq  408964 <_ZNSaISt6vectorISt5tupleIIdddEESaIS1_EEEC1ERKS4_>
  4094c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4094ca:	c9                   	leaveq 
  4094cb:	c3                   	retq   

00000000004094cc <_ZN9__gnu_cxx13new_allocatorISt6vectorISt5tupleIIdddEESaIS3_EEEC1ERKS6_>:
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }

      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  4094cc:	55                   	push   %rbp
  4094cd:	48 89 e5             	mov    %rsp,%rbp
  4094d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4094d4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4094d8:	5d                   	pop    %rbp
  4094d9:	c3                   	retq   

00000000004094da <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorISt5tupleIIdddEESaIS6_EES4_IS8_SaIS8_EEEEPS8_EET0_T_SG_SF_>:
  template<bool _TrivialValueTypes>
    struct __uninitialized_copy
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
  4094da:	55                   	push   %rbp
  4094db:	48 89 e5             	mov    %rsp,%rbp
  4094de:	53                   	push   %rbx
  4094df:	48 83 ec 38          	sub    $0x38,%rsp
  4094e3:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
  4094e7:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  4094eb:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
  4094ef:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4094f3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __try
	    {
	      for (; __first != __last; ++__first, ++__cur)
  4094f7:	eb 37                	jmp    409530 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorISt5tupleIIdddEESaIS6_EES4_IS8_SaIS8_EEEEPS8_EET0_T_SG_SF_+0x56>
		std::_Construct(std::__addressof(*__cur), *__first);
  4094f9:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4094fd:	48 89 c7             	mov    %rax,%rdi
  409500:	e8 0f 06 00 00       	callq  409b14 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt6vectorISt5tupleIIdddEESaIS3_EES1_IS5_SaIS5_EEEdeEv>
  409505:	48 89 c3             	mov    %rax,%rbx
  409508:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40950c:	48 89 c7             	mov    %rax,%rdi
  40950f:	e8 8c 02 00 00       	callq  4097a0 <_ZSt11__addressofISt6vectorISt5tupleIIdddEESaIS2_EEEPT_RS5_>
  409514:	48 89 de             	mov    %rbx,%rsi
  409517:	48 89 c7             	mov    %rax,%rdi
  40951a:	e8 14 06 00 00       	callq  409b33 <_ZSt10_ConstructISt6vectorISt5tupleIIdddEESaIS2_EEIRKS4_EEvPT_DpOT0_>
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
	  __try
	    {
	      for (; __first != __last; ++__first, ++__cur)
  40951f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  409523:	48 89 c7             	mov    %rax,%rdi
  409526:	e8 c9 05 00 00       	callq  409af4 <_ZN9__gnu_cxx17__normal_iteratorIPKSt6vectorISt5tupleIIdddEESaIS3_EES1_IS5_SaIS5_EEEppEv>
  40952b:	48 83 45 e8 18       	addq   $0x18,-0x18(%rbp)
  409530:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  409534:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  409538:	48 89 d6             	mov    %rdx,%rsi
  40953b:	48 89 c7             	mov    %rax,%rdi
  40953e:	e8 74 05 00 00       	callq  409ab7 <_ZN9__gnu_cxxneIPKSt6vectorISt5tupleIIdddEESaIS3_EES1_IS5_SaIS5_EEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
  409543:	84 c0                	test   %al,%al
  409545:	75 b2                	jne    4094f9 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorISt5tupleIIdddEESaIS6_EES4_IS8_SaIS8_EEEEPS8_EET0_T_SG_SF_+0x1f>
		std::_Construct(std::__addressof(*__cur), *__first);
	      return __cur;
  409547:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40954b:	eb 33                	jmp    409580 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorISt5tupleIIdddEESaIS6_EES4_IS8_SaIS8_EEEEPS8_EET0_T_SG_SF_+0xa6>
  40954d:	48 89 c3             	mov    %rax,%rbx
	    }
	  __catch(...)
  409550:	e8 3b 83 ff ff       	callq  401890 <__cxa_end_catch@plt>
  409555:	48 89 d8             	mov    %rbx,%rax
  409558:	48 89 c7             	mov    %rax,%rdi
  40955b:	e8 c0 83 ff ff       	callq  401920 <_Unwind_Resume@plt>
  409560:	48 89 c7             	mov    %rax,%rdi
  409563:	e8 68 83 ff ff       	callq  4018d0 <__cxa_begin_catch@plt>
	    {
	      std::_Destroy(__result, __cur);
  409568:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40956c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  409570:	48 89 d6             	mov    %rdx,%rsi
  409573:	48 89 c7             	mov    %rax,%rdi
  409576:	e8 05 eb ff ff       	callq  408080 <_ZSt8_DestroyIPSt6vectorISt5tupleIIdddEESaIS2_EEEvT_S6_>
	      __throw_exception_again;
  40957b:	e8 00 81 ff ff       	callq  401680 <__cxa_rethrow@plt>
	    }
	}
  409580:	48 83 c4 38          	add    $0x38,%rsp
  409584:	5b                   	pop    %rbx
  409585:	5d                   	pop    %rbp
  409586:	c3                   	retq   
  409587:	90                   	nop

0000000000409588 <_ZN9__gnu_cxx13new_allocatorIdEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  409588:	55                   	push   %rbp
  409589:	48 89 e5             	mov    %rsp,%rbp
  40958c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409590:	5d                   	pop    %rbp
  409591:	c3                   	retq   

0000000000409592 <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>:
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
  409592:	55                   	push   %rbp
  409593:	48 89 e5             	mov    %rsp,%rbp
  409596:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_t(-1) / sizeof(_Tp); }
  40959a:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
  4095a1:	ff ff 1f 
  4095a4:	5d                   	pop    %rbp
  4095a5:	c3                   	retq   

00000000004095a6 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPdES3_EET0_T_S6_S5_>:
  template<>
    struct __uninitialized_copy<true>
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
  4095a6:	55                   	push   %rbp
  4095a7:	48 89 e5             	mov    %rsp,%rbp
  4095aa:	48 83 ec 20          	sub    $0x20,%rsp
  4095ae:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  4095b2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4095b6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
		      _ForwardIterator __result)
        { return std::copy(__first, __last, __result); }
  4095ba:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4095be:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4095c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4095c6:	48 89 ce             	mov    %rcx,%rsi
  4095c9:	48 89 c7             	mov    %rax,%rdi
  4095cc:	e8 d2 05 00 00       	callq  409ba3 <_ZSt4copyISt13move_iteratorIPdES1_ET0_T_S4_S3_>
  4095d1:	c9                   	leaveq 
  4095d2:	c3                   	retq   
  4095d3:	90                   	nop

00000000004095d4 <_ZN9__gnu_cxx13new_allocatorIdE7destroyIdEEvPT_>:
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
  4095d4:	55                   	push   %rbp
  4095d5:	48 89 e5             	mov    %rsp,%rbp
  4095d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4095dc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4095e0:	5d                   	pop    %rbp
  4095e1:	c3                   	retq   

00000000004095e2 <_ZN9__gnu_cxx13new_allocatorISt6threadEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  4095e2:	55                   	push   %rbp
  4095e3:	48 89 e5             	mov    %rsp,%rbp
  4095e6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4095ea:	5d                   	pop    %rbp
  4095eb:	c3                   	retq   

00000000004095ec <_ZSt11__addressofISt6threadEPT_RS1_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  4095ec:	55                   	push   %rbp
  4095ed:	48 89 e5             	mov    %rsp,%rbp
  4095f0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return reinterpret_cast<_Tp*>
	(&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
  4095f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  4095f8:	5d                   	pop    %rbp
  4095f9:	c3                   	retq   

00000000004095fa <_ZSt8_DestroyISt6threadEvPT_>:
  /**
   * Destroy the object pointed to by a pointer type.
   */
  template<typename _Tp>
    inline void
    _Destroy(_Tp* __pointer)
  4095fa:	55                   	push   %rbp
  4095fb:	48 89 e5             	mov    %rsp,%rbp
  4095fe:	48 83 ec 10          	sub    $0x10,%rsp
  409602:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { __pointer->~_Tp(); }
  409606:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40960a:	48 89 c7             	mov    %rax,%rdi
  40960d:	e8 82 a6 ff ff       	callq  403c94 <_ZNSt6threadD1Ev>
  409612:	c9                   	leaveq 
  409613:	c3                   	retq   

0000000000409614 <_ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEEC1Ev>:
  409614:	55                   	push   %rbp
  409615:	48 89 e5             	mov    %rsp,%rbp
  409618:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40961c:	5d                   	pop    %rbp
  40961d:	c3                   	retq   

000000000040961e <_ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  40961e:	55                   	push   %rbp
  40961f:	48 89 e5             	mov    %rsp,%rbp
  409622:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409626:	5d                   	pop    %rbp
  409627:	c3                   	retq   

0000000000409628 <_ZNSt10shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEEC1ISaIS8_EIS7_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	}

    private:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
  409628:	55                   	push   %rbp
  409629:	48 89 e5             	mov    %rsp,%rbp
  40962c:	53                   	push   %rbx
  40962d:	48 83 ec 28          	sub    $0x28,%rsp
  409631:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  409635:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  409639:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
		   _Args&&... __args)
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
  40963d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409641:	48 89 c7             	mov    %rax,%rdi
  409644:	e8 82 cc ff ff       	callq  4062cb <_ZSt7forwardISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEOT_RNSt16remove_referenceIS6_E4typeE>
  409649:	48 89 c2             	mov    %rax,%rdx
  40964c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409650:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  409654:	88 1c 24             	mov    %bl,(%rsp)
  409657:	48 89 ce             	mov    %rcx,%rsi
  40965a:	48 89 c7             	mov    %rax,%rdi
  40965d:	e8 88 05 00 00       	callq  409bea <_ZNSt12__shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEELN9__gnu_cxx12_Lock_policyE2EEC1ISaIS8_EIS7_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
  409662:	48 83 c4 28          	add    $0x28,%rsp
  409666:	5b                   	pop    %rbx
  409667:	5d                   	pop    %rbp
  409668:	c3                   	retq   
  409669:	90                   	nop

000000000040966a <_ZN9__gnu_cxx13new_allocatorISt6threadE9constructIS1_IS1_EEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
  40966a:	55                   	push   %rbp
  40966b:	48 89 e5             	mov    %rsp,%rbp
  40966e:	53                   	push   %rbx
  40966f:	48 83 ec 28          	sub    $0x28,%rsp
  409673:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  409677:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40967b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  40967f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409683:	48 89 c7             	mov    %rax,%rdi
  409686:	e8 c5 cc ff ff       	callq  406350 <_ZSt7forwardISt6threadEOT_RNSt16remove_referenceIS1_E4typeE>
  40968b:	48 89 c3             	mov    %rax,%rbx
  40968e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  409692:	48 89 c6             	mov    %rax,%rsi
  409695:	bf 08 00 00 00       	mov    $0x8,%edi
  40969a:	e8 be a4 ff ff       	callq  403b5d <_ZnwmPv>
  40969f:	48 85 c0             	test   %rax,%rax
  4096a2:	74 0b                	je     4096af <_ZN9__gnu_cxx13new_allocatorISt6threadE9constructIS1_IS1_EEEvPT_DpOT0_+0x45>
  4096a4:	48 89 de             	mov    %rbx,%rsi
  4096a7:	48 89 c7             	mov    %rax,%rdi
  4096aa:	e8 b3 a5 ff ff       	callq  403c62 <_ZNSt6threadC1EOS_>
  4096af:	48 83 c4 28          	add    $0x28,%rsp
  4096b3:	5b                   	pop    %rbx
  4096b4:	5d                   	pop    %rbp
  4096b5:	c3                   	retq   

00000000004096b6 <_ZNKSt6vectorISt6threadSaIS0_EE8max_sizeEv>:

      /**  Returns the size() of the largest possible %vector.  */
      size_type
      max_size() const _GLIBCXX_NOEXCEPT
  4096b6:	55                   	push   %rbp
  4096b7:	48 89 e5             	mov    %rsp,%rbp
  4096ba:	48 83 ec 10          	sub    $0x10,%rsp
  4096be:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
  4096c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4096c6:	48 89 c7             	mov    %rax,%rdi
  4096c9:	e8 d6 05 00 00       	callq  409ca4 <_ZNKSt12_Vector_baseISt6threadSaIS0_EE19_M_get_Tp_allocatorEv>
  4096ce:	48 89 c7             	mov    %rax,%rdi
  4096d1:	e8 b3 05 00 00       	callq  409c89 <_ZNSt16allocator_traitsISaISt6threadEE8max_sizeERKS1_>
  4096d6:	c9                   	leaveq 
  4096d7:	c3                   	retq   

00000000004096d8 <_ZN9__gnu_cxx13new_allocatorISt6threadE8allocateEmPKv>:
      { return std::__addressof(__x); }

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
  4096d8:	55                   	push   %rbp
  4096d9:	48 89 e5             	mov    %rsp,%rbp
  4096dc:	48 83 ec 20          	sub    $0x20,%rsp
  4096e0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4096e4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4096e8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { 
	if (__n > this->max_size())
  4096ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4096f0:	48 89 c7             	mov    %rax,%rdi
  4096f3:	e8 ba 05 00 00       	callq  409cb2 <_ZNK9__gnu_cxx13new_allocatorISt6threadE8max_sizeEv>
  4096f8:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  4096fc:	0f 92 c0             	setb   %al
  4096ff:	84 c0                	test   %al,%al
  409701:	74 05                	je     409708 <_ZN9__gnu_cxx13new_allocatorISt6threadE8allocateEmPKv+0x30>
	  std::__throw_bad_alloc();
  409703:	e8 98 81 ff ff       	callq  4018a0 <_ZSt17__throw_bad_allocv@plt>

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  409708:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40970c:	48 c1 e0 03          	shl    $0x3,%rax
  409710:	48 89 c7             	mov    %rax,%rdi
  409713:	e8 f8 81 ff ff       	callq  401910 <_Znwm@plt>
      }
  409718:	c9                   	leaveq 
  409719:	c3                   	retq   

000000000040971a <_ZSt32__make_move_if_noexcept_iteratorIPSt6threadSt13move_iteratorIS1_EET0_T_>:
  template<typename _Iterator, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond
      <typename iterator_traits<_Iterator>::value_type>::value,
                _Iterator, move_iterator<_Iterator>>::type>
    inline _ReturnType
    __make_move_if_noexcept_iterator(_Iterator __i)
  40971a:	55                   	push   %rbp
  40971b:	48 89 e5             	mov    %rsp,%rbp
  40971e:	48 83 ec 20          	sub    $0x20,%rsp
  409722:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return _ReturnType(__i); }
  409726:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40972a:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  40972e:	48 89 d6             	mov    %rdx,%rsi
  409731:	48 89 c7             	mov    %rax,%rdi
  409734:	e8 8d 05 00 00       	callq  409cc6 <_ZNSt13move_iteratorIPSt6threadEC1ES1_>
  409739:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40973d:	c9                   	leaveq 
  40973e:	c3                   	retq   

000000000040973f <_ZSt22__uninitialized_copy_aISt13move_iteratorIPSt6threadES2_S1_ET0_T_S5_S4_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
  40973f:	55                   	push   %rbp
  409740:	48 89 e5             	mov    %rsp,%rbp
  409743:	48 83 ec 20          	sub    $0x20,%rsp
  409747:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  40974b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40974f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  409753:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
  409757:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40975b:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  40975f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  409763:	48 89 ce             	mov    %rcx,%rsi
  409766:	48 89 c7             	mov    %rax,%rdi
  409769:	e8 71 05 00 00       	callq  409cdf <_ZSt18uninitialized_copyISt13move_iteratorIPSt6threadES2_ET0_T_S5_S4_>
  40976e:	c9                   	leaveq 
  40976f:	c3                   	retq   

0000000000409770 <_ZNSt16allocator_traitsISaISt6threadEE10_S_destroyIS0_EENSt9enable_ifIXsrNS2_16__destroy_helperIT_EE5valueEvE4typeERS1_PS6_>:
	  static const bool value = type::value;
	};

      template<typename _Tp>
	static typename enable_if<__destroy_helper<_Tp>::value, void>::type
       	_S_destroy(_Alloc& __a, _Tp* __p)
  409770:	55                   	push   %rbp
  409771:	48 89 e5             	mov    %rsp,%rbp
  409774:	48 83 ec 10          	sub    $0x10,%rsp
  409778:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40977c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ __a.destroy(__p); }
  409780:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  409784:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409788:	48 89 d6             	mov    %rdx,%rsi
  40978b:	48 89 c7             	mov    %rax,%rdi
  40978e:	e8 79 05 00 00       	callq  409d0c <_ZN9__gnu_cxx13new_allocatorISt6threadE7destroyIS1_EEvPT_>
  409793:	c9                   	leaveq 
  409794:	c3                   	retq   
  409795:	90                   	nop

0000000000409796 <_ZN9__gnu_cxx13new_allocatorISt6vectorISt5tupleIIdddEESaIS3_EEEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  409796:	55                   	push   %rbp
  409797:	48 89 e5             	mov    %rsp,%rbp
  40979a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40979e:	5d                   	pop    %rbp
  40979f:	c3                   	retq   

00000000004097a0 <_ZSt11__addressofISt6vectorISt5tupleIIdddEESaIS2_EEEPT_RS5_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  4097a0:	55                   	push   %rbp
  4097a1:	48 89 e5             	mov    %rsp,%rbp
  4097a4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return reinterpret_cast<_Tp*>
	(&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
  4097a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  4097ac:	5d                   	pop    %rbp
  4097ad:	c3                   	retq   

00000000004097ae <_ZSt8_DestroyISt6vectorISt5tupleIIdddEESaIS2_EEEvPT_>:
  /**
   * Destroy the object pointed to by a pointer type.
   */
  template<typename _Tp>
    inline void
    _Destroy(_Tp* __pointer)
  4097ae:	55                   	push   %rbp
  4097af:	48 89 e5             	mov    %rsp,%rbp
  4097b2:	48 83 ec 10          	sub    $0x10,%rsp
  4097b6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { __pointer->~_Tp(); }
  4097ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4097be:	48 89 c7             	mov    %rax,%rdi
  4097c1:	e8 64 05 00 00       	callq  409d2a <_ZNSt6vectorISt5tupleIIdddEESaIS1_EED1Ev>
  4097c6:	c9                   	leaveq 
  4097c7:	c3                   	retq   

00000000004097c8 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPSt6vectorISt5tupleIIdddEESaIS4_EEmEEvT_T0_>:
  template<bool _TrivialValueType>
    struct __uninitialized_default_n_1
    {
      template<typename _ForwardIterator, typename _Size>
        static void
        __uninit_default_n(_ForwardIterator __first, _Size __n)
  4097c8:	55                   	push   %rbp
  4097c9:	48 89 e5             	mov    %rsp,%rbp
  4097cc:	53                   	push   %rbx
  4097cd:	48 83 ec 28          	sub    $0x28,%rsp
  4097d1:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  4097d5:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
        {
	  _ForwardIterator __cur = __first;
  4097d9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4097dd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __try
	    {
	      for (; __n > 0; --__n, ++__cur)
  4097e1:	eb 1e                	jmp    409801 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPSt6vectorISt5tupleIIdddEESaIS4_EEmEEvT_T0_+0x39>
		std::_Construct(std::__addressof(*__cur));
  4097e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4097e7:	48 89 c7             	mov    %rax,%rdi
  4097ea:	e8 b1 ff ff ff       	callq  4097a0 <_ZSt11__addressofISt6vectorISt5tupleIIdddEESaIS2_EEEPT_RS5_>
  4097ef:	48 89 c7             	mov    %rax,%rdi
  4097f2:	e8 76 05 00 00       	callq  409d6d <_ZSt10_ConstructISt6vectorISt5tupleIIdddEESaIS2_EEIEEvPT_DpOT0_>
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
	  _ForwardIterator __cur = __first;
	  __try
	    {
	      for (; __n > 0; --__n, ++__cur)
  4097f7:	48 83 6d d0 01       	subq   $0x1,-0x30(%rbp)
  4097fc:	48 83 45 e8 18       	addq   $0x18,-0x18(%rbp)
  409801:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  409806:	75 db                	jne    4097e3 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPSt6vectorISt5tupleIIdddEESaIS4_EEmEEvT_T0_+0x1b>
  409808:	eb 33                	jmp    40983d <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPSt6vectorISt5tupleIIdddEESaIS4_EEmEEvT_T0_+0x75>
  40980a:	48 89 c3             	mov    %rax,%rbx
		std::_Construct(std::__addressof(*__cur));
	    }
	  __catch(...)
  40980d:	e8 7e 80 ff ff       	callq  401890 <__cxa_end_catch@plt>
  409812:	48 89 d8             	mov    %rbx,%rax
  409815:	48 89 c7             	mov    %rax,%rdi
  409818:	e8 03 81 ff ff       	callq  401920 <_Unwind_Resume@plt>
  40981d:	48 89 c7             	mov    %rax,%rdi
  409820:	e8 ab 80 ff ff       	callq  4018d0 <__cxa_begin_catch@plt>
	    {
	      std::_Destroy(__first, __cur);
  409825:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  409829:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40982d:	48 89 d6             	mov    %rdx,%rsi
  409830:	48 89 c7             	mov    %rax,%rdi
  409833:	e8 48 e8 ff ff       	callq  408080 <_ZSt8_DestroyIPSt6vectorISt5tupleIIdddEESaIS2_EEEvT_S6_>
	      __throw_exception_again;
  409838:	e8 43 7e ff ff       	callq  401680 <__cxa_rethrow@plt>
	    }
	}
  40983d:	48 83 c4 28          	add    $0x28,%rsp
  409841:	5b                   	pop    %rbx
  409842:	5d                   	pop    %rbp
  409843:	c3                   	retq   

0000000000409844 <_ZNSt16allocator_traitsISaISt6vectorISt5tupleIIdddEESaIS2_EEEE8max_sizeERKS5_>:
       *  @return @c __a.max_size() or @c numeric_limits<size_type>::max()
       *
       *  Returns @c __a.max_size() if that expression is well-formed,
       *  otherwise returns @c numeric_limits<size_type>::max()
      */
      static size_type max_size(const _Alloc& __a)
  409844:	55                   	push   %rbp
  409845:	48 89 e5             	mov    %rsp,%rbp
  409848:	48 83 ec 10          	sub    $0x10,%rsp
  40984c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_max_size(__a); }
  409850:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409854:	48 89 c7             	mov    %rax,%rdi
  409857:	e8 6b 05 00 00       	callq  409dc7 <_ZNSt16allocator_traitsISaISt6vectorISt5tupleIIdddEESaIS2_EEEE11_S_max_sizeIKS5_EENSt9enable_ifIXsrNS6_16__maxsize_helperIT_EE5valueEmE4typeERSB_>
  40985c:	c9                   	leaveq 
  40985d:	c3                   	retq   

000000000040985e <_ZNK9__gnu_cxx13new_allocatorISt6vectorISt5tupleIIdddEESaIS3_EEE8max_sizeEv>:
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
  40985e:	55                   	push   %rbp
  40985f:	48 89 e5             	mov    %rsp,%rbp
  409862:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_t(-1) / sizeof(_Tp); }
  409866:	48 b8 aa aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaa,%rax
  40986d:	aa aa 0a 
  409870:	5d                   	pop    %rbp
  409871:	c3                   	retq   

0000000000409872 <_ZNSt13move_iteratorIPSt6vectorISt5tupleIIdddEESaIS2_EEEC1ES5_>:

      move_iterator()
      : _M_current() { }

      explicit
      move_iterator(iterator_type __i)
  409872:	55                   	push   %rbp
  409873:	48 89 e5             	mov    %rsp,%rbp
  409876:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40987a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
  40987e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409882:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  409886:	48 89 10             	mov    %rdx,(%rax)
  409889:	5d                   	pop    %rbp
  40988a:	c3                   	retq   

000000000040988b <_ZSt18uninitialized_copyISt13move_iteratorIPSt6vectorISt5tupleIIdddEESaIS3_EEES6_ET0_T_S9_S8_>:
   *
   *  Like copy(), but does not require an initialized output range.
  */
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
  40988b:	55                   	push   %rbp
  40988c:	48 89 e5             	mov    %rsp,%rbp
  40988f:	48 83 ec 20          	sub    $0x20,%rsp
  409893:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  409897:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40989b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;

      return std::__uninitialized_copy<(__is_trivial(_ValueType1)
					&& __is_trivial(_ValueType2))>::
	__uninit_copy(__first, __last, __result);
  40989f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4098a3:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4098a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4098ab:	48 89 ce             	mov    %rcx,%rsi
  4098ae:	48 89 c7             	mov    %rax,%rdi
  4098b1:	e8 2b 05 00 00       	callq  409de1 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt6vectorISt5tupleIIdddEESaIS5_EEES8_EET0_T_SB_SA_>
    }
  4098b6:	c9                   	leaveq 
  4098b7:	c3                   	retq   

00000000004098b8 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPSt5tupleIIdddEEmEEvT_T0_>:
  template<bool _TrivialValueType>
    struct __uninitialized_default_n_1
    {
      template<typename _ForwardIterator, typename _Size>
        static void
        __uninit_default_n(_ForwardIterator __first, _Size __n)
  4098b8:	55                   	push   %rbp
  4098b9:	48 89 e5             	mov    %rsp,%rbp
  4098bc:	48 83 ec 20          	sub    $0x20,%rsp
  4098c0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4098c4:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
        {
	  _ForwardIterator __cur = __first;
  4098c8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4098cc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  __try
	    {
	      for (; __n > 0; --__n, ++__cur)
  4098d0:	eb 1e                	jmp    4098f0 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPSt5tupleIIdddEEmEEvT_T0_+0x38>
		std::_Construct(std::__addressof(*__cur));
  4098d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4098d6:	48 89 c7             	mov    %rax,%rdi
  4098d9:	e8 b0 05 00 00       	callq  409e8e <_ZSt11__addressofISt5tupleIIdddEEEPT_RS2_>
  4098de:	48 89 c7             	mov    %rax,%rdi
  4098e1:	e8 8c 06 00 00       	callq  409f72 <_ZSt10_ConstructISt5tupleIIdddEEIEEvPT_DpOT0_>
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
	  _ForwardIterator __cur = __first;
	  __try
	    {
	      for (; __n > 0; --__n, ++__cur)
  4098e6:	48 83 6d e0 01       	subq   $0x1,-0x20(%rbp)
  4098eb:	48 83 45 f8 18       	addq   $0x18,-0x8(%rbp)
  4098f0:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  4098f5:	75 db                	jne    4098d2 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPSt5tupleIIdddEEmEEvT_T0_+0x1a>
	  __catch(...)
	    {
	      std::_Destroy(__first, __cur);
	      __throw_exception_again;
	    }
	}
  4098f7:	c9                   	leaveq 
  4098f8:	c3                   	retq   

00000000004098f9 <_ZNSt16allocator_traitsISaISt5tupleIIdddEEEE8max_sizeERKS2_>:
       *  @return @c __a.max_size() or @c numeric_limits<size_type>::max()
       *
       *  Returns @c __a.max_size() if that expression is well-formed,
       *  otherwise returns @c numeric_limits<size_type>::max()
      */
      static size_type max_size(const _Alloc& __a)
  4098f9:	55                   	push   %rbp
  4098fa:	48 89 e5             	mov    %rsp,%rbp
  4098fd:	48 83 ec 10          	sub    $0x10,%rsp
  409901:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_max_size(__a); }
  409905:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409909:	48 89 c7             	mov    %rax,%rdi
  40990c:	e8 8d 06 00 00       	callq  409f9e <_ZNSt16allocator_traitsISaISt5tupleIIdddEEEE11_S_max_sizeIKS2_EENSt9enable_ifIXsrNS3_16__maxsize_helperIT_EE5valueEmE4typeERS8_>
  409911:	c9                   	leaveq 
  409912:	c3                   	retq   
  409913:	90                   	nop

0000000000409914 <_ZNKSt12_Vector_baseISt5tupleIIdddEESaIS1_EE19_M_get_Tp_allocatorEv>:
      _Tp_alloc_type&
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }

      const _Tp_alloc_type&
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
  409914:	55                   	push   %rbp
  409915:	48 89 e5             	mov    %rsp,%rbp
  409918:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
  40991c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409920:	5d                   	pop    %rbp
  409921:	c3                   	retq   

0000000000409922 <_ZNK9__gnu_cxx13new_allocatorISt5tupleIIdddEEE8max_sizeEv>:
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
  409922:	55                   	push   %rbp
  409923:	48 89 e5             	mov    %rsp,%rbp
  409926:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_t(-1) / sizeof(_Tp); }
  40992a:	48 b8 aa aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaa,%rax
  409931:	aa aa 0a 
  409934:	5d                   	pop    %rbp
  409935:	c3                   	retq   

0000000000409936 <_ZNSt13move_iteratorIPSt5tupleIIdddEEEC1ES2_>:

      move_iterator()
      : _M_current() { }

      explicit
      move_iterator(iterator_type __i)
  409936:	55                   	push   %rbp
  409937:	48 89 e5             	mov    %rsp,%rbp
  40993a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40993e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
  409942:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409946:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40994a:	48 89 10             	mov    %rdx,(%rax)
  40994d:	5d                   	pop    %rbp
  40994e:	c3                   	retq   

000000000040994f <_ZSt18uninitialized_copyISt13move_iteratorIPSt5tupleIIdddEEES3_ET0_T_S6_S5_>:
   *
   *  Like copy(), but does not require an initialized output range.
  */
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
  40994f:	55                   	push   %rbp
  409950:	48 89 e5             	mov    %rsp,%rbp
  409953:	48 83 ec 20          	sub    $0x20,%rsp
  409957:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  40995b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40995f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;

      return std::__uninitialized_copy<(__is_trivial(_ValueType1)
					&& __is_trivial(_ValueType2))>::
	__uninit_copy(__first, __last, __result);
  409963:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  409967:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  40996b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40996f:	48 89 ce             	mov    %rcx,%rsi
  409972:	48 89 c7             	mov    %rax,%rdi
  409975:	e8 3e 06 00 00       	callq  409fb8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt5tupleIIdddEEES5_EET0_T_S8_S7_>
    }
  40997a:	c9                   	leaveq 
  40997b:	c3                   	retq   

000000000040997c <_ZNSt12_Destroy_auxILb1EE9__destroyIPSt5tupleIIdddEEEEvT_S5_>:
  template<>
    struct _Destroy_aux<true>
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator, _ForwardIterator) { }
  40997c:	55                   	push   %rbp
  40997d:	48 89 e5             	mov    %rsp,%rbp
  409980:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409984:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  409988:	5d                   	pop    %rbp
  409989:	c3                   	retq   

000000000040998a <_ZN9__gnu_cxx13new_allocatorImEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  40998a:	55                   	push   %rbp
  40998b:	48 89 e5             	mov    %rsp,%rbp
  40998e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409992:	5d                   	pop    %rbp
  409993:	c3                   	retq   

0000000000409994 <_ZN9__gnu_cxx13new_allocatorImE9constructImImEEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
  409994:	55                   	push   %rbp
  409995:	48 89 e5             	mov    %rsp,%rbp
  409998:	53                   	push   %rbx
  409999:	48 83 ec 28          	sub    $0x28,%rsp
  40999d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4099a1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4099a5:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  4099a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4099ad:	48 89 c7             	mov    %rax,%rdi
  4099b0:	e8 7a d6 ff ff       	callq  40702f <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
  4099b5:	48 8b 18             	mov    (%rax),%rbx
  4099b8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4099bc:	48 89 c6             	mov    %rax,%rsi
  4099bf:	bf 08 00 00 00       	mov    $0x8,%edi
  4099c4:	e8 94 a1 ff ff       	callq  403b5d <_ZnwmPv>
  4099c9:	48 85 c0             	test   %rax,%rax
  4099cc:	74 03                	je     4099d1 <_ZN9__gnu_cxx13new_allocatorImE9constructImImEEEvPT_DpOT0_+0x3d>
  4099ce:	48 89 18             	mov    %rbx,(%rax)
  4099d1:	48 83 c4 28          	add    $0x28,%rsp
  4099d5:	5b                   	pop    %rbx
  4099d6:	5d                   	pop    %rbp
  4099d7:	c3                   	retq   

00000000004099d8 <_ZNKSt6vectorImSaImEE8max_sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }

      /**  Returns the size() of the largest possible %vector.  */
      size_type
      max_size() const _GLIBCXX_NOEXCEPT
  4099d8:	55                   	push   %rbp
  4099d9:	48 89 e5             	mov    %rsp,%rbp
  4099dc:	48 83 ec 10          	sub    $0x10,%rsp
  4099e0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
  4099e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4099e8:	48 89 c7             	mov    %rax,%rdi
  4099eb:	e8 90 06 00 00       	callq  40a080 <_ZNKSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
  4099f0:	48 89 c7             	mov    %rax,%rdi
  4099f3:	e8 6d 06 00 00       	callq  40a065 <_ZNSt16allocator_traitsISaImEE8max_sizeERKS0_>
  4099f8:	c9                   	leaveq 
  4099f9:	c3                   	retq   

00000000004099fa <_ZN9__gnu_cxx13new_allocatorImE8allocateEmPKv>:
      { return std::__addressof(__x); }

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
  4099fa:	55                   	push   %rbp
  4099fb:	48 89 e5             	mov    %rsp,%rbp
  4099fe:	48 83 ec 20          	sub    $0x20,%rsp
  409a02:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409a06:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  409a0a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { 
	if (__n > this->max_size())
  409a0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409a12:	48 89 c7             	mov    %rax,%rdi
  409a15:	e8 74 06 00 00       	callq  40a08e <_ZNK9__gnu_cxx13new_allocatorImE8max_sizeEv>
  409a1a:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  409a1e:	0f 92 c0             	setb   %al
  409a21:	84 c0                	test   %al,%al
  409a23:	74 05                	je     409a2a <_ZN9__gnu_cxx13new_allocatorImE8allocateEmPKv+0x30>
	  std::__throw_bad_alloc();
  409a25:	e8 76 7e ff ff       	callq  4018a0 <_ZSt17__throw_bad_allocv@plt>

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  409a2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  409a2e:	48 c1 e0 03          	shl    $0x3,%rax
  409a32:	48 89 c7             	mov    %rax,%rdi
  409a35:	e8 d6 7e ff ff       	callq  401910 <_Znwm@plt>
      }
  409a3a:	c9                   	leaveq 
  409a3b:	c3                   	retq   

0000000000409a3c <_ZSt32__make_move_if_noexcept_iteratorIPmSt13move_iteratorIS0_EET0_T_>:
  template<typename _Iterator, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond
      <typename iterator_traits<_Iterator>::value_type>::value,
                _Iterator, move_iterator<_Iterator>>::type>
    inline _ReturnType
    __make_move_if_noexcept_iterator(_Iterator __i)
  409a3c:	55                   	push   %rbp
  409a3d:	48 89 e5             	mov    %rsp,%rbp
  409a40:	48 83 ec 20          	sub    $0x20,%rsp
  409a44:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return _ReturnType(__i); }
  409a48:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  409a4c:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  409a50:	48 89 d6             	mov    %rdx,%rsi
  409a53:	48 89 c7             	mov    %rax,%rdi
  409a56:	e8 47 06 00 00       	callq  40a0a2 <_ZNSt13move_iteratorIPmEC1ES0_>
  409a5b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  409a5f:	c9                   	leaveq 
  409a60:	c3                   	retq   

0000000000409a61 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPmES1_mET0_T_S4_S3_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
  409a61:	55                   	push   %rbp
  409a62:	48 89 e5             	mov    %rsp,%rbp
  409a65:	48 83 ec 20          	sub    $0x20,%rsp
  409a69:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  409a6d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  409a71:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  409a75:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
  409a79:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  409a7d:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  409a81:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  409a85:	48 89 ce             	mov    %rcx,%rsi
  409a88:	48 89 c7             	mov    %rax,%rdi
  409a8b:	e8 2b 06 00 00       	callq  40a0bb <_ZSt18uninitialized_copyISt13move_iteratorIPmES1_ET0_T_S4_S3_>
  409a90:	c9                   	leaveq 
  409a91:	c3                   	retq   

0000000000409a92 <_ZNSt16allocator_traitsISaImEE10_S_destroyImEENSt9enable_ifIXsrNS1_16__destroy_helperIT_EE5valueEvE4typeERS0_PS5_>:
	  static const bool value = type::value;
	};

      template<typename _Tp>
	static typename enable_if<__destroy_helper<_Tp>::value, void>::type
       	_S_destroy(_Alloc& __a, _Tp* __p)
  409a92:	55                   	push   %rbp
  409a93:	48 89 e5             	mov    %rsp,%rbp
  409a96:	48 83 ec 10          	sub    $0x10,%rsp
  409a9a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409a9e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ __a.destroy(__p); }
  409aa2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  409aa6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409aaa:	48 89 d6             	mov    %rdx,%rsi
  409aad:	48 89 c7             	mov    %rax,%rdi
  409ab0:	e8 33 06 00 00       	callq  40a0e8 <_ZN9__gnu_cxx13new_allocatorImE7destroyImEEvPT_>
  409ab5:	c9                   	leaveq 
  409ab6:	c3                   	retq   

0000000000409ab7 <_ZN9__gnu_cxxneIPKSt6vectorISt5tupleIIdddEESaIS3_EES1_IS5_SaIS5_EEEEbRKNS_17__normal_iteratorIT_T0_EESF_>:
	       const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
  409ab7:	55                   	push   %rbp
  409ab8:	48 89 e5             	mov    %rsp,%rbp
  409abb:	53                   	push   %rbx
  409abc:	48 83 ec 18          	sub    $0x18,%rsp
  409ac0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  409ac4:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() != __rhs.base(); }
  409ac8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409acc:	48 89 c7             	mov    %rax,%rdi
  409acf:	e8 22 06 00 00       	callq  40a0f6 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt6vectorISt5tupleIIdddEESaIS3_EES1_IS5_SaIS5_EEE4baseEv>
  409ad4:	48 8b 18             	mov    (%rax),%rbx
  409ad7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  409adb:	48 89 c7             	mov    %rax,%rdi
  409ade:	e8 13 06 00 00       	callq  40a0f6 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt6vectorISt5tupleIIdddEESaIS3_EES1_IS5_SaIS5_EEE4baseEv>
  409ae3:	48 8b 00             	mov    (%rax),%rax
  409ae6:	48 39 c3             	cmp    %rax,%rbx
  409ae9:	0f 95 c0             	setne  %al
  409aec:	48 83 c4 18          	add    $0x18,%rsp
  409af0:	5b                   	pop    %rbx
  409af1:	5d                   	pop    %rbp
  409af2:	c3                   	retq   
  409af3:	90                   	nop

0000000000409af4 <_ZN9__gnu_cxx17__normal_iteratorIPKSt6vectorISt5tupleIIdddEESaIS3_EES1_IS5_SaIS5_EEEppEv>:
      pointer
      operator->() const
      { return _M_current; }

      __normal_iterator&
      operator++()
  409af4:	55                   	push   %rbp
  409af5:	48 89 e5             	mov    %rsp,%rbp
  409af8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	++_M_current;
  409afc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409b00:	48 8b 00             	mov    (%rax),%rax
  409b03:	48 8d 50 18          	lea    0x18(%rax),%rdx
  409b07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409b0b:	48 89 10             	mov    %rdx,(%rax)
	return *this;
  409b0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  409b12:	5d                   	pop    %rbp
  409b13:	c3                   	retq   

0000000000409b14 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt6vectorISt5tupleIIdddEESaIS3_EES1_IS5_SaIS5_EEEdeEv>:
		      _Container>::__type>& __i)
        : _M_current(__i.base()) { }

      // Forward iterator requirements
      reference
      operator*() const
  409b14:	55                   	push   %rbp
  409b15:	48 89 e5             	mov    %rsp,%rbp
  409b18:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
  409b1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409b20:	48 8b 00             	mov    (%rax),%rax
  409b23:	5d                   	pop    %rbp
  409b24:	c3                   	retq   

0000000000409b25 <_ZSt7forwardIRKSt6vectorISt5tupleIIdddEESaIS2_EEEOT_RNSt16remove_referenceIS7_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  409b25:	55                   	push   %rbp
  409b26:	48 89 e5             	mov    %rsp,%rbp
  409b29:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  409b2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409b31:	5d                   	pop    %rbp
  409b32:	c3                   	retq   

0000000000409b33 <_ZSt10_ConstructISt6vectorISt5tupleIIdddEESaIS2_EEIRKS4_EEvPT_DpOT0_>:
   * object's constructor with an initializer.
   */
#if __cplusplus >= 201103L
  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
  409b33:	55                   	push   %rbp
  409b34:	48 89 e5             	mov    %rsp,%rbp
  409b37:	41 55                	push   %r13
  409b39:	41 54                	push   %r12
  409b3b:	53                   	push   %rbx
  409b3c:	48 83 ec 18          	sub    $0x18,%rsp
  409b40:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  409b44:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  409b48:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409b4c:	48 89 c7             	mov    %rax,%rdi
  409b4f:	e8 d1 ff ff ff       	callq  409b25 <_ZSt7forwardIRKSt6vectorISt5tupleIIdddEESaIS2_EEEOT_RNSt16remove_referenceIS7_E4typeE>
  409b54:	49 89 c5             	mov    %rax,%r13
  409b57:	4c 8b 65 d8          	mov    -0x28(%rbp),%r12
  409b5b:	4c 89 e6             	mov    %r12,%rsi
  409b5e:	bf 18 00 00 00       	mov    $0x18,%edi
  409b63:	e8 f5 9f ff ff       	callq  403b5d <_ZnwmPv>
  409b68:	48 89 c3             	mov    %rax,%rbx
  409b6b:	48 85 db             	test   %rbx,%rbx
  409b6e:	74 0d                	je     409b7d <_ZSt10_ConstructISt6vectorISt5tupleIIdddEESaIS2_EEIRKS4_EEvPT_DpOT0_+0x4a>
  409b70:	4c 89 ee             	mov    %r13,%rsi
  409b73:	48 89 df             	mov    %rbx,%rdi
  409b76:	e8 89 05 00 00       	callq  40a104 <_ZNSt6vectorISt5tupleIIdddEESaIS1_EEC1ERKS3_>
  409b7b:	eb 1b                	jmp    409b98 <_ZSt10_ConstructISt6vectorISt5tupleIIdddEESaIS2_EEIRKS4_EEvPT_DpOT0_+0x65>
  409b7d:	eb 19                	jmp    409b98 <_ZSt10_ConstructISt6vectorISt5tupleIIdddEESaIS2_EEIRKS4_EEvPT_DpOT0_+0x65>
  409b7f:	49 89 c5             	mov    %rax,%r13
  409b82:	4c 89 e6             	mov    %r12,%rsi
  409b85:	48 89 df             	mov    %rbx,%rdi
  409b88:	e8 e2 9f ff ff       	callq  403b6f <_ZdlPvS_>
  409b8d:	4c 89 e8             	mov    %r13,%rax
  409b90:	48 89 c7             	mov    %rax,%rdi
  409b93:	e8 88 7d ff ff       	callq  401920 <_Unwind_Resume@plt>
  409b98:	48 83 c4 18          	add    $0x18,%rsp
  409b9c:	5b                   	pop    %rbx
  409b9d:	41 5c                	pop    %r12
  409b9f:	41 5d                	pop    %r13
  409ba1:	5d                   	pop    %rbp
  409ba2:	c3                   	retq   

0000000000409ba3 <_ZSt4copyISt13move_iteratorIPdES1_ET0_T_S4_S3_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
  409ba3:	55                   	push   %rbp
  409ba4:	48 89 e5             	mov    %rsp,%rbp
  409ba7:	53                   	push   %rbx
  409ba8:	48 83 ec 28          	sub    $0x28,%rsp
  409bac:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
  409bb0:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  409bb4:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
	       __result));
  409bb8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409bbc:	48 89 c7             	mov    %rax,%rdi
  409bbf:	e8 2c 06 00 00       	callq  40a1f0 <_ZSt12__miter_baseISt13move_iteratorIPdEENSt11_Miter_baseIT_E13iterator_typeES4_>
  409bc4:	48 89 c3             	mov    %rax,%rbx
  409bc7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  409bcb:	48 89 c7             	mov    %rax,%rdi
  409bce:	e8 1d 06 00 00       	callq  40a1f0 <_ZSt12__miter_baseISt13move_iteratorIPdEENSt11_Miter_baseIT_E13iterator_typeES4_>
  409bd3:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  409bd7:	48 89 de             	mov    %rbx,%rsi
  409bda:	48 89 c7             	mov    %rax,%rdi
  409bdd:	e8 28 06 00 00       	callq  40a20a <_ZSt14__copy_move_a2ILb1EPdS0_ET1_T0_S2_S1_>
    }
  409be2:	48 83 c4 28          	add    $0x28,%rsp
  409be6:	5b                   	pop    %rbx
  409be7:	5d                   	pop    %rbp
  409be8:	c3                   	retq   
  409be9:	90                   	nop

0000000000409bea <_ZNSt12__shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEELN9__gnu_cxx12_Lock_policyE2EEC1ISaIS8_EIS7_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:

#ifdef __GXX_RTTI
    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
  409bea:	55                   	push   %rbp
  409beb:	48 89 e5             	mov    %rsp,%rbp
  409bee:	53                   	push   %rbx
  409bef:	48 83 ec 38          	sub    $0x38,%rsp
  409bf3:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  409bf7:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  409bfb:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
		     _Args&&... __args)
	: _M_ptr(), _M_refcount(__tag, (_Tp*)0, __a,
				std::forward<_Args>(__args)...)
  409bff:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409c03:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  409c0a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  409c0e:	48 89 c7             	mov    %rax,%rdi
  409c11:	e8 b5 c6 ff ff       	callq  4062cb <_ZSt7forwardISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEOT_RNSt16remove_referenceIS6_E4typeE>
  409c16:	48 89 c2             	mov    %rax,%rdx
  409c19:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409c1d:	48 8d 78 08          	lea    0x8(%rax),%rdi
  409c21:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409c25:	88 1c 24             	mov    %bl,(%rsp)
  409c28:	48 89 d1             	mov    %rdx,%rcx
  409c2b:	48 89 c2             	mov    %rax,%rdx
  409c2e:	be 00 00 00 00       	mov    $0x0,%esi
  409c33:	e8 46 06 00 00       	callq  40a27e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1INSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaISC_EISB_EEESt19_Sp_make_shared_tagPT_RKT0_DpOT1_>
	{
	  // _M_ptr needs to point to the newly constructed object.
	  // This relies on _Sp_counted_ptr_inplace::_M_get_deleter.
	  void* __p = _M_refcount._M_get_deleter(typeid(__tag));
  409c38:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409c3c:	48 83 c0 08          	add    $0x8,%rax
  409c40:	be d0 c3 40 00       	mov    $0x40c3d0,%esi
  409c45:	48 89 c7             	mov    %rax,%rdi
  409c48:	e8 17 07 00 00       	callq  40a364 <_ZNKSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info>
  409c4d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  _M_ptr = static_cast<_Tp*>(__p);
  409c51:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409c55:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  409c59:	48 89 10             	mov    %rdx,(%rax)
	  __enable_shared_from_this_helper(_M_refcount, _M_ptr, _M_ptr);
  409c5c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409c60:	48 8b 10             	mov    (%rax),%rdx
  409c63:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409c67:	48 8b 00             	mov    (%rax),%rax
  409c6a:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  409c6e:	48 83 c1 08          	add    $0x8,%rcx
  409c72:	48 89 c6             	mov    %rax,%rsi
  409c75:	48 89 cf             	mov    %rcx,%rdi
  409c78:	b8 00 00 00 00       	mov    $0x0,%eax
  409c7d:	e8 2b 07 00 00       	callq  40a3ad <_ZSt32__enable_shared_from_this_helperILN9__gnu_cxx12_Lock_policyE2EEvRKSt14__shared_countIXT_EEz>
	}
  409c82:	48 83 c4 38          	add    $0x38,%rsp
  409c86:	5b                   	pop    %rbx
  409c87:	5d                   	pop    %rbp
  409c88:	c3                   	retq   

0000000000409c89 <_ZNSt16allocator_traitsISaISt6threadEE8max_sizeERKS1_>:
       *  @return @c __a.max_size() or @c numeric_limits<size_type>::max()
       *
       *  Returns @c __a.max_size() if that expression is well-formed,
       *  otherwise returns @c numeric_limits<size_type>::max()
      */
      static size_type max_size(const _Alloc& __a)
  409c89:	55                   	push   %rbp
  409c8a:	48 89 e5             	mov    %rsp,%rbp
  409c8d:	48 83 ec 10          	sub    $0x10,%rsp
  409c91:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_max_size(__a); }
  409c95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409c99:	48 89 c7             	mov    %rax,%rdi
  409c9c:	e8 64 07 00 00       	callq  40a405 <_ZNSt16allocator_traitsISaISt6threadEE11_S_max_sizeIKS1_EENSt9enable_ifIXsrNS2_16__maxsize_helperIT_EE5valueEmE4typeERS7_>
  409ca1:	c9                   	leaveq 
  409ca2:	c3                   	retq   
  409ca3:	90                   	nop

0000000000409ca4 <_ZNKSt12_Vector_baseISt6threadSaIS0_EE19_M_get_Tp_allocatorEv>:
      _Tp_alloc_type&
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }

      const _Tp_alloc_type&
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
  409ca4:	55                   	push   %rbp
  409ca5:	48 89 e5             	mov    %rsp,%rbp
  409ca8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
  409cac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409cb0:	5d                   	pop    %rbp
  409cb1:	c3                   	retq   

0000000000409cb2 <_ZNK9__gnu_cxx13new_allocatorISt6threadE8max_sizeEv>:
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
  409cb2:	55                   	push   %rbp
  409cb3:	48 89 e5             	mov    %rsp,%rbp
  409cb6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_t(-1) / sizeof(_Tp); }
  409cba:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
  409cc1:	ff ff 1f 
  409cc4:	5d                   	pop    %rbp
  409cc5:	c3                   	retq   

0000000000409cc6 <_ZNSt13move_iteratorIPSt6threadEC1ES1_>:

      move_iterator()
      : _M_current() { }

      explicit
      move_iterator(iterator_type __i)
  409cc6:	55                   	push   %rbp
  409cc7:	48 89 e5             	mov    %rsp,%rbp
  409cca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409cce:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
  409cd2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409cd6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  409cda:	48 89 10             	mov    %rdx,(%rax)
  409cdd:	5d                   	pop    %rbp
  409cde:	c3                   	retq   

0000000000409cdf <_ZSt18uninitialized_copyISt13move_iteratorIPSt6threadES2_ET0_T_S5_S4_>:
   *
   *  Like copy(), but does not require an initialized output range.
  */
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
  409cdf:	55                   	push   %rbp
  409ce0:	48 89 e5             	mov    %rsp,%rbp
  409ce3:	48 83 ec 20          	sub    $0x20,%rsp
  409ce7:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  409ceb:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  409cef:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;

      return std::__uninitialized_copy<(__is_trivial(_ValueType1)
					&& __is_trivial(_ValueType2))>::
	__uninit_copy(__first, __last, __result);
  409cf3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  409cf7:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  409cfb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  409cff:	48 89 ce             	mov    %rcx,%rsi
  409d02:	48 89 c7             	mov    %rax,%rdi
  409d05:	e8 15 07 00 00       	callq  40a41f <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt6threadES4_EET0_T_S7_S6_>
    }
  409d0a:	c9                   	leaveq 
  409d0b:	c3                   	retq   

0000000000409d0c <_ZN9__gnu_cxx13new_allocatorISt6threadE7destroyIS1_EEvPT_>:
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
  409d0c:	55                   	push   %rbp
  409d0d:	48 89 e5             	mov    %rsp,%rbp
  409d10:	48 83 ec 10          	sub    $0x10,%rsp
  409d14:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409d18:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  409d1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  409d20:	48 89 c7             	mov    %rax,%rdi
  409d23:	e8 6c 9f ff ff       	callq  403c94 <_ZNSt6threadD1Ev>
  409d28:	c9                   	leaveq 
  409d29:	c3                   	retq   

0000000000409d2a <_ZNSt6vectorISt5tupleIIdddEESaIS1_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
  409d2a:	55                   	push   %rbp
  409d2b:	48 89 e5             	mov    %rsp,%rbp
  409d2e:	48 83 ec 10          	sub    $0x10,%rsp
  409d32:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator()); }
  409d36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409d3a:	48 89 c7             	mov    %rax,%rdi
  409d3d:	e8 dc e4 ff ff       	callq  40821e <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EE19_M_get_Tp_allocatorEv>
  409d42:	48 89 c2             	mov    %rax,%rdx
  409d45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409d49:	48 8b 48 08          	mov    0x8(%rax),%rcx
  409d4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409d51:	48 8b 00             	mov    (%rax),%rax
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  409d54:	48 89 ce             	mov    %rcx,%rsi
  409d57:	48 89 c7             	mov    %rax,%rdi
  409d5a:	e8 47 e6 ff ff       	callq  4083a6 <_ZSt8_DestroyIPSt5tupleIIdddEES1_EvT_S3_RSaIT0_E>
		      _M_get_Tp_allocator()); }
  409d5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409d63:	48 89 c7             	mov    %rax,%rdi
  409d66:	e8 7b 07 00 00       	callq  40a4e6 <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EED1Ev>
  409d6b:	c9                   	leaveq 
  409d6c:	c3                   	retq   

0000000000409d6d <_ZSt10_ConstructISt6vectorISt5tupleIIdddEESaIS2_EEIEEvPT_DpOT0_>:
   * object's constructor with an initializer.
   */
#if __cplusplus >= 201103L
  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
  409d6d:	55                   	push   %rbp
  409d6e:	48 89 e5             	mov    %rsp,%rbp
  409d71:	41 55                	push   %r13
  409d73:	41 54                	push   %r12
  409d75:	53                   	push   %rbx
  409d76:	48 83 ec 18          	sub    $0x18,%rsp
  409d7a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  409d7e:	4c 8b 65 d8          	mov    -0x28(%rbp),%r12
  409d82:	4c 89 e6             	mov    %r12,%rsi
  409d85:	bf 18 00 00 00       	mov    $0x18,%edi
  409d8a:	e8 ce 9d ff ff       	callq  403b5d <_ZnwmPv>
  409d8f:	48 89 c3             	mov    %rax,%rbx
  409d92:	48 85 db             	test   %rbx,%rbx
  409d95:	74 0a                	je     409da1 <_ZSt10_ConstructISt6vectorISt5tupleIIdddEESaIS2_EEIEEvPT_DpOT0_+0x34>
  409d97:	48 89 df             	mov    %rbx,%rdi
  409d9a:	e8 a7 07 00 00       	callq  40a546 <_ZNSt6vectorISt5tupleIIdddEESaIS1_EEC1Ev>
  409d9f:	eb 1b                	jmp    409dbc <_ZSt10_ConstructISt6vectorISt5tupleIIdddEESaIS2_EEIEEvPT_DpOT0_+0x4f>
  409da1:	eb 19                	jmp    409dbc <_ZSt10_ConstructISt6vectorISt5tupleIIdddEESaIS2_EEIEEvPT_DpOT0_+0x4f>
  409da3:	49 89 c5             	mov    %rax,%r13
  409da6:	4c 89 e6             	mov    %r12,%rsi
  409da9:	48 89 df             	mov    %rbx,%rdi
  409dac:	e8 be 9d ff ff       	callq  403b6f <_ZdlPvS_>
  409db1:	4c 89 e8             	mov    %r13,%rax
  409db4:	48 89 c7             	mov    %rax,%rdi
  409db7:	e8 64 7b ff ff       	callq  401920 <_Unwind_Resume@plt>
  409dbc:	48 83 c4 18          	add    $0x18,%rsp
  409dc0:	5b                   	pop    %rbx
  409dc1:	41 5c                	pop    %r12
  409dc3:	41 5d                	pop    %r13
  409dc5:	5d                   	pop    %rbp
  409dc6:	c3                   	retq   

0000000000409dc7 <_ZNSt16allocator_traitsISaISt6vectorISt5tupleIIdddEESaIS2_EEEE11_S_max_sizeIKS5_EENSt9enable_ifIXsrNS6_16__maxsize_helperIT_EE5valueEmE4typeERSB_>:
	};

      template<typename _Alloc2>
	static typename
       	enable_if<__maxsize_helper<_Alloc2>::value, size_type>::type
       	_S_max_size(_Alloc2& __a)
  409dc7:	55                   	push   %rbp
  409dc8:	48 89 e5             	mov    %rsp,%rbp
  409dcb:	48 83 ec 10          	sub    $0x10,%rsp
  409dcf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{ return __a.max_size(); }
  409dd3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409dd7:	48 89 c7             	mov    %rax,%rdi
  409dda:	e8 7f fa ff ff       	callq  40985e <_ZNK9__gnu_cxx13new_allocatorISt6vectorISt5tupleIIdddEESaIS3_EEE8max_sizeEv>
  409ddf:	c9                   	leaveq 
  409de0:	c3                   	retq   

0000000000409de1 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt6vectorISt5tupleIIdddEESaIS5_EEES8_EET0_T_SB_SA_>:
  template<bool _TrivialValueTypes>
    struct __uninitialized_copy
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
  409de1:	55                   	push   %rbp
  409de2:	48 89 e5             	mov    %rsp,%rbp
  409de5:	53                   	push   %rbx
  409de6:	48 83 ec 38          	sub    $0x38,%rsp
  409dea:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
  409dee:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  409df2:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
  409df6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  409dfa:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __try
	    {
	      for (; __first != __last; ++__first, ++__cur)
  409dfe:	eb 37                	jmp    409e37 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt6vectorISt5tupleIIdddEESaIS5_EEES8_EET0_T_SB_SA_+0x56>
		std::_Construct(std::__addressof(*__cur), *__first);
  409e00:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  409e04:	48 89 c7             	mov    %rax,%rdi
  409e07:	e8 aa 07 00 00       	callq  40a5b6 <_ZNKSt13move_iteratorIPSt6vectorISt5tupleIIdddEESaIS2_EEEdeEv>
  409e0c:	48 89 c3             	mov    %rax,%rbx
  409e0f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409e13:	48 89 c7             	mov    %rax,%rdi
  409e16:	e8 85 f9 ff ff       	callq  4097a0 <_ZSt11__addressofISt6vectorISt5tupleIIdddEESaIS2_EEEPT_RS5_>
  409e1b:	48 89 de             	mov    %rbx,%rsi
  409e1e:	48 89 c7             	mov    %rax,%rdi
  409e21:	e8 bb 07 00 00       	callq  40a5e1 <_ZSt10_ConstructISt6vectorISt5tupleIIdddEESaIS2_EEIS4_EEvPT_DpOT0_>
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
	  __try
	    {
	      for (; __first != __last; ++__first, ++__cur)
  409e26:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  409e2a:	48 89 c7             	mov    %rax,%rdi
  409e2d:	e8 56 07 00 00       	callq  40a588 <_ZNSt13move_iteratorIPSt6vectorISt5tupleIIdddEESaIS2_EEEppEv>
  409e32:	48 83 45 e8 18       	addq   $0x18,-0x18(%rbp)
  409e37:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  409e3b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  409e3f:	48 89 d6             	mov    %rdx,%rsi
  409e42:	48 89 c7             	mov    %rax,%rdi
  409e45:	e8 16 07 00 00       	callq  40a560 <_ZStneIPSt6vectorISt5tupleIIdddEESaIS2_EEEbRKSt13move_iteratorIT_ESA_>
  409e4a:	84 c0                	test   %al,%al
  409e4c:	75 b2                	jne    409e00 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt6vectorISt5tupleIIdddEESaIS5_EEES8_EET0_T_SB_SA_+0x1f>
		std::_Construct(std::__addressof(*__cur), *__first);
	      return __cur;
  409e4e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409e52:	eb 33                	jmp    409e87 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt6vectorISt5tupleIIdddEESaIS5_EEES8_EET0_T_SB_SA_+0xa6>
  409e54:	48 89 c3             	mov    %rax,%rbx
	    }
	  __catch(...)
  409e57:	e8 34 7a ff ff       	callq  401890 <__cxa_end_catch@plt>
  409e5c:	48 89 d8             	mov    %rbx,%rax
  409e5f:	48 89 c7             	mov    %rax,%rdi
  409e62:	e8 b9 7a ff ff       	callq  401920 <_Unwind_Resume@plt>
  409e67:	48 89 c7             	mov    %rax,%rdi
  409e6a:	e8 61 7a ff ff       	callq  4018d0 <__cxa_begin_catch@plt>
	    {
	      std::_Destroy(__result, __cur);
  409e6f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  409e73:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  409e77:	48 89 d6             	mov    %rdx,%rsi
  409e7a:	48 89 c7             	mov    %rax,%rdi
  409e7d:	e8 fe e1 ff ff       	callq  408080 <_ZSt8_DestroyIPSt6vectorISt5tupleIIdddEESaIS2_EEEvT_S6_>
	      __throw_exception_again;
  409e82:	e8 f9 77 ff ff       	callq  401680 <__cxa_rethrow@plt>
	    }
	}
  409e87:	48 83 c4 38          	add    $0x38,%rsp
  409e8b:	5b                   	pop    %rbx
  409e8c:	5d                   	pop    %rbp
  409e8d:	c3                   	retq   

0000000000409e8e <_ZSt11__addressofISt5tupleIIdddEEEPT_RS2_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  409e8e:	55                   	push   %rbp
  409e8f:	48 89 e5             	mov    %rsp,%rbp
  409e92:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return reinterpret_cast<_Tp*>
	(&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
  409e96:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  409e9a:	5d                   	pop    %rbp
  409e9b:	c3                   	retq   

0000000000409e9c <_ZNSt10_Head_baseILm2EdLb0EEC1Ev>:
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
  409e9c:	55                   	push   %rbp
  409e9d:	48 89 e5             	mov    %rsp,%rbp
  409ea0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_head_impl() { }
  409ea4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  409ea8:	b8 00 00 00 00       	mov    $0x0,%eax
  409ead:	48 89 02             	mov    %rax,(%rdx)
  409eb0:	5d                   	pop    %rbp
  409eb1:	c3                   	retq   

0000000000409eb2 <_ZNSt11_Tuple_implILm2EIdEEC1Ev>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }

      static constexpr const _Inherited&
      _M_tail(const _Tuple_impl& __t) noexcept { return __t; }

      constexpr _Tuple_impl()
  409eb2:	55                   	push   %rbp
  409eb3:	48 89 e5             	mov    %rsp,%rbp
  409eb6:	48 83 ec 10          	sub    $0x10,%rsp
  409eba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Inherited(), _Base() { }
  409ebe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409ec2:	48 89 c7             	mov    %rax,%rdi
  409ec5:	e8 10 a0 ff ff       	callq  403eda <_ZNSt11_Tuple_implILm3EIEEC1Ev>
  409eca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409ece:	48 89 c7             	mov    %rax,%rdi
  409ed1:	e8 c6 ff ff ff       	callq  409e9c <_ZNSt10_Head_baseILm2EdLb0EEC1Ev>
  409ed6:	c9                   	leaveq 
  409ed7:	c3                   	retq   

0000000000409ed8 <_ZNSt10_Head_baseILm1EdLb0EEC1Ev>:
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
  409ed8:	55                   	push   %rbp
  409ed9:	48 89 e5             	mov    %rsp,%rbp
  409edc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_head_impl() { }
  409ee0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  409ee4:	b8 00 00 00 00       	mov    $0x0,%eax
  409ee9:	48 89 02             	mov    %rax,(%rdx)
  409eec:	5d                   	pop    %rbp
  409eed:	c3                   	retq   

0000000000409eee <_ZNSt11_Tuple_implILm1EIddEEC1Ev>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }

      static constexpr const _Inherited&
      _M_tail(const _Tuple_impl& __t) noexcept { return __t; }

      constexpr _Tuple_impl()
  409eee:	55                   	push   %rbp
  409eef:	48 89 e5             	mov    %rsp,%rbp
  409ef2:	48 83 ec 10          	sub    $0x10,%rsp
  409ef6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Inherited(), _Base() { }
  409efa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409efe:	48 89 c7             	mov    %rax,%rdi
  409f01:	e8 ac ff ff ff       	callq  409eb2 <_ZNSt11_Tuple_implILm2EIdEEC1Ev>
  409f06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409f0a:	48 83 c0 08          	add    $0x8,%rax
  409f0e:	48 89 c7             	mov    %rax,%rdi
  409f11:	e8 c2 ff ff ff       	callq  409ed8 <_ZNSt10_Head_baseILm1EdLb0EEC1Ev>
  409f16:	c9                   	leaveq 
  409f17:	c3                   	retq   

0000000000409f18 <_ZNSt10_Head_baseILm0EdLb0EEC1Ev>:
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
  409f18:	55                   	push   %rbp
  409f19:	48 89 e5             	mov    %rsp,%rbp
  409f1c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_head_impl() { }
  409f20:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  409f24:	b8 00 00 00 00       	mov    $0x0,%eax
  409f29:	48 89 02             	mov    %rax,(%rdx)
  409f2c:	5d                   	pop    %rbp
  409f2d:	c3                   	retq   

0000000000409f2e <_ZNSt11_Tuple_implILm0EIdddEEC1Ev>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }

      static constexpr const _Inherited&
      _M_tail(const _Tuple_impl& __t) noexcept { return __t; }

      constexpr _Tuple_impl()
  409f2e:	55                   	push   %rbp
  409f2f:	48 89 e5             	mov    %rsp,%rbp
  409f32:	48 83 ec 10          	sub    $0x10,%rsp
  409f36:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Inherited(), _Base() { }
  409f3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409f3e:	48 89 c7             	mov    %rax,%rdi
  409f41:	e8 a8 ff ff ff       	callq  409eee <_ZNSt11_Tuple_implILm1EIddEEC1Ev>
  409f46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409f4a:	48 83 c0 10          	add    $0x10,%rax
  409f4e:	48 89 c7             	mov    %rax,%rdi
  409f51:	e8 c2 ff ff ff       	callq  409f18 <_ZNSt10_Head_baseILm0EdLb0EEC1Ev>
  409f56:	c9                   	leaveq 
  409f57:	c3                   	retq   

0000000000409f58 <_ZNSt5tupleIIdddEEC1Ev>:
    class tuple : public _Tuple_impl<0, _Elements...>
    {
      typedef _Tuple_impl<0, _Elements...> _Inherited;

    public:
      constexpr tuple()
  409f58:	55                   	push   %rbp
  409f59:	48 89 e5             	mov    %rsp,%rbp
  409f5c:	48 83 ec 10          	sub    $0x10,%rsp
  409f60:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Inherited() { }
  409f64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409f68:	48 89 c7             	mov    %rax,%rdi
  409f6b:	e8 be ff ff ff       	callq  409f2e <_ZNSt11_Tuple_implILm0EIdddEEC1Ev>
  409f70:	c9                   	leaveq 
  409f71:	c3                   	retq   

0000000000409f72 <_ZSt10_ConstructISt5tupleIIdddEEIEEvPT_DpOT0_>:
   * object's constructor with an initializer.
   */
#if __cplusplus >= 201103L
  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
  409f72:	55                   	push   %rbp
  409f73:	48 89 e5             	mov    %rsp,%rbp
  409f76:	48 83 ec 10          	sub    $0x10,%rsp
  409f7a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  409f7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409f82:	48 89 c6             	mov    %rax,%rsi
  409f85:	bf 18 00 00 00       	mov    $0x18,%edi
  409f8a:	e8 ce 9b ff ff       	callq  403b5d <_ZnwmPv>
  409f8f:	48 85 c0             	test   %rax,%rax
  409f92:	74 08                	je     409f9c <_ZSt10_ConstructISt5tupleIIdddEEIEEvPT_DpOT0_+0x2a>
  409f94:	48 89 c7             	mov    %rax,%rdi
  409f97:	e8 bc ff ff ff       	callq  409f58 <_ZNSt5tupleIIdddEEC1Ev>
  409f9c:	c9                   	leaveq 
  409f9d:	c3                   	retq   

0000000000409f9e <_ZNSt16allocator_traitsISaISt5tupleIIdddEEEE11_S_max_sizeIKS2_EENSt9enable_ifIXsrNS3_16__maxsize_helperIT_EE5valueEmE4typeERS8_>:
	};

      template<typename _Alloc2>
	static typename
       	enable_if<__maxsize_helper<_Alloc2>::value, size_type>::type
       	_S_max_size(_Alloc2& __a)
  409f9e:	55                   	push   %rbp
  409f9f:	48 89 e5             	mov    %rsp,%rbp
  409fa2:	48 83 ec 10          	sub    $0x10,%rsp
  409fa6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{ return __a.max_size(); }
  409faa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409fae:	48 89 c7             	mov    %rax,%rdi
  409fb1:	e8 6c f9 ff ff       	callq  409922 <_ZNK9__gnu_cxx13new_allocatorISt5tupleIIdddEEE8max_sizeEv>
  409fb6:	c9                   	leaveq 
  409fb7:	c3                   	retq   

0000000000409fb8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt5tupleIIdddEEES5_EET0_T_S8_S7_>:
  template<bool _TrivialValueTypes>
    struct __uninitialized_copy
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
  409fb8:	55                   	push   %rbp
  409fb9:	48 89 e5             	mov    %rsp,%rbp
  409fbc:	53                   	push   %rbx
  409fbd:	48 83 ec 38          	sub    $0x38,%rsp
  409fc1:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
  409fc5:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  409fc9:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
  409fcd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  409fd1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __try
	    {
	      for (; __first != __last; ++__first, ++__cur)
  409fd5:	eb 37                	jmp    40a00e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt5tupleIIdddEEES5_EET0_T_S8_S7_+0x56>
		std::_Construct(std::__addressof(*__cur), *__first);
  409fd7:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  409fdb:	48 89 c7             	mov    %rax,%rdi
  409fde:	e8 8f 06 00 00       	callq  40a672 <_ZNKSt13move_iteratorIPSt5tupleIIdddEEEdeEv>
  409fe3:	48 89 c3             	mov    %rax,%rbx
  409fe6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409fea:	48 89 c7             	mov    %rax,%rdi
  409fed:	e8 9c fe ff ff       	callq  409e8e <_ZSt11__addressofISt5tupleIIdddEEEPT_RS2_>
  409ff2:	48 89 de             	mov    %rbx,%rsi
  409ff5:	48 89 c7             	mov    %rax,%rdi
  409ff8:	e8 a0 06 00 00       	callq  40a69d <_ZSt10_ConstructISt5tupleIIdddEEIS1_EEvPT_DpOT0_>
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
	  __try
	    {
	      for (; __first != __last; ++__first, ++__cur)
  409ffd:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40a001:	48 89 c7             	mov    %rax,%rdi
  40a004:	e8 49 06 00 00       	callq  40a652 <_ZNSt13move_iteratorIPSt5tupleIIdddEEEppEv>
  40a009:	48 83 45 e8 18       	addq   $0x18,-0x18(%rbp)
  40a00e:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  40a012:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40a016:	48 89 d6             	mov    %rdx,%rsi
  40a019:	48 89 c7             	mov    %rax,%rdi
  40a01c:	e8 08 06 00 00       	callq  40a629 <_ZStneIPSt5tupleIIdddEEEbRKSt13move_iteratorIT_ES7_>
  40a021:	84 c0                	test   %al,%al
  40a023:	75 b2                	jne    409fd7 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt5tupleIIdddEEES5_EET0_T_S8_S7_+0x1f>
		std::_Construct(std::__addressof(*__cur), *__first);
	      return __cur;
  40a025:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a029:	eb 33                	jmp    40a05e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt5tupleIIdddEEES5_EET0_T_S8_S7_+0xa6>
  40a02b:	48 89 c3             	mov    %rax,%rbx
	    }
	  __catch(...)
  40a02e:	e8 5d 78 ff ff       	callq  401890 <__cxa_end_catch@plt>
  40a033:	48 89 d8             	mov    %rbx,%rax
  40a036:	48 89 c7             	mov    %rax,%rdi
  40a039:	e8 e2 78 ff ff       	callq  401920 <_Unwind_Resume@plt>
  40a03e:	48 89 c7             	mov    %rax,%rdi
  40a041:	e8 8a 78 ff ff       	callq  4018d0 <__cxa_begin_catch@plt>
	    {
	      std::_Destroy(__result, __cur);
  40a046:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40a04a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40a04e:	48 89 d6             	mov    %rdx,%rsi
  40a051:	48 89 c7             	mov    %rax,%rdi
  40a054:	e8 76 f1 ff ff       	callq  4091cf <_ZSt8_DestroyIPSt5tupleIIdddEEEvT_S3_>
	      __throw_exception_again;
  40a059:	e8 22 76 ff ff       	callq  401680 <__cxa_rethrow@plt>
	    }
	}
  40a05e:	48 83 c4 38          	add    $0x38,%rsp
  40a062:	5b                   	pop    %rbx
  40a063:	5d                   	pop    %rbp
  40a064:	c3                   	retq   

000000000040a065 <_ZNSt16allocator_traitsISaImEE8max_sizeERKS0_>:
       *  @return @c __a.max_size() or @c numeric_limits<size_type>::max()
       *
       *  Returns @c __a.max_size() if that expression is well-formed,
       *  otherwise returns @c numeric_limits<size_type>::max()
      */
      static size_type max_size(const _Alloc& __a)
  40a065:	55                   	push   %rbp
  40a066:	48 89 e5             	mov    %rsp,%rbp
  40a069:	48 83 ec 10          	sub    $0x10,%rsp
  40a06d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_max_size(__a); }
  40a071:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a075:	48 89 c7             	mov    %rax,%rdi
  40a078:	e8 68 06 00 00       	callq  40a6e5 <_ZNSt16allocator_traitsISaImEE11_S_max_sizeIKS0_EENSt9enable_ifIXsrNS1_16__maxsize_helperIT_EE5valueEmE4typeERS6_>
  40a07d:	c9                   	leaveq 
  40a07e:	c3                   	retq   
  40a07f:	90                   	nop

000000000040a080 <_ZNKSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>:
      _Tp_alloc_type&
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }

      const _Tp_alloc_type&
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
  40a080:	55                   	push   %rbp
  40a081:	48 89 e5             	mov    %rsp,%rbp
  40a084:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
  40a088:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a08c:	5d                   	pop    %rbp
  40a08d:	c3                   	retq   

000000000040a08e <_ZNK9__gnu_cxx13new_allocatorImE8max_sizeEv>:
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
  40a08e:	55                   	push   %rbp
  40a08f:	48 89 e5             	mov    %rsp,%rbp
  40a092:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_t(-1) / sizeof(_Tp); }
  40a096:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
  40a09d:	ff ff 1f 
  40a0a0:	5d                   	pop    %rbp
  40a0a1:	c3                   	retq   

000000000040a0a2 <_ZNSt13move_iteratorIPmEC1ES0_>:

      move_iterator()
      : _M_current() { }

      explicit
      move_iterator(iterator_type __i)
  40a0a2:	55                   	push   %rbp
  40a0a3:	48 89 e5             	mov    %rsp,%rbp
  40a0a6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a0aa:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
  40a0ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a0b2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40a0b6:	48 89 10             	mov    %rdx,(%rax)
  40a0b9:	5d                   	pop    %rbp
  40a0ba:	c3                   	retq   

000000000040a0bb <_ZSt18uninitialized_copyISt13move_iteratorIPmES1_ET0_T_S4_S3_>:
   *
   *  Like copy(), but does not require an initialized output range.
  */
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
  40a0bb:	55                   	push   %rbp
  40a0bc:	48 89 e5             	mov    %rsp,%rbp
  40a0bf:	48 83 ec 20          	sub    $0x20,%rsp
  40a0c3:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  40a0c7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40a0cb:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;

      return std::__uninitialized_copy<(__is_trivial(_ValueType1)
					&& __is_trivial(_ValueType2))>::
	__uninit_copy(__first, __last, __result);
  40a0cf:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40a0d3:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  40a0d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40a0db:	48 89 ce             	mov    %rcx,%rsi
  40a0de:	48 89 c7             	mov    %rax,%rdi
  40a0e1:	e8 19 06 00 00       	callq  40a6ff <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPmES3_EET0_T_S6_S5_>
    }
  40a0e6:	c9                   	leaveq 
  40a0e7:	c3                   	retq   

000000000040a0e8 <_ZN9__gnu_cxx13new_allocatorImE7destroyImEEvPT_>:
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
  40a0e8:	55                   	push   %rbp
  40a0e9:	48 89 e5             	mov    %rsp,%rbp
  40a0ec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a0f0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40a0f4:	5d                   	pop    %rbp
  40a0f5:	c3                   	retq   

000000000040a0f6 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt6vectorISt5tupleIIdddEESaIS3_EES1_IS5_SaIS5_EEE4baseEv>:
      __normal_iterator
      operator-(const difference_type& __n) const
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const
  40a0f6:	55                   	push   %rbp
  40a0f7:	48 89 e5             	mov    %rsp,%rbp
  40a0fa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
  40a0fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a102:	5d                   	pop    %rbp
  40a103:	c3                   	retq   

000000000040a104 <_ZNSt6vectorISt5tupleIIdddEESaIS1_EEC1ERKS3_>:
       *  The newly-created %vector uses a copy of the allocation
       *  object used by @a __x.  All the elements of @a __x are copied,
       *  but any extra memory in
       *  @a __x (for fast expansion) will not be copied.
       */
      vector(const vector& __x)
  40a104:	55                   	push   %rbp
  40a105:	48 89 e5             	mov    %rsp,%rbp
  40a108:	41 55                	push   %r13
  40a10a:	41 54                	push   %r12
  40a10c:	53                   	push   %rbx
  40a10d:	48 83 ec 28          	sub    $0x28,%rsp
  40a111:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40a115:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      : _Base(__x.size(),
        _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
  40a119:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40a11d:	48 89 c7             	mov    %rax,%rdi
  40a120:	e8 ef f7 ff ff       	callq  409914 <_ZNKSt12_Vector_baseISt5tupleIIdddEESaIS1_EE19_M_get_Tp_allocatorEv>
  40a125:	48 89 c2             	mov    %rax,%rdx
  40a128:	48 8d 45 df          	lea    -0x21(%rbp),%rax
  40a12c:	48 89 d6             	mov    %rdx,%rsi
  40a12f:	48 89 c7             	mov    %rax,%rdi
  40a132:	e8 f5 05 00 00       	callq  40a72c <_ZN9__gnu_cxx14__alloc_traitsISaISt5tupleIIdddEEEE17_S_select_on_copyERKS3_>
  40a137:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40a13b:	48 89 c7             	mov    %rax,%rdi
  40a13e:	e8 a3 c9 ff ff       	callq  406ae6 <_ZNKSt6vectorISt5tupleIIdddEESaIS1_EE4sizeEv>
  40a143:	48 89 c1             	mov    %rax,%rcx
  40a146:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40a14a:	48 8d 55 df          	lea    -0x21(%rbp),%rdx
  40a14e:	48 89 ce             	mov    %rcx,%rsi
  40a151:	48 89 c7             	mov    %rax,%rdi
  40a154:	e8 17 06 00 00       	callq  40a770 <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EEC1EmRKS2_>
  40a159:	48 8d 45 df          	lea    -0x21(%rbp),%rax
  40a15d:	48 89 c7             	mov    %rax,%rdi
  40a160:	e8 f1 05 00 00       	callq  40a756 <_ZNSaISt5tupleIIdddEEED1Ev>
      { this->_M_impl._M_finish =
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
				      this->_M_impl._M_start,
				      _M_get_Tp_allocator());
  40a165:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40a169:	48 89 c7             	mov    %rax,%rdi
  40a16c:	e8 ad e0 ff ff       	callq  40821e <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EE19_M_get_Tp_allocatorEv>
  40a171:	49 89 c5             	mov    %rax,%r13
  40a174:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40a178:	4c 8b 20             	mov    (%rax),%r12
  40a17b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40a17f:	48 89 c7             	mov    %rax,%rdi
  40a182:	e8 77 06 00 00       	callq  40a7fe <_ZNKSt6vectorISt5tupleIIdddEESaIS1_EE3endEv>
  40a187:	48 89 c3             	mov    %rax,%rbx
  40a18a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40a18e:	48 89 c7             	mov    %rax,%rdi
  40a191:	e8 38 06 00 00       	callq  40a7ce <_ZNKSt6vectorISt5tupleIIdddEESaIS1_EE5beginEv>
  40a196:	4c 89 e9             	mov    %r13,%rcx
  40a199:	4c 89 e2             	mov    %r12,%rdx
  40a19c:	48 89 de             	mov    %rbx,%rsi
  40a19f:	48 89 c7             	mov    %rax,%rdi
  40a1a2:	e8 88 06 00 00       	callq  40a82f <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt5tupleIIdddEESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>
       *  @a __x (for fast expansion) will not be copied.
       */
      vector(const vector& __x)
      : _Base(__x.size(),
        _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
      { this->_M_impl._M_finish =
  40a1a7:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40a1ab:	48 89 42 08          	mov    %rax,0x8(%rdx)
  40a1af:	eb 34                	jmp    40a1e5 <_ZNSt6vectorISt5tupleIIdddEESaIS1_EEC1ERKS3_+0xe1>
  40a1b1:	48 89 c3             	mov    %rax,%rbx
       *  but any extra memory in
       *  @a __x (for fast expansion) will not be copied.
       */
      vector(const vector& __x)
      : _Base(__x.size(),
        _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
  40a1b4:	48 8d 45 df          	lea    -0x21(%rbp),%rax
  40a1b8:	48 89 c7             	mov    %rax,%rdi
  40a1bb:	e8 96 05 00 00       	callq  40a756 <_ZNSaISt5tupleIIdddEEED1Ev>
  40a1c0:	48 89 d8             	mov    %rbx,%rax
  40a1c3:	48 89 c7             	mov    %rax,%rdi
  40a1c6:	e8 55 77 ff ff       	callq  401920 <_Unwind_Resume@plt>
  40a1cb:	48 89 c3             	mov    %rax,%rbx
  40a1ce:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40a1d2:	48 89 c7             	mov    %rax,%rdi
  40a1d5:	e8 0c 03 00 00       	callq  40a4e6 <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EED1Ev>
  40a1da:	48 89 d8             	mov    %rbx,%rax
  40a1dd:	48 89 c7             	mov    %rax,%rdi
  40a1e0:	e8 3b 77 ff ff       	callq  401920 <_Unwind_Resume@plt>
      { this->_M_impl._M_finish =
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
				      this->_M_impl._M_start,
				      _M_get_Tp_allocator());
      }
  40a1e5:	48 83 c4 28          	add    $0x28,%rsp
  40a1e9:	5b                   	pop    %rbx
  40a1ea:	41 5c                	pop    %r12
  40a1ec:	41 5d                	pop    %r13
  40a1ee:	5d                   	pop    %rbp
  40a1ef:	c3                   	retq   

000000000040a1f0 <_ZSt12__miter_baseISt13move_iteratorIPdEENSt11_Miter_baseIT_E13iterator_typeES4_>:
    : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Miter_base<_Iterator>::iterator_type
    __miter_base(_Iterator __it)
  40a1f0:	55                   	push   %rbp
  40a1f1:	48 89 e5             	mov    %rsp,%rbp
  40a1f4:	48 83 ec 10          	sub    $0x10,%rsp
  40a1f8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    { return std::_Miter_base<_Iterator>::_S_base(__it); }
  40a1fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40a200:	48 89 c7             	mov    %rax,%rdi
  40a203:	e8 58 06 00 00       	callq  40a860 <_ZNSt10_Iter_baseISt13move_iteratorIPdELb1EE7_S_baseES2_>
  40a208:	c9                   	leaveq 
  40a209:	c3                   	retq   

000000000040a20a <_ZSt14__copy_move_a2ILb1EPdS0_ET1_T0_S2_S1_>:
    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
		   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a2(_II __first, _II __last, _OI __result)
  40a20a:	55                   	push   %rbp
  40a20b:	48 89 e5             	mov    %rsp,%rbp
  40a20e:	41 54                	push   %r12
  40a210:	53                   	push   %rbx
  40a211:	48 83 ec 20          	sub    $0x20,%rsp
  40a215:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40a219:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40a21d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    {
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
					     std::__niter_base(__last),
					     std::__niter_base(__result)));
  40a221:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40a225:	48 89 c7             	mov    %rax,%rdi
  40a228:	e8 4d 06 00 00       	callq  40a87a <_ZSt12__niter_baseIPdENSt11_Niter_baseIT_E13iterator_typeES2_>
  40a22d:	49 89 c4             	mov    %rax,%r12
  40a230:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a234:	48 89 c7             	mov    %rax,%rdi
  40a237:	e8 3e 06 00 00       	callq  40a87a <_ZSt12__niter_baseIPdENSt11_Niter_baseIT_E13iterator_typeES2_>
  40a23c:	48 89 c3             	mov    %rax,%rbx
  40a23f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a243:	48 89 c7             	mov    %rax,%rdi
  40a246:	e8 2f 06 00 00       	callq  40a87a <_ZSt12__niter_baseIPdENSt11_Niter_baseIT_E13iterator_typeES2_>
  40a24b:	4c 89 e2             	mov    %r12,%rdx
  40a24e:	48 89 de             	mov    %rbx,%rsi
  40a251:	48 89 c7             	mov    %rax,%rdi
  40a254:	e8 3b 06 00 00       	callq  40a894 <_ZSt13__copy_move_aILb1EPdS0_ET1_T0_S2_S1_>
    }
  40a259:	48 83 c4 20          	add    $0x20,%rsp
  40a25d:	5b                   	pop    %rbx
  40a25e:	41 5c                	pop    %r12
  40a260:	5d                   	pop    %rbp
  40a261:	c3                   	retq   

000000000040a262 <_ZSt4moveIRKSaINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEEEONSt16remove_referenceIT_E4typeEOSD_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
  40a262:	55                   	push   %rbp
  40a263:	48 89 e5             	mov    %rsp,%rbp
  40a266:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  40a26a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a26e:	5d                   	pop    %rbp
  40a26f:	c3                   	retq   

000000000040a270 <_ZSt7forwardIKSaINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEEEOT_RNSt16remove_referenceISB_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  40a270:	55                   	push   %rbp
  40a271:	48 89 e5             	mov    %rsp,%rbp
  40a274:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  40a278:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a27c:	5d                   	pop    %rbp
  40a27d:	c3                   	retq   

000000000040a27e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1INSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaISC_EISB_EEESt19_Sp_make_shared_tagPT_RKT0_DpOT1_>:
	      __throw_exception_again;
	    }
	}

      template<typename _Tp, typename _Alloc, typename... _Args>
	__shared_count(_Sp_make_shared_tag, _Tp*, const _Alloc& __a,
  40a27e:	55                   	push   %rbp
  40a27f:	48 89 e5             	mov    %rsp,%rbp
  40a282:	53                   	push   %rbx
  40a283:	48 83 ec 38          	sub    $0x38,%rsp
  40a287:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a28b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40a28f:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40a293:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
		       _Args&&... __args)
	: _M_pi(0)
  40a297:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40a29b:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	{
	  typedef _Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp> _Sp_cp_type;
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<_Sp_cp_type> _Alloc_traits;
	  typename _Alloc_traits::allocator_type __a2(__a);
  40a2a2:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40a2a6:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
  40a2aa:	48 89 d6             	mov    %rdx,%rsi
  40a2ad:	48 89 c7             	mov    %rax,%rdi
  40a2b0:	e8 11 06 00 00       	callq  40a8c6 <_ZNSaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaIS8_ELN9__gnu_cxx12_Lock_policyE2EEEC1IS8_EERKSaIT_E>
	  _Sp_cp_type* __mem = _Alloc_traits::allocate(__a2, 1);
  40a2b5:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
  40a2b9:	be 01 00 00 00       	mov    $0x1,%esi
  40a2be:	48 89 c7             	mov    %rax,%rdi
  40a2c1:	e8 38 06 00 00       	callq  40a8fe <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaIS9_ELN9__gnu_cxx12_Lock_policyE2EEEE8allocateERSE_m>
  40a2c6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __try
	    {
	      _Alloc_traits::construct(__a2, __mem, std::move(__a),
		    std::forward<_Args>(__args)...);
  40a2ca:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40a2ce:	48 89 c7             	mov    %rax,%rdi
  40a2d1:	e8 f5 bf ff ff       	callq  4062cb <_ZSt7forwardISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEOT_RNSt16remove_referenceIS6_E4typeE>
  40a2d6:	48 89 c3             	mov    %rax,%rbx
	    rebind_traits<_Sp_cp_type> _Alloc_traits;
	  typename _Alloc_traits::allocator_type __a2(__a);
	  _Sp_cp_type* __mem = _Alloc_traits::allocate(__a2, 1);
	  __try
	    {
	      _Alloc_traits::construct(__a2, __mem, std::move(__a),
  40a2d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40a2dd:	48 89 c7             	mov    %rax,%rdi
  40a2e0:	e8 7d ff ff ff       	callq  40a262 <_ZSt4moveIRKSaINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEEEONSt16remove_referenceIT_E4typeEOSD_>
  40a2e5:	48 89 c2             	mov    %rax,%rdx
  40a2e8:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40a2ec:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
  40a2f0:	48 89 d9             	mov    %rbx,%rcx
  40a2f3:	48 89 c7             	mov    %rax,%rdi
  40a2f6:	e8 2d 06 00 00       	callq  40a928 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaIS9_ELN9__gnu_cxx12_Lock_policyE2EEEE9constructISD_IKSA_S8_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSE_PT_DpOSI_>
		    std::forward<_Args>(__args)...);
	      _M_pi = __mem;
  40a2fb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40a2ff:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40a303:	48 89 10             	mov    %rdx,(%rax)
	    }
	  __catch(...)
	    {
	      _Alloc_traits::deallocate(__a2, __mem, 1);
	      __throw_exception_again;
	    }
  40a306:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
  40a30a:	48 89 c7             	mov    %rax,%rdi
  40a30d:	e8 d2 05 00 00       	callq  40a8e4 <_ZNSaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaIS8_ELN9__gnu_cxx12_Lock_policyE2EEED1Ev>
  40a312:	eb 49                	jmp    40a35d <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1INSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaISC_EISB_EEESt19_Sp_make_shared_tagPT_RKT0_DpOT1_+0xdf>
  40a314:	48 89 c3             	mov    %rax,%rbx
	    {
	      _Alloc_traits::construct(__a2, __mem, std::move(__a),
		    std::forward<_Args>(__args)...);
	      _M_pi = __mem;
	    }
	  __catch(...)
  40a317:	e8 74 75 ff ff       	callq  401890 <__cxa_end_catch@plt>
  40a31c:	eb 28                	jmp    40a346 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1INSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaISC_EISB_EEESt19_Sp_make_shared_tagPT_RKT0_DpOT1_+0xc8>
  40a31e:	48 89 c7             	mov    %rax,%rdi
  40a321:	e8 aa 75 ff ff       	callq  4018d0 <__cxa_begin_catch@plt>
	    {
	      _Alloc_traits::deallocate(__a2, __mem, 1);
  40a326:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a32a:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
  40a32e:	ba 01 00 00 00       	mov    $0x1,%edx
  40a333:	48 89 ce             	mov    %rcx,%rsi
  40a336:	48 89 c7             	mov    %rax,%rdi
  40a339:	e8 3b 06 00 00       	callq  40a979 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaIS9_ELN9__gnu_cxx12_Lock_policyE2EEEE10deallocateERSE_PSD_m>
	      __throw_exception_again;
  40a33e:	e8 3d 73 ff ff       	callq  401680 <__cxa_rethrow@plt>
  40a343:	48 89 c3             	mov    %rax,%rbx
	    }
  40a346:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
  40a34a:	48 89 c7             	mov    %rax,%rdi
  40a34d:	e8 92 05 00 00       	callq  40a8e4 <_ZNSaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaIS8_ELN9__gnu_cxx12_Lock_policyE2EEED1Ev>
  40a352:	48 89 d8             	mov    %rbx,%rax
  40a355:	48 89 c7             	mov    %rax,%rdi
  40a358:	e8 c3 75 ff ff       	callq  401920 <_Unwind_Resume@plt>
	}
  40a35d:	48 83 c4 38          	add    $0x38,%rsp
  40a361:	5b                   	pop    %rbx
  40a362:	5d                   	pop    %rbp
  40a363:	c3                   	retq   

000000000040a364 <_ZNKSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info>:
      bool
      _M_unique() const noexcept
      { return this->_M_get_use_count() == 1; }

      void*
      _M_get_deleter(const std::type_info& __ti) const noexcept
  40a364:	55                   	push   %rbp
  40a365:	48 89 e5             	mov    %rsp,%rbp
  40a368:	48 83 ec 10          	sub    $0x10,%rsp
  40a36c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a370:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return _M_pi ? _M_pi->_M_get_deleter(__ti) : 0; }
  40a374:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a378:	48 8b 00             	mov    (%rax),%rax
  40a37b:	48 85 c0             	test   %rax,%rax
  40a37e:	74 26                	je     40a3a6 <_ZNKSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info+0x42>
  40a380:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a384:	48 8b 00             	mov    (%rax),%rax
  40a387:	48 8b 00             	mov    (%rax),%rax
  40a38a:	48 83 c0 20          	add    $0x20,%rax
  40a38e:	48 8b 00             	mov    (%rax),%rax
  40a391:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40a395:	48 8b 12             	mov    (%rdx),%rdx
  40a398:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40a39c:	48 89 ce             	mov    %rcx,%rsi
  40a39f:	48 89 d7             	mov    %rdx,%rdi
  40a3a2:	ff d0                	callq  *%rax
  40a3a4:	eb 05                	jmp    40a3ab <_ZNKSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info+0x47>
  40a3a6:	b8 00 00 00 00       	mov    $0x0,%eax
  40a3ab:	c9                   	leaveq 
  40a3ac:	c3                   	retq   

000000000040a3ad <_ZSt32__enable_shared_from_this_helperILN9__gnu_cxx12_Lock_policyE2EEvRKSt14__shared_countIXT_EEz>:
				     const enable_shared_from_this<_Tp1>*,
				     const _Tp2*) noexcept;

  template<_Lock_policy _Lp>
    inline void
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
  40a3ad:	55                   	push   %rbp
  40a3ae:	48 89 e5             	mov    %rsp,%rbp
  40a3b1:	48 83 ec 40          	sub    $0x40,%rsp
  40a3b5:	48 89 b5 58 ff ff ff 	mov    %rsi,-0xa8(%rbp)
  40a3bc:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  40a3c3:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  40a3ca:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  40a3d1:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  40a3d8:	84 c0                	test   %al,%al
  40a3da:	74 20                	je     40a3fc <_ZSt32__enable_shared_from_this_helperILN9__gnu_cxx12_Lock_policyE2EEvRKSt14__shared_countIXT_EEz+0x4f>
  40a3dc:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  40a3e0:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  40a3e4:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  40a3e8:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  40a3ec:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  40a3f0:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  40a3f4:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  40a3f8:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  40a3fc:	48 89 bd 48 ff ff ff 	mov    %rdi,-0xb8(%rbp)
    { }
  40a403:	c9                   	leaveq 
  40a404:	c3                   	retq   

000000000040a405 <_ZNSt16allocator_traitsISaISt6threadEE11_S_max_sizeIKS1_EENSt9enable_ifIXsrNS2_16__maxsize_helperIT_EE5valueEmE4typeERS7_>:
	};

      template<typename _Alloc2>
	static typename
       	enable_if<__maxsize_helper<_Alloc2>::value, size_type>::type
       	_S_max_size(_Alloc2& __a)
  40a405:	55                   	push   %rbp
  40a406:	48 89 e5             	mov    %rsp,%rbp
  40a409:	48 83 ec 10          	sub    $0x10,%rsp
  40a40d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{ return __a.max_size(); }
  40a411:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a415:	48 89 c7             	mov    %rax,%rdi
  40a418:	e8 95 f8 ff ff       	callq  409cb2 <_ZNK9__gnu_cxx13new_allocatorISt6threadE8max_sizeEv>
  40a41d:	c9                   	leaveq 
  40a41e:	c3                   	retq   

000000000040a41f <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt6threadES4_EET0_T_S7_S6_>:
  template<bool _TrivialValueTypes>
    struct __uninitialized_copy
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
  40a41f:	55                   	push   %rbp
  40a420:	48 89 e5             	mov    %rsp,%rbp
  40a423:	53                   	push   %rbx
  40a424:	48 83 ec 38          	sub    $0x38,%rsp
  40a428:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
  40a42c:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  40a430:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
  40a434:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40a438:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __try
	    {
	      for (; __first != __last; ++__first, ++__cur)
  40a43c:	eb 37                	jmp    40a475 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt6threadES4_EET0_T_S7_S6_+0x56>
		std::_Construct(std::__addressof(*__cur), *__first);
  40a43e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40a442:	48 89 c7             	mov    %rax,%rdi
  40a445:	e8 a4 05 00 00       	callq  40a9ee <_ZNKSt13move_iteratorIPSt6threadEdeEv>
  40a44a:	48 89 c3             	mov    %rax,%rbx
  40a44d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a451:	48 89 c7             	mov    %rax,%rdi
  40a454:	e8 93 f1 ff ff       	callq  4095ec <_ZSt11__addressofISt6threadEPT_RS1_>
  40a459:	48 89 de             	mov    %rbx,%rsi
  40a45c:	48 89 c7             	mov    %rax,%rdi
  40a45f:	e8 a7 05 00 00       	callq  40aa0b <_ZSt10_ConstructISt6threadIS0_EEvPT_DpOT0_>
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
	  __try
	    {
	      for (; __first != __last; ++__first, ++__cur)
  40a464:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40a468:	48 89 c7             	mov    %rax,%rdi
  40a46b:	e8 5e 05 00 00       	callq  40a9ce <_ZNSt13move_iteratorIPSt6threadEppEv>
  40a470:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
  40a475:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  40a479:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40a47d:	48 89 d6             	mov    %rdx,%rsi
  40a480:	48 89 c7             	mov    %rax,%rdi
  40a483:	e8 1e 05 00 00       	callq  40a9a6 <_ZStneIPSt6threadEbRKSt13move_iteratorIT_ES6_>
  40a488:	84 c0                	test   %al,%al
  40a48a:	75 b2                	jne    40a43e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt6threadES4_EET0_T_S7_S6_+0x1f>
		std::_Construct(std::__addressof(*__cur), *__first);
	      return __cur;
  40a48c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a490:	eb 33                	jmp    40a4c5 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt6threadES4_EET0_T_S7_S6_+0xa6>
  40a492:	48 89 c3             	mov    %rax,%rbx
	    }
	  __catch(...)
  40a495:	e8 f6 73 ff ff       	callq  401890 <__cxa_end_catch@plt>
  40a49a:	48 89 d8             	mov    %rbx,%rax
  40a49d:	48 89 c7             	mov    %rax,%rdi
  40a4a0:	e8 7b 74 ff ff       	callq  401920 <_Unwind_Resume@plt>
  40a4a5:	48 89 c7             	mov    %rax,%rdi
  40a4a8:	e8 23 74 ff ff       	callq  4018d0 <__cxa_begin_catch@plt>
	    {
	      std::_Destroy(__result, __cur);
  40a4ad:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40a4b1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40a4b5:	48 89 d6             	mov    %rdx,%rsi
  40a4b8:	48 89 c7             	mov    %rax,%rdi
  40a4bb:	e8 4c d6 ff ff       	callq  407b0c <_ZSt8_DestroyIPSt6threadEvT_S2_>
	      __throw_exception_again;
  40a4c0:	e8 bb 71 ff ff       	callq  401680 <__cxa_rethrow@plt>
	    }
	}
  40a4c5:	48 83 c4 38          	add    $0x38,%rsp
  40a4c9:	5b                   	pop    %rbx
  40a4ca:	5d                   	pop    %rbp
  40a4cb:	c3                   	retq   

000000000040a4cc <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EE12_Vector_implD1Ev>:
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
        rebind<_Tp>::other _Tp_alloc_type;
      typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
       	pointer;

      struct _Vector_impl 
  40a4cc:	55                   	push   %rbp
  40a4cd:	48 89 e5             	mov    %rsp,%rbp
  40a4d0:	48 83 ec 10          	sub    $0x10,%rsp
  40a4d4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a4d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a4dc:	48 89 c7             	mov    %rax,%rdi
  40a4df:	e8 72 02 00 00       	callq  40a756 <_ZNSaISt5tupleIIdddEEED1Ev>
  40a4e4:	c9                   	leaveq 
  40a4e5:	c3                   	retq   

000000000040a4e6 <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EED1Ev>:
	    _M_create_storage(__n);
	  }
      }
#endif

      ~_Vector_base()
  40a4e6:	55                   	push   %rbp
  40a4e7:	48 89 e5             	mov    %rsp,%rbp
  40a4ea:	48 83 ec 10          	sub    $0x10,%rsp
  40a4ee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start); }
  40a4f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a4f6:	48 8b 40 10          	mov    0x10(%rax),%rax
  40a4fa:	48 89 c2             	mov    %rax,%rdx
  40a4fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a501:	48 8b 00             	mov    (%rax),%rax
  40a504:	48 29 c2             	sub    %rax,%rdx
  40a507:	48 89 d0             	mov    %rdx,%rax
  40a50a:	48 c1 f8 03          	sar    $0x3,%rax
  40a50e:	48 89 c2             	mov    %rax,%rdx
  40a511:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
  40a518:	aa aa aa 
  40a51b:	48 0f af c2          	imul   %rdx,%rax
  40a51f:	48 89 c2             	mov    %rax,%rdx
  40a522:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a526:	48 8b 08             	mov    (%rax),%rcx
	  }
      }
#endif

      ~_Vector_base()
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
  40a529:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a52d:	48 89 ce             	mov    %rcx,%rsi
  40a530:	48 89 c7             	mov    %rax,%rdi
  40a533:	e8 98 de ff ff       	callq  4083d0 <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EE13_M_deallocateEPS1_m>
		      - this->_M_impl._M_start); }
  40a538:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a53c:	48 89 c7             	mov    %rax,%rdi
  40a53f:	e8 88 ff ff ff       	callq  40a4cc <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EE12_Vector_implD1Ev>
  40a544:	c9                   	leaveq 
  40a545:	c3                   	retq   

000000000040a546 <_ZNSt6vectorISt5tupleIIdddEESaIS1_EEC1Ev>:
      // [23.2.4.1] construct/copy/destroy
      // (assign() and get_allocator() are also listed in this section)
      /**
       *  @brief  Default constructor creates no elements.
       */
      vector()
  40a546:	55                   	push   %rbp
  40a547:	48 89 e5             	mov    %rsp,%rbp
  40a54a:	48 83 ec 10          	sub    $0x10,%rsp
  40a54e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Base() { }
  40a552:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a556:	48 89 c7             	mov    %rax,%rdi
  40a559:	e8 f6 04 00 00       	callq  40aa54 <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EEC1Ev>
  40a55e:	c9                   	leaveq 
  40a55f:	c3                   	retq   

000000000040a560 <_ZStneIPSt6vectorISt5tupleIIdddEESaIS2_EEEbRKSt13move_iteratorIT_ESA_>:
	       const move_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator!=(const move_iterator<_Iterator>& __x,
  40a560:	55                   	push   %rbp
  40a561:	48 89 e5             	mov    %rsp,%rbp
  40a564:	48 83 ec 10          	sub    $0x10,%rsp
  40a568:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a56c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	       const move_iterator<_Iterator>& __y)
    { return !(__x == __y); }
  40a570:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40a574:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a578:	48 89 d6             	mov    %rdx,%rsi
  40a57b:	48 89 c7             	mov    %rax,%rdi
  40a57e:	e8 eb 04 00 00       	callq  40aa6e <_ZSteqIPSt6vectorISt5tupleIIdddEESaIS2_EEEbRKSt13move_iteratorIT_ESA_>
  40a583:	83 f0 01             	xor    $0x1,%eax
  40a586:	c9                   	leaveq 
  40a587:	c3                   	retq   

000000000040a588 <_ZNSt13move_iteratorIPSt6vectorISt5tupleIIdddEESaIS2_EEEppEv>:
      pointer
      operator->() const
      { return _M_current; }

      move_iterator&
      operator++()
  40a588:	55                   	push   %rbp
  40a589:	48 89 e5             	mov    %rsp,%rbp
  40a58c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	++_M_current;
  40a590:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a594:	48 8b 00             	mov    (%rax),%rax
  40a597:	48 8d 50 18          	lea    0x18(%rax),%rdx
  40a59b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a59f:	48 89 10             	mov    %rdx,(%rax)
	return *this;
  40a5a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  40a5a6:	5d                   	pop    %rbp
  40a5a7:	c3                   	retq   

000000000040a5a8 <_ZSt4moveIRSt6vectorISt5tupleIIdddEESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
  40a5a8:	55                   	push   %rbp
  40a5a9:	48 89 e5             	mov    %rsp,%rbp
  40a5ac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  40a5b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a5b4:	5d                   	pop    %rbp
  40a5b5:	c3                   	retq   

000000000040a5b6 <_ZNKSt13move_iteratorIPSt6vectorISt5tupleIIdddEESaIS2_EEEdeEv>:
      iterator_type
      base() const
      { return _M_current; }

      reference
      operator*() const
  40a5b6:	55                   	push   %rbp
  40a5b7:	48 89 e5             	mov    %rsp,%rbp
  40a5ba:	48 83 ec 10          	sub    $0x10,%rsp
  40a5be:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return std::move(*_M_current); }
  40a5c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a5c6:	48 8b 00             	mov    (%rax),%rax
  40a5c9:	48 89 c7             	mov    %rax,%rdi
  40a5cc:	e8 d7 ff ff ff       	callq  40a5a8 <_ZSt4moveIRSt6vectorISt5tupleIIdddEESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>
  40a5d1:	c9                   	leaveq 
  40a5d2:	c3                   	retq   

000000000040a5d3 <_ZSt7forwardISt6vectorISt5tupleIIdddEESaIS2_EEEOT_RNSt16remove_referenceIS5_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  40a5d3:	55                   	push   %rbp
  40a5d4:	48 89 e5             	mov    %rsp,%rbp
  40a5d7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  40a5db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a5df:	5d                   	pop    %rbp
  40a5e0:	c3                   	retq   

000000000040a5e1 <_ZSt10_ConstructISt6vectorISt5tupleIIdddEESaIS2_EEIS4_EEvPT_DpOT0_>:
   * object's constructor with an initializer.
   */
#if __cplusplus >= 201103L
  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
  40a5e1:	55                   	push   %rbp
  40a5e2:	48 89 e5             	mov    %rsp,%rbp
  40a5e5:	53                   	push   %rbx
  40a5e6:	48 83 ec 18          	sub    $0x18,%rsp
  40a5ea:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40a5ee:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  40a5f2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a5f6:	48 89 c7             	mov    %rax,%rdi
  40a5f9:	e8 d5 ff ff ff       	callq  40a5d3 <_ZSt7forwardISt6vectorISt5tupleIIdddEESaIS2_EEEOT_RNSt16remove_referenceIS5_E4typeE>
  40a5fe:	48 89 c3             	mov    %rax,%rbx
  40a601:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a605:	48 89 c6             	mov    %rax,%rsi
  40a608:	bf 18 00 00 00       	mov    $0x18,%edi
  40a60d:	e8 4b 95 ff ff       	callq  403b5d <_ZnwmPv>
  40a612:	48 85 c0             	test   %rax,%rax
  40a615:	74 0b                	je     40a622 <_ZSt10_ConstructISt6vectorISt5tupleIIdddEESaIS2_EEIS4_EEvPT_DpOT0_+0x41>
  40a617:	48 89 de             	mov    %rbx,%rsi
  40a61a:	48 89 c7             	mov    %rax,%rdi
  40a61d:	e8 86 04 00 00       	callq  40aaa8 <_ZNSt6vectorISt5tupleIIdddEESaIS1_EEC1EOS3_>
  40a622:	48 83 c4 18          	add    $0x18,%rsp
  40a626:	5b                   	pop    %rbx
  40a627:	5d                   	pop    %rbp
  40a628:	c3                   	retq   

000000000040a629 <_ZStneIPSt5tupleIIdddEEEbRKSt13move_iteratorIT_ES7_>:
	       const move_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator!=(const move_iterator<_Iterator>& __x,
  40a629:	55                   	push   %rbp
  40a62a:	48 89 e5             	mov    %rsp,%rbp
  40a62d:	48 83 ec 10          	sub    $0x10,%rsp
  40a631:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a635:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	       const move_iterator<_Iterator>& __y)
    { return !(__x == __y); }
  40a639:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40a63d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a641:	48 89 d6             	mov    %rdx,%rsi
  40a644:	48 89 c7             	mov    %rax,%rdi
  40a647:	e8 8c 04 00 00       	callq  40aad8 <_ZSteqIPSt5tupleIIdddEEEbRKSt13move_iteratorIT_ES7_>
  40a64c:	83 f0 01             	xor    $0x1,%eax
  40a64f:	c9                   	leaveq 
  40a650:	c3                   	retq   
  40a651:	90                   	nop

000000000040a652 <_ZNSt13move_iteratorIPSt5tupleIIdddEEEppEv>:
      pointer
      operator->() const
      { return _M_current; }

      move_iterator&
      operator++()
  40a652:	55                   	push   %rbp
  40a653:	48 89 e5             	mov    %rsp,%rbp
  40a656:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	++_M_current;
  40a65a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a65e:	48 8b 00             	mov    (%rax),%rax
  40a661:	48 8d 50 18          	lea    0x18(%rax),%rdx
  40a665:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a669:	48 89 10             	mov    %rdx,(%rax)
	return *this;
  40a66c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  40a670:	5d                   	pop    %rbp
  40a671:	c3                   	retq   

000000000040a672 <_ZNKSt13move_iteratorIPSt5tupleIIdddEEEdeEv>:
      iterator_type
      base() const
      { return _M_current; }

      reference
      operator*() const
  40a672:	55                   	push   %rbp
  40a673:	48 89 e5             	mov    %rsp,%rbp
  40a676:	48 83 ec 10          	sub    $0x10,%rsp
  40a67a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return std::move(*_M_current); }
  40a67e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a682:	48 8b 00             	mov    (%rax),%rax
  40a685:	48 89 c7             	mov    %rax,%rdi
  40a688:	e8 c2 b2 ff ff       	callq  40594f <_ZSt4moveIRSt5tupleIIdddEEEONSt16remove_referenceIT_E4typeEOS4_>
  40a68d:	c9                   	leaveq 
  40a68e:	c3                   	retq   

000000000040a68f <_ZSt7forwardISt5tupleIIdddEEEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  40a68f:	55                   	push   %rbp
  40a690:	48 89 e5             	mov    %rsp,%rbp
  40a693:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  40a697:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a69b:	5d                   	pop    %rbp
  40a69c:	c3                   	retq   

000000000040a69d <_ZSt10_ConstructISt5tupleIIdddEEIS1_EEvPT_DpOT0_>:
   * object's constructor with an initializer.
   */
#if __cplusplus >= 201103L
  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
  40a69d:	55                   	push   %rbp
  40a69e:	48 89 e5             	mov    %rsp,%rbp
  40a6a1:	53                   	push   %rbx
  40a6a2:	48 83 ec 18          	sub    $0x18,%rsp
  40a6a6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40a6aa:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  40a6ae:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a6b2:	48 89 c7             	mov    %rax,%rdi
  40a6b5:	e8 d5 ff ff ff       	callq  40a68f <_ZSt7forwardISt5tupleIIdddEEEOT_RNSt16remove_referenceIS2_E4typeE>
  40a6ba:	48 89 c3             	mov    %rax,%rbx
  40a6bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a6c1:	48 89 c6             	mov    %rax,%rsi
  40a6c4:	bf 18 00 00 00       	mov    $0x18,%edi
  40a6c9:	e8 8f 94 ff ff       	callq  403b5d <_ZnwmPv>
  40a6ce:	48 85 c0             	test   %rax,%rax
  40a6d1:	74 0b                	je     40a6de <_ZSt10_ConstructISt5tupleIIdddEEIS1_EEvPT_DpOT0_+0x41>
  40a6d3:	48 89 de             	mov    %rbx,%rsi
  40a6d6:	48 89 c7             	mov    %rax,%rdi
  40a6d9:	e8 ea 9b ff ff       	callq  4042c8 <_ZNSt5tupleIIdddEEC1EOS0_>
  40a6de:	48 83 c4 18          	add    $0x18,%rsp
  40a6e2:	5b                   	pop    %rbx
  40a6e3:	5d                   	pop    %rbp
  40a6e4:	c3                   	retq   

000000000040a6e5 <_ZNSt16allocator_traitsISaImEE11_S_max_sizeIKS0_EENSt9enable_ifIXsrNS1_16__maxsize_helperIT_EE5valueEmE4typeERS6_>:
	};

      template<typename _Alloc2>
	static typename
       	enable_if<__maxsize_helper<_Alloc2>::value, size_type>::type
       	_S_max_size(_Alloc2& __a)
  40a6e5:	55                   	push   %rbp
  40a6e6:	48 89 e5             	mov    %rsp,%rbp
  40a6e9:	48 83 ec 10          	sub    $0x10,%rsp
  40a6ed:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{ return __a.max_size(); }
  40a6f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a6f5:	48 89 c7             	mov    %rax,%rdi
  40a6f8:	e8 91 f9 ff ff       	callq  40a08e <_ZNK9__gnu_cxx13new_allocatorImE8max_sizeEv>
  40a6fd:	c9                   	leaveq 
  40a6fe:	c3                   	retq   

000000000040a6ff <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPmES3_EET0_T_S6_S5_>:
  template<>
    struct __uninitialized_copy<true>
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
  40a6ff:	55                   	push   %rbp
  40a700:	48 89 e5             	mov    %rsp,%rbp
  40a703:	48 83 ec 20          	sub    $0x20,%rsp
  40a707:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  40a70b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40a70f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
		      _ForwardIterator __result)
        { return std::copy(__first, __last, __result); }
  40a713:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40a717:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  40a71b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40a71f:	48 89 ce             	mov    %rcx,%rsi
  40a722:	48 89 c7             	mov    %rax,%rdi
  40a725:	e8 e7 03 00 00       	callq  40ab11 <_ZSt4copyISt13move_iteratorIPmES1_ET0_T_S4_S3_>
  40a72a:	c9                   	leaveq 
  40a72b:	c3                   	retq   

000000000040a72c <_ZN9__gnu_cxx14__alloc_traitsISaISt5tupleIIdddEEEE17_S_select_on_copyERKS3_>:
    template<typename _Ptr>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      destroy(_Alloc& __a, _Ptr __p)
      { _Base_type::destroy(__a, std::addressof(*__p)); }

    static _Alloc _S_select_on_copy(const _Alloc& __a)
  40a72c:	55                   	push   %rbp
  40a72d:	48 89 e5             	mov    %rsp,%rbp
  40a730:	48 83 ec 10          	sub    $0x10,%rsp
  40a734:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a738:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return _Base_type::select_on_container_copy_construction(__a); }
  40a73c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a740:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40a744:	48 89 d6             	mov    %rdx,%rsi
  40a747:	48 89 c7             	mov    %rax,%rdi
  40a74a:	e8 08 04 00 00       	callq  40ab57 <_ZNSt16allocator_traitsISaISt5tupleIIdddEEEE37select_on_container_copy_constructionERKS2_>
  40a74f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a753:	c9                   	leaveq 
  40a754:	c3                   	retq   
  40a755:	90                   	nop

000000000040a756 <_ZNSaISt5tupleIIdddEEED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
  40a756:	55                   	push   %rbp
  40a757:	48 89 e5             	mov    %rsp,%rbp
  40a75a:	48 83 ec 10          	sub    $0x10,%rsp
  40a75e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a762:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a766:	48 89 c7             	mov    %rax,%rdi
  40a769:	e8 38 04 00 00       	callq  40aba6 <_ZN9__gnu_cxx13new_allocatorISt5tupleIIdddEEED1Ev>
  40a76e:	c9                   	leaveq 
  40a76f:	c3                   	retq   

000000000040a770 <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EEC1EmRKS2_>:

      _Vector_base(size_t __n)
      : _M_impl()
      { _M_create_storage(__n); }

      _Vector_base(size_t __n, const allocator_type& __a)
  40a770:	55                   	push   %rbp
  40a771:	48 89 e5             	mov    %rsp,%rbp
  40a774:	53                   	push   %rbx
  40a775:	48 83 ec 28          	sub    $0x28,%rsp
  40a779:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40a77d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40a781:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _M_impl(__a)
  40a785:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a789:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40a78d:	48 89 d6             	mov    %rdx,%rsi
  40a790:	48 89 c7             	mov    %rax,%rdi
  40a793:	e8 18 04 00 00       	callq  40abb0 <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
  40a798:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a79c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a7a0:	48 89 d6             	mov    %rdx,%rsi
  40a7a3:	48 89 c7             	mov    %rax,%rdi
  40a7a6:	e8 4d 04 00 00       	callq  40abf8 <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EE17_M_create_storageEm>
  40a7ab:	eb 1a                	jmp    40a7c7 <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EEC1EmRKS2_+0x57>
  40a7ad:	48 89 c3             	mov    %rax,%rbx
      _Vector_base(size_t __n)
      : _M_impl()
      { _M_create_storage(__n); }

      _Vector_base(size_t __n, const allocator_type& __a)
      : _M_impl(__a)
  40a7b0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a7b4:	48 89 c7             	mov    %rax,%rdi
  40a7b7:	e8 10 fd ff ff       	callq  40a4cc <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EE12_Vector_implD1Ev>
  40a7bc:	48 89 d8             	mov    %rbx,%rax
  40a7bf:	48 89 c7             	mov    %rax,%rdi
  40a7c2:	e8 59 71 ff ff       	callq  401920 <_Unwind_Resume@plt>
      { _M_create_storage(__n); }
  40a7c7:	48 83 c4 28          	add    $0x28,%rsp
  40a7cb:	5b                   	pop    %rbx
  40a7cc:	5d                   	pop    %rbp
  40a7cd:	c3                   	retq   

000000000040a7ce <_ZNKSt6vectorISt5tupleIIdddEESaIS1_EE5beginEv>:
       *  Returns a read-only (constant) iterator that points to the
       *  first element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      const_iterator
      begin() const _GLIBCXX_NOEXCEPT
  40a7ce:	55                   	push   %rbp
  40a7cf:	48 89 e5             	mov    %rsp,%rbp
  40a7d2:	48 83 ec 20          	sub    $0x20,%rsp
  40a7d6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return const_iterator(this->_M_impl._M_start); }
  40a7da:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a7de:	48 8b 00             	mov    (%rax),%rax
  40a7e1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40a7e5:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx
  40a7e9:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  40a7ed:	48 89 d6             	mov    %rdx,%rsi
  40a7f0:	48 89 c7             	mov    %rax,%rdi
  40a7f3:	e8 60 04 00 00       	callq  40ac58 <_ZN9__gnu_cxx17__normal_iteratorIPKSt5tupleIIdddEESt6vectorIS2_SaIS2_EEEC1ERKS4_>
  40a7f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40a7fc:	c9                   	leaveq 
  40a7fd:	c3                   	retq   

000000000040a7fe <_ZNKSt6vectorISt5tupleIIdddEESaIS1_EE3endEv>:
       *  Returns a read-only (constant) iterator that points one past
       *  the last element in the %vector.  Iteration is done in
       *  ordinary element order.
       */
      const_iterator
      end() const _GLIBCXX_NOEXCEPT
  40a7fe:	55                   	push   %rbp
  40a7ff:	48 89 e5             	mov    %rsp,%rbp
  40a802:	48 83 ec 20          	sub    $0x20,%rsp
  40a806:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return const_iterator(this->_M_impl._M_finish); }
  40a80a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a80e:	48 8b 40 08          	mov    0x8(%rax),%rax
  40a812:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40a816:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx
  40a81a:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  40a81e:	48 89 d6             	mov    %rdx,%rsi
  40a821:	48 89 c7             	mov    %rax,%rdi
  40a824:	e8 2f 04 00 00       	callq  40ac58 <_ZN9__gnu_cxx17__normal_iteratorIPKSt5tupleIIdddEESt6vectorIS2_SaIS2_EEEC1ERKS4_>
  40a829:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40a82d:	c9                   	leaveq 
  40a82e:	c3                   	retq   

000000000040a82f <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt5tupleIIdddEESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
  40a82f:	55                   	push   %rbp
  40a830:	48 89 e5             	mov    %rsp,%rbp
  40a833:	48 83 ec 20          	sub    $0x20,%rsp
  40a837:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  40a83b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40a83f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40a843:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
  40a847:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40a84b:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  40a84f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40a853:	48 89 ce             	mov    %rcx,%rsi
  40a856:	48 89 c7             	mov    %rax,%rdi
  40a859:	e8 16 04 00 00       	callq  40ac74 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt5tupleIIdddEESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>
  40a85e:	c9                   	leaveq 
  40a85f:	c3                   	retq   

000000000040a860 <_ZNSt10_Iter_baseISt13move_iteratorIPdELb1EE7_S_baseES2_>:

  template<typename _Iterator>
    struct _Iter_base<_Iterator, true>
    {
      typedef typename _Iterator::iterator_type iterator_type;
      static iterator_type _S_base(_Iterator __it)
  40a860:	55                   	push   %rbp
  40a861:	48 89 e5             	mov    %rsp,%rbp
  40a864:	48 83 ec 10          	sub    $0x10,%rsp
  40a868:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
      { return __it.base(); }
  40a86c:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  40a870:	48 89 c7             	mov    %rax,%rdi
  40a873:	e8 2a 04 00 00       	callq  40aca2 <_ZNKSt13move_iteratorIPdE4baseEv>
  40a878:	c9                   	leaveq 
  40a879:	c3                   	retq   

000000000040a87a <_ZSt12__niter_baseIPdENSt11_Niter_baseIT_E13iterator_typeES2_>:
    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Niter_base<_Iterator>::iterator_type
    __niter_base(_Iterator __it)
  40a87a:	55                   	push   %rbp
  40a87b:	48 89 e5             	mov    %rsp,%rbp
  40a87e:	48 83 ec 10          	sub    $0x10,%rsp
  40a882:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::_Niter_base<_Iterator>::_S_base(__it); }
  40a886:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a88a:	48 89 c7             	mov    %rax,%rdi
  40a88d:	e8 21 04 00 00       	callq  40acb3 <_ZNSt10_Iter_baseIPdLb0EE7_S_baseES0_>
  40a892:	c9                   	leaveq 
  40a893:	c3                   	retq   

000000000040a894 <_ZSt13__copy_move_aILb1EPdS0_ET1_T0_S2_S1_>:
	}
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
  40a894:	55                   	push   %rbp
  40a895:	48 89 e5             	mov    %rsp,%rbp
  40a898:	48 83 ec 30          	sub    $0x30,%rsp
  40a89c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40a8a0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40a8a4:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueTypeI)
	                     && __is_pointer<_II>::__value
	                     && __is_pointer<_OI>::__value
			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
  40a8a8:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)

      return std::__copy_move<_IsMove, __simple,
	                      _Category>::__copy_m(__first, __last, __result);
  40a8ac:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40a8b0:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  40a8b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a8b8:	48 89 ce             	mov    %rcx,%rsi
  40a8bb:	48 89 c7             	mov    %rax,%rdi
  40a8be:	e8 fe 03 00 00       	callq  40acc1 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>
    }
  40a8c3:	c9                   	leaveq 
  40a8c4:	c3                   	retq   
  40a8c5:	90                   	nop

000000000040a8c6 <_ZNSaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaIS8_ELN9__gnu_cxx12_Lock_policyE2EEEC1IS8_EERKSaIT_E>:

      allocator(const allocator& __a) throw()
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }
  40a8c6:	55                   	push   %rbp
  40a8c7:	48 89 e5             	mov    %rsp,%rbp
  40a8ca:	48 83 ec 10          	sub    $0x10,%rsp
  40a8ce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a8d2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40a8d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a8da:	48 89 c7             	mov    %rax,%rdi
  40a8dd:	e8 44 04 00 00       	callq  40ad26 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaISA_ELNS_12_Lock_policyE2EEEC1Ev>
  40a8e2:	c9                   	leaveq 
  40a8e3:	c3                   	retq   

000000000040a8e4 <_ZNSaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaIS8_ELN9__gnu_cxx12_Lock_policyE2EEED1Ev>:

      ~allocator() throw() { }
  40a8e4:	55                   	push   %rbp
  40a8e5:	48 89 e5             	mov    %rsp,%rbp
  40a8e8:	48 83 ec 10          	sub    $0x10,%rsp
  40a8ec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a8f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a8f4:	48 89 c7             	mov    %rax,%rdi
  40a8f7:	e8 34 04 00 00       	callq  40ad30 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaISA_ELNS_12_Lock_policyE2EEED1Ev>
  40a8fc:	c9                   	leaveq 
  40a8fd:	c3                   	retq   

000000000040a8fe <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaIS9_ELN9__gnu_cxx12_Lock_policyE2EEEE8allocateERSE_m>:
       *  @param  __n  The number of objects to allocate space for.
       *
       *  Calls @c a.allocate(n)
      */
      static pointer
      allocate(_Alloc& __a, size_type __n)
  40a8fe:	55                   	push   %rbp
  40a8ff:	48 89 e5             	mov    %rsp,%rbp
  40a902:	48 83 ec 10          	sub    $0x10,%rsp
  40a906:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a90a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
  40a90e:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40a912:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a916:	ba 00 00 00 00       	mov    $0x0,%edx
  40a91b:	48 89 ce             	mov    %rcx,%rsi
  40a91e:	48 89 c7             	mov    %rax,%rdi
  40a921:	e8 14 04 00 00       	callq  40ad3a <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaISA_ELNS_12_Lock_policyE2EEE8allocateEmPKv>
  40a926:	c9                   	leaveq 
  40a927:	c3                   	retq   

000000000040a928 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaIS9_ELN9__gnu_cxx12_Lock_policyE2EEEE9constructISD_IKSA_S8_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSE_PT_DpOSI_>:
       *  if that expression is well-formed, otherwise uses placement-new
       *  to construct an object of type @a _Tp at location @a __p from the
       *  arguments @a __args...
      */
      template<typename _Tp, typename... _Args>
	static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
  40a928:	55                   	push   %rbp
  40a929:	48 89 e5             	mov    %rsp,%rbp
  40a92c:	53                   	push   %rbx
  40a92d:	48 83 ec 28          	sub    $0x28,%rsp
  40a931:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40a935:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40a939:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40a93d:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	-> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
  40a941:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40a945:	48 89 c7             	mov    %rax,%rdi
  40a948:	e8 7e b9 ff ff       	callq  4062cb <_ZSt7forwardISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEOT_RNSt16remove_referenceIS6_E4typeE>
  40a94d:	48 89 c3             	mov    %rax,%rbx
  40a950:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40a954:	48 89 c7             	mov    %rax,%rdi
  40a957:	e8 14 f9 ff ff       	callq  40a270 <_ZSt7forwardIKSaINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEEEOT_RNSt16remove_referenceISB_E4typeE>
  40a95c:	48 89 c2             	mov    %rax,%rdx
  40a95f:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40a963:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a967:	48 89 d9             	mov    %rbx,%rcx
  40a96a:	48 89 c7             	mov    %rax,%rdi
  40a96d:	e8 18 04 00 00       	callq  40ad8a <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaIS9_ELN9__gnu_cxx12_Lock_policyE2EEEE12_S_constructISD_IKSA_S8_EEENSt9enable_ifIXsrNSF_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERSE_PSK_DpOSL_>
  40a972:	48 83 c4 28          	add    $0x28,%rsp
  40a976:	5b                   	pop    %rbx
  40a977:	5d                   	pop    %rbp
  40a978:	c3                   	retq   

000000000040a979 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaIS9_ELN9__gnu_cxx12_Lock_policyE2EEEE10deallocateERSE_PSD_m>:
       *  @param  __p  Pointer to the memory to deallocate.
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void deallocate(_Alloc& __a, pointer __p, size_type __n)
  40a979:	55                   	push   %rbp
  40a97a:	48 89 e5             	mov    %rsp,%rbp
  40a97d:	48 83 ec 20          	sub    $0x20,%rsp
  40a981:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a985:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40a989:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
  40a98d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40a991:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40a995:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a999:	48 89 ce             	mov    %rcx,%rsi
  40a99c:	48 89 c7             	mov    %rax,%rdi
  40a99f:	e8 38 04 00 00       	callq  40addc <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaISA_ELNS_12_Lock_policyE2EEE10deallocateEPSD_m>
  40a9a4:	c9                   	leaveq 
  40a9a5:	c3                   	retq   

000000000040a9a6 <_ZStneIPSt6threadEbRKSt13move_iteratorIT_ES6_>:
	       const move_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator!=(const move_iterator<_Iterator>& __x,
  40a9a6:	55                   	push   %rbp
  40a9a7:	48 89 e5             	mov    %rsp,%rbp
  40a9aa:	48 83 ec 10          	sub    $0x10,%rsp
  40a9ae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a9b2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	       const move_iterator<_Iterator>& __y)
    { return !(__x == __y); }
  40a9b6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40a9ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a9be:	48 89 d6             	mov    %rdx,%rsi
  40a9c1:	48 89 c7             	mov    %rax,%rdi
  40a9c4:	e8 35 04 00 00       	callq  40adfe <_ZSteqIPSt6threadEbRKSt13move_iteratorIT_ES6_>
  40a9c9:	83 f0 01             	xor    $0x1,%eax
  40a9cc:	c9                   	leaveq 
  40a9cd:	c3                   	retq   

000000000040a9ce <_ZNSt13move_iteratorIPSt6threadEppEv>:
      pointer
      operator->() const
      { return _M_current; }

      move_iterator&
      operator++()
  40a9ce:	55                   	push   %rbp
  40a9cf:	48 89 e5             	mov    %rsp,%rbp
  40a9d2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	++_M_current;
  40a9d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a9da:	48 8b 00             	mov    (%rax),%rax
  40a9dd:	48 8d 50 08          	lea    0x8(%rax),%rdx
  40a9e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a9e5:	48 89 10             	mov    %rdx,(%rax)
	return *this;
  40a9e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  40a9ec:	5d                   	pop    %rbp
  40a9ed:	c3                   	retq   

000000000040a9ee <_ZNKSt13move_iteratorIPSt6threadEdeEv>:
      iterator_type
      base() const
      { return _M_current; }

      reference
      operator*() const
  40a9ee:	55                   	push   %rbp
  40a9ef:	48 89 e5             	mov    %rsp,%rbp
  40a9f2:	48 83 ec 10          	sub    $0x10,%rsp
  40a9f6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return std::move(*_M_current); }
  40a9fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a9fe:	48 8b 00             	mov    (%rax),%rax
  40aa01:	48 89 c7             	mov    %rax,%rdi
  40aa04:	e8 83 a1 ff ff       	callq  404b8c <_ZSt4moveIRSt6threadEONSt16remove_referenceIT_E4typeEOS3_>
  40aa09:	c9                   	leaveq 
  40aa0a:	c3                   	retq   

000000000040aa0b <_ZSt10_ConstructISt6threadIS0_EEvPT_DpOT0_>:
   * object's constructor with an initializer.
   */
#if __cplusplus >= 201103L
  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
  40aa0b:	55                   	push   %rbp
  40aa0c:	48 89 e5             	mov    %rsp,%rbp
  40aa0f:	53                   	push   %rbx
  40aa10:	48 83 ec 18          	sub    $0x18,%rsp
  40aa14:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40aa18:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  40aa1c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40aa20:	48 89 c7             	mov    %rax,%rdi
  40aa23:	e8 28 b9 ff ff       	callq  406350 <_ZSt7forwardISt6threadEOT_RNSt16remove_referenceIS1_E4typeE>
  40aa28:	48 89 c3             	mov    %rax,%rbx
  40aa2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40aa2f:	48 89 c6             	mov    %rax,%rsi
  40aa32:	bf 08 00 00 00       	mov    $0x8,%edi
  40aa37:	e8 21 91 ff ff       	callq  403b5d <_ZnwmPv>
  40aa3c:	48 85 c0             	test   %rax,%rax
  40aa3f:	74 0b                	je     40aa4c <_ZSt10_ConstructISt6threadIS0_EEvPT_DpOT0_+0x41>
  40aa41:	48 89 de             	mov    %rbx,%rsi
  40aa44:	48 89 c7             	mov    %rax,%rdi
  40aa47:	e8 16 92 ff ff       	callq  403c62 <_ZNSt6threadC1EOS_>
  40aa4c:	48 83 c4 18          	add    $0x18,%rsp
  40aa50:	5b                   	pop    %rbx
  40aa51:	5d                   	pop    %rbp
  40aa52:	c3                   	retq   
  40aa53:	90                   	nop

000000000040aa54 <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EEC1Ev>:

      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

      _Vector_base()
  40aa54:	55                   	push   %rbp
  40aa55:	48 89 e5             	mov    %rsp,%rbp
  40aa58:	48 83 ec 10          	sub    $0x10,%rsp
  40aa5c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_impl() { }
  40aa60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40aa64:	48 89 c7             	mov    %rax,%rdi
  40aa67:	e8 cc 03 00 00       	callq  40ae38 <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EE12_Vector_implC1Ev>
  40aa6c:	c9                   	leaveq 
  40aa6d:	c3                   	retq   

000000000040aa6e <_ZSteqIPSt6vectorISt5tupleIIdddEESaIS2_EEEbRKSt13move_iteratorIT_ESA_>:
	       const move_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator==(const move_iterator<_Iterator>& __x,
  40aa6e:	55                   	push   %rbp
  40aa6f:	48 89 e5             	mov    %rsp,%rbp
  40aa72:	53                   	push   %rbx
  40aa73:	48 83 ec 18          	sub    $0x18,%rsp
  40aa77:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40aa7b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	       const move_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }
  40aa7f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40aa83:	48 89 c7             	mov    %rax,%rdi
  40aa86:	e8 eb 03 00 00       	callq  40ae76 <_ZNKSt13move_iteratorIPSt6vectorISt5tupleIIdddEESaIS2_EEE4baseEv>
  40aa8b:	48 89 c3             	mov    %rax,%rbx
  40aa8e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40aa92:	48 89 c7             	mov    %rax,%rdi
  40aa95:	e8 dc 03 00 00       	callq  40ae76 <_ZNKSt13move_iteratorIPSt6vectorISt5tupleIIdddEESaIS2_EEE4baseEv>
  40aa9a:	48 39 c3             	cmp    %rax,%rbx
  40aa9d:	0f 94 c0             	sete   %al
  40aaa0:	48 83 c4 18          	add    $0x18,%rsp
  40aaa4:	5b                   	pop    %rbx
  40aaa5:	5d                   	pop    %rbp
  40aaa6:	c3                   	retq   
  40aaa7:	90                   	nop

000000000040aaa8 <_ZNSt6vectorISt5tupleIIdddEESaIS1_EEC1EOS3_>:
       *  @param  __x  A %vector of identical element and allocator types.
       *
       *  The newly-created %vector contains the exact contents of @a __x.
       *  The contents of @a __x are a valid, but unspecified %vector.
       */
      vector(vector&& __x) noexcept
  40aaa8:	55                   	push   %rbp
  40aaa9:	48 89 e5             	mov    %rsp,%rbp
  40aaac:	48 83 ec 10          	sub    $0x10,%rsp
  40aab0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40aab4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _Base(std::move(__x)) { }
  40aab8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40aabc:	48 89 c7             	mov    %rax,%rdi
  40aabf:	e8 e4 fa ff ff       	callq  40a5a8 <_ZSt4moveIRSt6vectorISt5tupleIIdddEESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>
  40aac4:	48 89 c2             	mov    %rax,%rdx
  40aac7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40aacb:	48 89 d6             	mov    %rdx,%rsi
  40aace:	48 89 c7             	mov    %rax,%rdi
  40aad1:	e8 c0 03 00 00       	callq  40ae96 <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EEC1EOS3_>
  40aad6:	c9                   	leaveq 
  40aad7:	c3                   	retq   

000000000040aad8 <_ZSteqIPSt5tupleIIdddEEEbRKSt13move_iteratorIT_ES7_>:
	       const move_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator==(const move_iterator<_Iterator>& __x,
  40aad8:	55                   	push   %rbp
  40aad9:	48 89 e5             	mov    %rsp,%rbp
  40aadc:	53                   	push   %rbx
  40aadd:	48 83 ec 18          	sub    $0x18,%rsp
  40aae1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40aae5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	       const move_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }
  40aae9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40aaed:	48 89 c7             	mov    %rax,%rdi
  40aaf0:	e8 ed 03 00 00       	callq  40aee2 <_ZNKSt13move_iteratorIPSt5tupleIIdddEEE4baseEv>
  40aaf5:	48 89 c3             	mov    %rax,%rbx
  40aaf8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40aafc:	48 89 c7             	mov    %rax,%rdi
  40aaff:	e8 de 03 00 00       	callq  40aee2 <_ZNKSt13move_iteratorIPSt5tupleIIdddEEE4baseEv>
  40ab04:	48 39 c3             	cmp    %rax,%rbx
  40ab07:	0f 94 c0             	sete   %al
  40ab0a:	48 83 c4 18          	add    $0x18,%rsp
  40ab0e:	5b                   	pop    %rbx
  40ab0f:	5d                   	pop    %rbp
  40ab10:	c3                   	retq   

000000000040ab11 <_ZSt4copyISt13move_iteratorIPmES1_ET0_T_S4_S3_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
  40ab11:	55                   	push   %rbp
  40ab12:	48 89 e5             	mov    %rsp,%rbp
  40ab15:	53                   	push   %rbx
  40ab16:	48 83 ec 28          	sub    $0x28,%rsp
  40ab1a:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
  40ab1e:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40ab22:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
	       __result));
  40ab26:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40ab2a:	48 89 c7             	mov    %rax,%rdi
  40ab2d:	e8 c1 03 00 00       	callq  40aef3 <_ZSt12__miter_baseISt13move_iteratorIPmEENSt11_Miter_baseIT_E13iterator_typeES4_>
  40ab32:	48 89 c3             	mov    %rax,%rbx
  40ab35:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40ab39:	48 89 c7             	mov    %rax,%rdi
  40ab3c:	e8 b2 03 00 00       	callq  40aef3 <_ZSt12__miter_baseISt13move_iteratorIPmEENSt11_Miter_baseIT_E13iterator_typeES4_>
  40ab41:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40ab45:	48 89 de             	mov    %rbx,%rsi
  40ab48:	48 89 c7             	mov    %rax,%rdi
  40ab4b:	e8 bd 03 00 00       	callq  40af0d <_ZSt14__copy_move_a2ILb1EPmS0_ET1_T0_S2_S1_>
    }
  40ab50:	48 83 c4 28          	add    $0x28,%rsp
  40ab54:	5b                   	pop    %rbx
  40ab55:	5d                   	pop    %rbp
  40ab56:	c3                   	retq   

000000000040ab57 <_ZNSt16allocator_traitsISaISt5tupleIIdddEEEE37select_on_container_copy_constructionERKS2_>:
       *
       *  Returns @c __rhs.select_on_container_copy_construction() if that
       *  expression is well-formed, otherwise returns @a __rhs
      */
      static _Alloc
      select_on_container_copy_construction(const _Alloc& __rhs)
  40ab57:	55                   	push   %rbp
  40ab58:	48 89 e5             	mov    %rsp,%rbp
  40ab5b:	48 83 ec 10          	sub    $0x10,%rsp
  40ab5f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40ab63:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return _S_select(__rhs); }
  40ab67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ab6b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40ab6f:	48 89 d6             	mov    %rdx,%rsi
  40ab72:	48 89 c7             	mov    %rax,%rdi
  40ab75:	e8 eb 03 00 00       	callq  40af65 <_ZNSt16allocator_traitsISaISt5tupleIIdddEEEE9_S_selectIKS2_EENSt9enable_ifIXntsrNS3_15__select_helperIT_EE5valueES8_E4typeERS8_>
  40ab7a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ab7e:	c9                   	leaveq 
  40ab7f:	c3                   	retq   

000000000040ab80 <_ZNSaISt5tupleIIdddEEEC1ERKS1_>:
      typedef true_type propagate_on_container_move_assignment;
#endif

      allocator() throw() { }

      allocator(const allocator& __a) throw()
  40ab80:	55                   	push   %rbp
  40ab81:	48 89 e5             	mov    %rsp,%rbp
  40ab84:	48 83 ec 10          	sub    $0x10,%rsp
  40ab88:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40ab8c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
  40ab90:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40ab94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ab98:	48 89 d6             	mov    %rdx,%rsi
  40ab9b:	48 89 c7             	mov    %rax,%rdi
  40ab9e:	e8 eb 03 00 00       	callq  40af8e <_ZN9__gnu_cxx13new_allocatorISt5tupleIIdddEEEC1ERKS3_>
  40aba3:	c9                   	leaveq 
  40aba4:	c3                   	retq   
  40aba5:	90                   	nop

000000000040aba6 <_ZN9__gnu_cxx13new_allocatorISt5tupleIIdddEEED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  40aba6:	55                   	push   %rbp
  40aba7:	48 89 e5             	mov    %rsp,%rbp
  40abaa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40abae:	5d                   	pop    %rbp
  40abaf:	c3                   	retq   

000000000040abb0 <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EE12_Vector_implC1ERKS2_>:

	_Vector_impl()
	: _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
	{ }

	_Vector_impl(_Tp_alloc_type const& __a)
  40abb0:	55                   	push   %rbp
  40abb1:	48 89 e5             	mov    %rsp,%rbp
  40abb4:	48 83 ec 10          	sub    $0x10,%rsp
  40abb8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40abbc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
  40abc0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40abc4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40abc8:	48 89 d6             	mov    %rdx,%rsi
  40abcb:	48 89 c7             	mov    %rax,%rdi
  40abce:	e8 ad ff ff ff       	callq  40ab80 <_ZNSaISt5tupleIIdddEEEC1ERKS1_>
  40abd3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40abd7:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  40abde:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40abe2:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  40abe9:	00 
  40abea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40abee:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  40abf5:	00 
	{ }
  40abf6:	c9                   	leaveq 
  40abf7:	c3                   	retq   

000000000040abf8 <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EE17_M_create_storageEm>:
	  _M_impl.deallocate(__p, __n);
      }

    private:
      void
      _M_create_storage(size_t __n)
  40abf8:	55                   	push   %rbp
  40abf9:	48 89 e5             	mov    %rsp,%rbp
  40abfc:	48 83 ec 10          	sub    $0x10,%rsp
  40ac00:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40ac04:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      {
	this->_M_impl._M_start = this->_M_allocate(__n);
  40ac08:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40ac0c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ac10:	48 89 d6             	mov    %rdx,%rsi
  40ac13:	48 89 c7             	mov    %rax,%rdi
  40ac16:	e8 05 d7 ff ff       	callq  408320 <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EE11_M_allocateEm>
  40ac1b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40ac1f:	48 89 02             	mov    %rax,(%rdx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
  40ac22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ac26:	48 8b 10             	mov    (%rax),%rdx
  40ac29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ac2d:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  40ac31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ac35:	48 8b 08             	mov    (%rax),%rcx
  40ac38:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40ac3c:	48 89 d0             	mov    %rdx,%rax
  40ac3f:	48 01 c0             	add    %rax,%rax
  40ac42:	48 01 d0             	add    %rdx,%rax
  40ac45:	48 c1 e0 03          	shl    $0x3,%rax
  40ac49:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  40ac4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ac51:	48 89 50 10          	mov    %rdx,0x10(%rax)
      }
  40ac55:	c9                   	leaveq 
  40ac56:	c3                   	retq   
  40ac57:	90                   	nop

000000000040ac58 <_ZN9__gnu_cxx17__normal_iteratorIPKSt5tupleIIdddEESt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      typedef typename __traits_type::pointer   	pointer;

      _GLIBCXX_CONSTEXPR __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
  40ac58:	55                   	push   %rbp
  40ac59:	48 89 e5             	mov    %rsp,%rbp
  40ac5c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40ac60:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40ac64:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40ac68:	48 8b 10             	mov    (%rax),%rdx
  40ac6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ac6f:	48 89 10             	mov    %rdx,(%rax)
  40ac72:	5d                   	pop    %rbp
  40ac73:	c3                   	retq   

000000000040ac74 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt5tupleIIdddEESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>:
   *
   *  Like copy(), but does not require an initialized output range.
  */
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
  40ac74:	55                   	push   %rbp
  40ac75:	48 89 e5             	mov    %rsp,%rbp
  40ac78:	48 83 ec 20          	sub    $0x20,%rsp
  40ac7c:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  40ac80:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40ac84:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;

      return std::__uninitialized_copy<(__is_trivial(_ValueType1)
					&& __is_trivial(_ValueType2))>::
	__uninit_copy(__first, __last, __result);
  40ac88:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40ac8c:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  40ac90:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40ac94:	48 89 ce             	mov    %rcx,%rsi
  40ac97:	48 89 c7             	mov    %rax,%rdi
  40ac9a:	e8 fd 02 00 00       	callq  40af9c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt5tupleIIdddEESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>
    }
  40ac9f:	c9                   	leaveq 
  40aca0:	c3                   	retq   
  40aca1:	90                   	nop

000000000040aca2 <_ZNKSt13move_iteratorIPdE4baseEv>:
      template<typename _Iter>
	move_iterator(const move_iterator<_Iter>& __i)
	: _M_current(__i.base()) { }

      iterator_type
      base() const
  40aca2:	55                   	push   %rbp
  40aca3:	48 89 e5             	mov    %rsp,%rbp
  40aca6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
  40acaa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40acae:	48 8b 00             	mov    (%rax),%rax
  40acb1:	5d                   	pop    %rbp
  40acb2:	c3                   	retq   

000000000040acb3 <_ZNSt10_Iter_baseIPdLb0EE7_S_baseES0_>:
  // untouched
  template<typename _Iterator, bool _HasBase>
    struct _Iter_base
    {
      typedef _Iterator iterator_type;
      static iterator_type _S_base(_Iterator __it)
  40acb3:	55                   	push   %rbp
  40acb4:	48 89 e5             	mov    %rsp,%rbp
  40acb7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return __it; }
  40acbb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40acbf:	5d                   	pop    %rbp
  40acc0:	c3                   	retq   

000000000040acc1 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>:
  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
  40acc1:	55                   	push   %rbp
  40acc2:	48 89 e5             	mov    %rsp,%rbp
  40acc5:	48 83 ec 30          	sub    $0x30,%rsp
  40acc9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40accd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40acd1:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
        {
	  const ptrdiff_t _Num = __last - __first;
  40acd5:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40acd9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40acdd:	48 29 c2             	sub    %rax,%rdx
  40ace0:	48 89 d0             	mov    %rdx,%rax
  40ace3:	48 c1 f8 03          	sar    $0x3,%rax
  40ace7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  if (_Num)
  40aceb:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40acf0:	74 1f                	je     40ad11 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_+0x50>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
  40acf2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40acf6:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  40acfd:	00 
  40acfe:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ad02:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40ad06:	48 89 ce             	mov    %rcx,%rsi
  40ad09:	48 89 c7             	mov    %rax,%rdi
  40ad0c:	e8 af 6a ff ff       	callq  4017c0 <memmove@plt>
	  return __result + _Num;
  40ad11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ad15:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  40ad1c:	00 
  40ad1d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40ad21:	48 01 d0             	add    %rdx,%rax
	}
  40ad24:	c9                   	leaveq 
  40ad25:	c3                   	retq   

000000000040ad26 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaISA_ELNS_12_Lock_policyE2EEEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  40ad26:	55                   	push   %rbp
  40ad27:	48 89 e5             	mov    %rsp,%rbp
  40ad2a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40ad2e:	5d                   	pop    %rbp
  40ad2f:	c3                   	retq   

000000000040ad30 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaISA_ELNS_12_Lock_policyE2EEED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  40ad30:	55                   	push   %rbp
  40ad31:	48 89 e5             	mov    %rsp,%rbp
  40ad34:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40ad38:	5d                   	pop    %rbp
  40ad39:	c3                   	retq   

000000000040ad3a <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaISA_ELNS_12_Lock_policyE2EEE8allocateEmPKv>:
      { return std::__addressof(__x); }

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
  40ad3a:	55                   	push   %rbp
  40ad3b:	48 89 e5             	mov    %rsp,%rbp
  40ad3e:	48 83 ec 20          	sub    $0x20,%rsp
  40ad42:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40ad46:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40ad4a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { 
	if (__n > this->max_size())
  40ad4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ad52:	48 89 c7             	mov    %rax,%rdi
  40ad55:	e8 f0 02 00 00       	callq  40b04a <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaISA_ELNS_12_Lock_policyE2EEE8max_sizeEv>
  40ad5a:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  40ad5e:	0f 92 c0             	setb   %al
  40ad61:	84 c0                	test   %al,%al
  40ad63:	74 05                	je     40ad6a <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaISA_ELNS_12_Lock_policyE2EEE8allocateEmPKv+0x30>
	  std::__throw_bad_alloc();
  40ad65:	e8 36 6b ff ff       	callq  4018a0 <_ZSt17__throw_bad_allocv@plt>

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  40ad6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40ad6e:	48 c1 e0 03          	shl    $0x3,%rax
  40ad72:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  40ad79:	00 
  40ad7a:	48 29 c2             	sub    %rax,%rdx
  40ad7d:	48 89 d0             	mov    %rdx,%rax
  40ad80:	48 89 c7             	mov    %rax,%rdi
  40ad83:	e8 88 6b ff ff       	callq  401910 <_Znwm@plt>
      }
  40ad88:	c9                   	leaveq 
  40ad89:	c3                   	retq   

000000000040ad8a <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaIS9_ELN9__gnu_cxx12_Lock_policyE2EEEE12_S_constructISD_IKSA_S8_EEENSt9enable_ifIXsrNSF_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERSE_PSK_DpOSL_>:
	};

      template<typename _Tp, typename... _Args>
	static typename
       	enable_if<__construct_helper<_Tp, _Args...>::value, void>::type
       	_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
  40ad8a:	55                   	push   %rbp
  40ad8b:	48 89 e5             	mov    %rsp,%rbp
  40ad8e:	53                   	push   %rbx
  40ad8f:	48 83 ec 28          	sub    $0x28,%rsp
  40ad93:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40ad97:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40ad9b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40ad9f:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
  40ada3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40ada7:	48 89 c7             	mov    %rax,%rdi
  40adaa:	e8 1c b5 ff ff       	callq  4062cb <_ZSt7forwardISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEOT_RNSt16remove_referenceIS6_E4typeE>
  40adaf:	48 89 c3             	mov    %rax,%rbx
  40adb2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40adb6:	48 89 c7             	mov    %rax,%rdi
  40adb9:	e8 b2 f4 ff ff       	callq  40a270 <_ZSt7forwardIKSaINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEEEOT_RNSt16remove_referenceISB_E4typeE>
  40adbe:	48 89 c2             	mov    %rax,%rdx
  40adc1:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40adc5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40adc9:	48 89 d9             	mov    %rbx,%rcx
  40adcc:	48 89 c7             	mov    %rax,%rdi
  40adcf:	e8 8a 02 00 00       	callq  40b05e <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaISA_ELNS_12_Lock_policyE2EEE9constructISD_IKSB_S9_EEEvPT_DpOT0_>
  40add4:	48 83 c4 28          	add    $0x28,%rsp
  40add8:	5b                   	pop    %rbx
  40add9:	5d                   	pop    %rbp
  40adda:	c3                   	retq   
  40addb:	90                   	nop

000000000040addc <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaISA_ELNS_12_Lock_policyE2EEE10deallocateEPSD_m>:

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
  40addc:	55                   	push   %rbp
  40addd:	48 89 e5             	mov    %rsp,%rbp
  40ade0:	48 83 ec 20          	sub    $0x20,%rsp
  40ade4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40ade8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40adec:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { ::operator delete(__p); }
  40adf0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40adf4:	48 89 c7             	mov    %rax,%rdi
  40adf7:	e8 64 68 ff ff       	callq  401660 <_ZdlPv@plt>
  40adfc:	c9                   	leaveq 
  40adfd:	c3                   	retq   

000000000040adfe <_ZSteqIPSt6threadEbRKSt13move_iteratorIT_ES6_>:
	       const move_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator==(const move_iterator<_Iterator>& __x,
  40adfe:	55                   	push   %rbp
  40adff:	48 89 e5             	mov    %rsp,%rbp
  40ae02:	53                   	push   %rbx
  40ae03:	48 83 ec 18          	sub    $0x18,%rsp
  40ae07:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40ae0b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	       const move_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }
  40ae0f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ae13:	48 89 c7             	mov    %rax,%rdi
  40ae16:	e8 fd 02 00 00       	callq  40b118 <_ZNKSt13move_iteratorIPSt6threadE4baseEv>
  40ae1b:	48 89 c3             	mov    %rax,%rbx
  40ae1e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40ae22:	48 89 c7             	mov    %rax,%rdi
  40ae25:	e8 ee 02 00 00       	callq  40b118 <_ZNKSt13move_iteratorIPSt6threadE4baseEv>
  40ae2a:	48 39 c3             	cmp    %rax,%rbx
  40ae2d:	0f 94 c0             	sete   %al
  40ae30:	48 83 c4 18          	add    $0x18,%rsp
  40ae34:	5b                   	pop    %rbx
  40ae35:	5d                   	pop    %rbp
  40ae36:	c3                   	retq   
  40ae37:	90                   	nop

000000000040ae38 <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EE12_Vector_implC1Ev>:
      {
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl()
  40ae38:	55                   	push   %rbp
  40ae39:	48 89 e5             	mov    %rsp,%rbp
  40ae3c:	48 83 ec 10          	sub    $0x10,%rsp
  40ae40:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
  40ae44:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ae48:	48 89 c7             	mov    %rax,%rdi
  40ae4b:	e8 da 02 00 00       	callq  40b12a <_ZNSaISt5tupleIIdddEEEC1Ev>
  40ae50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ae54:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  40ae5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ae5f:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  40ae66:	00 
  40ae67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ae6b:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  40ae72:	00 
	{ }
  40ae73:	c9                   	leaveq 
  40ae74:	c3                   	retq   
  40ae75:	90                   	nop

000000000040ae76 <_ZNKSt13move_iteratorIPSt6vectorISt5tupleIIdddEESaIS2_EEE4baseEv>:
      template<typename _Iter>
	move_iterator(const move_iterator<_Iter>& __i)
	: _M_current(__i.base()) { }

      iterator_type
      base() const
  40ae76:	55                   	push   %rbp
  40ae77:	48 89 e5             	mov    %rsp,%rbp
  40ae7a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
  40ae7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ae82:	48 8b 00             	mov    (%rax),%rax
  40ae85:	5d                   	pop    %rbp
  40ae86:	c3                   	retq   

000000000040ae87 <_ZSt4moveIRSaISt5tupleIIdddEEEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
  40ae87:	55                   	push   %rbp
  40ae88:	48 89 e5             	mov    %rsp,%rbp
  40ae8b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  40ae8f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ae93:	5d                   	pop    %rbp
  40ae94:	c3                   	retq   
  40ae95:	90                   	nop

000000000040ae96 <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EEC1EOS3_>:

#if __cplusplus >= 201103L
      _Vector_base(_Tp_alloc_type&& __a)
      : _M_impl(std::move(__a)) { }

      _Vector_base(_Vector_base&& __x)
  40ae96:	55                   	push   %rbp
  40ae97:	48 89 e5             	mov    %rsp,%rbp
  40ae9a:	48 83 ec 10          	sub    $0x10,%rsp
  40ae9e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40aea2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_impl(std::move(__x._M_get_Tp_allocator()))
  40aea6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40aeaa:	48 89 c7             	mov    %rax,%rdi
  40aead:	e8 6c d3 ff ff       	callq  40821e <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EE19_M_get_Tp_allocatorEv>
  40aeb2:	48 89 c7             	mov    %rax,%rdi
  40aeb5:	e8 cd ff ff ff       	callq  40ae87 <_ZSt4moveIRSaISt5tupleIIdddEEEEONSt16remove_referenceIT_E4typeEOS5_>
  40aeba:	48 89 c2             	mov    %rax,%rdx
  40aebd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40aec1:	48 89 d6             	mov    %rdx,%rsi
  40aec4:	48 89 c7             	mov    %rax,%rdi
  40aec7:	e8 78 02 00 00       	callq  40b144 <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EE12_Vector_implC1EOS2_>
      { this->_M_impl._M_swap_data(__x._M_impl); }
  40aecc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40aed0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40aed4:	48 89 d6             	mov    %rdx,%rsi
  40aed7:	48 89 c7             	mov    %rax,%rdi
  40aeda:	e8 b9 02 00 00       	callq  40b198 <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EE12_Vector_impl12_M_swap_dataERS4_>
  40aedf:	c9                   	leaveq 
  40aee0:	c3                   	retq   
  40aee1:	90                   	nop

000000000040aee2 <_ZNKSt13move_iteratorIPSt5tupleIIdddEEE4baseEv>:
      template<typename _Iter>
	move_iterator(const move_iterator<_Iter>& __i)
	: _M_current(__i.base()) { }

      iterator_type
      base() const
  40aee2:	55                   	push   %rbp
  40aee3:	48 89 e5             	mov    %rsp,%rbp
  40aee6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
  40aeea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40aeee:	48 8b 00             	mov    (%rax),%rax
  40aef1:	5d                   	pop    %rbp
  40aef2:	c3                   	retq   

000000000040aef3 <_ZSt12__miter_baseISt13move_iteratorIPmEENSt11_Miter_baseIT_E13iterator_typeES4_>:
    : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Miter_base<_Iterator>::iterator_type
    __miter_base(_Iterator __it)
  40aef3:	55                   	push   %rbp
  40aef4:	48 89 e5             	mov    %rsp,%rbp
  40aef7:	48 83 ec 10          	sub    $0x10,%rsp
  40aefb:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    { return std::_Miter_base<_Iterator>::_S_base(__it); }
  40aeff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40af03:	48 89 c7             	mov    %rax,%rdi
  40af06:	e8 e8 02 00 00       	callq  40b1f3 <_ZNSt10_Iter_baseISt13move_iteratorIPmELb1EE7_S_baseES2_>
  40af0b:	c9                   	leaveq 
  40af0c:	c3                   	retq   

000000000040af0d <_ZSt14__copy_move_a2ILb1EPmS0_ET1_T0_S2_S1_>:
    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
		   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a2(_II __first, _II __last, _OI __result)
  40af0d:	55                   	push   %rbp
  40af0e:	48 89 e5             	mov    %rsp,%rbp
  40af11:	41 54                	push   %r12
  40af13:	53                   	push   %rbx
  40af14:	48 83 ec 20          	sub    $0x20,%rsp
  40af18:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40af1c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40af20:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    {
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
					     std::__niter_base(__last),
					     std::__niter_base(__result)));
  40af24:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40af28:	48 89 c7             	mov    %rax,%rdi
  40af2b:	e8 86 ac ff ff       	callq  405bb6 <_ZSt12__niter_baseIPmENSt11_Niter_baseIT_E13iterator_typeES2_>
  40af30:	49 89 c4             	mov    %rax,%r12
  40af33:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40af37:	48 89 c7             	mov    %rax,%rdi
  40af3a:	e8 77 ac ff ff       	callq  405bb6 <_ZSt12__niter_baseIPmENSt11_Niter_baseIT_E13iterator_typeES2_>
  40af3f:	48 89 c3             	mov    %rax,%rbx
  40af42:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40af46:	48 89 c7             	mov    %rax,%rdi
  40af49:	e8 68 ac ff ff       	callq  405bb6 <_ZSt12__niter_baseIPmENSt11_Niter_baseIT_E13iterator_typeES2_>
  40af4e:	4c 89 e2             	mov    %r12,%rdx
  40af51:	48 89 de             	mov    %rbx,%rsi
  40af54:	48 89 c7             	mov    %rax,%rdi
  40af57:	e8 b1 02 00 00       	callq  40b20d <_ZSt13__copy_move_aILb1EPmS0_ET1_T0_S2_S1_>
    }
  40af5c:	48 83 c4 20          	add    $0x20,%rsp
  40af60:	5b                   	pop    %rbx
  40af61:	41 5c                	pop    %r12
  40af63:	5d                   	pop    %rbp
  40af64:	c3                   	retq   

000000000040af65 <_ZNSt16allocator_traitsISaISt5tupleIIdddEEEE9_S_selectIKS2_EENSt9enable_ifIXntsrNS3_15__select_helperIT_EE5valueES8_E4typeERS8_>:
	{ return __a.select_on_container_copy_construction(); }

      template<typename _Alloc2>
	static typename
       	enable_if<!__select_helper<_Alloc2>::value, _Alloc2>::type
       	_S_select(_Alloc2& __a)
  40af65:	55                   	push   %rbp
  40af66:	48 89 e5             	mov    %rsp,%rbp
  40af69:	48 83 ec 10          	sub    $0x10,%rsp
  40af6d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40af71:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __a; }
  40af75:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40af79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40af7d:	48 89 d6             	mov    %rdx,%rsi
  40af80:	48 89 c7             	mov    %rax,%rdi
  40af83:	e8 f8 fb ff ff       	callq  40ab80 <_ZNSaISt5tupleIIdddEEEC1ERKS1_>
  40af88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40af8c:	c9                   	leaveq 
  40af8d:	c3                   	retq   

000000000040af8e <_ZN9__gnu_cxx13new_allocatorISt5tupleIIdddEEEC1ERKS3_>:
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }

      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  40af8e:	55                   	push   %rbp
  40af8f:	48 89 e5             	mov    %rsp,%rbp
  40af92:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40af96:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40af9a:	5d                   	pop    %rbp
  40af9b:	c3                   	retq   

000000000040af9c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt5tupleIIdddEESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>:
  template<bool _TrivialValueTypes>
    struct __uninitialized_copy
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
  40af9c:	55                   	push   %rbp
  40af9d:	48 89 e5             	mov    %rsp,%rbp
  40afa0:	53                   	push   %rbx
  40afa1:	48 83 ec 38          	sub    $0x38,%rsp
  40afa5:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
  40afa9:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  40afad:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
  40afb1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40afb5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __try
	    {
	      for (; __first != __last; ++__first, ++__cur)
  40afb9:	eb 37                	jmp    40aff2 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt5tupleIIdddEESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_+0x56>
		std::_Construct(std::__addressof(*__cur), *__first);
  40afbb:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40afbf:	48 89 c7             	mov    %rax,%rdi
  40afc2:	e8 d3 02 00 00       	callq  40b29a <_ZNK9__gnu_cxx17__normal_iteratorIPKSt5tupleIIdddEESt6vectorIS2_SaIS2_EEEdeEv>
  40afc7:	48 89 c3             	mov    %rax,%rbx
  40afca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40afce:	48 89 c7             	mov    %rax,%rdi
  40afd1:	e8 b8 ee ff ff       	callq  409e8e <_ZSt11__addressofISt5tupleIIdddEEEPT_RS2_>
  40afd6:	48 89 de             	mov    %rbx,%rsi
  40afd9:	48 89 c7             	mov    %rax,%rdi
  40afdc:	e8 d8 02 00 00       	callq  40b2b9 <_ZSt10_ConstructISt5tupleIIdddEEIRKS1_EEvPT_DpOT0_>
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
	  __try
	    {
	      for (; __first != __last; ++__first, ++__cur)
  40afe1:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40afe5:	48 89 c7             	mov    %rax,%rdi
  40afe8:	e8 8d 02 00 00       	callq  40b27a <_ZN9__gnu_cxx17__normal_iteratorIPKSt5tupleIIdddEESt6vectorIS2_SaIS2_EEEppEv>
  40afed:	48 83 45 e8 18       	addq   $0x18,-0x18(%rbp)
  40aff2:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  40aff6:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40affa:	48 89 d6             	mov    %rdx,%rsi
  40affd:	48 89 c7             	mov    %rax,%rdi
  40b000:	e8 39 02 00 00       	callq  40b23e <_ZN9__gnu_cxxneIPKSt5tupleIIdddEESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
  40b005:	84 c0                	test   %al,%al
  40b007:	75 b2                	jne    40afbb <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt5tupleIIdddEESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_+0x1f>
		std::_Construct(std::__addressof(*__cur), *__first);
	      return __cur;
  40b009:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b00d:	eb 33                	jmp    40b042 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt5tupleIIdddEESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_+0xa6>
  40b00f:	48 89 c3             	mov    %rax,%rbx
	    }
	  __catch(...)
  40b012:	e8 79 68 ff ff       	callq  401890 <__cxa_end_catch@plt>
  40b017:	48 89 d8             	mov    %rbx,%rax
  40b01a:	48 89 c7             	mov    %rax,%rdi
  40b01d:	e8 fe 68 ff ff       	callq  401920 <_Unwind_Resume@plt>
  40b022:	48 89 c7             	mov    %rax,%rdi
  40b025:	e8 a6 68 ff ff       	callq  4018d0 <__cxa_begin_catch@plt>
	    {
	      std::_Destroy(__result, __cur);
  40b02a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40b02e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40b032:	48 89 d6             	mov    %rdx,%rsi
  40b035:	48 89 c7             	mov    %rax,%rdi
  40b038:	e8 92 e1 ff ff       	callq  4091cf <_ZSt8_DestroyIPSt5tupleIIdddEEEvT_S3_>
	      __throw_exception_again;
  40b03d:	e8 3e 66 ff ff       	callq  401680 <__cxa_rethrow@plt>
	    }
	}
  40b042:	48 83 c4 38          	add    $0x38,%rsp
  40b046:	5b                   	pop    %rbx
  40b047:	5d                   	pop    %rbp
  40b048:	c3                   	retq   
  40b049:	90                   	nop

000000000040b04a <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaISA_ELNS_12_Lock_policyE2EEE8max_sizeEv>:
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
  40b04a:	55                   	push   %rbp
  40b04b:	48 89 e5             	mov    %rsp,%rbp
  40b04e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_t(-1) / sizeof(_Tp); }
  40b052:	48 b8 92 24 49 92 24 	movabs $0x492492492492492,%rax
  40b059:	49 92 04 
  40b05c:	5d                   	pop    %rbp
  40b05d:	c3                   	retq   

000000000040b05e <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaISA_ELNS_12_Lock_policyE2EEE9constructISD_IKSB_S9_EEEvPT_DpOT0_>:

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
  40b05e:	55                   	push   %rbp
  40b05f:	48 89 e5             	mov    %rsp,%rbp
  40b062:	41 56                	push   %r14
  40b064:	41 55                	push   %r13
  40b066:	41 54                	push   %r12
  40b068:	53                   	push   %rbx
  40b069:	48 83 ec 30          	sub    $0x30,%rsp
  40b06d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40b071:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  40b075:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  40b079:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  40b07d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40b081:	48 89 c7             	mov    %rax,%rdi
  40b084:	e8 e7 f1 ff ff       	callq  40a270 <_ZSt7forwardIKSaINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEEEOT_RNSt16remove_referenceISB_E4typeE>
  40b089:	48 89 c2             	mov    %rax,%rdx
  40b08c:	48 8d 45 df          	lea    -0x21(%rbp),%rax
  40b090:	48 89 d6             	mov    %rdx,%rsi
  40b093:	48 89 c7             	mov    %rax,%rdi
  40b096:	e8 71 02 00 00       	callq  40b30c <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEEC1ERKS8_>
  40b09b:	4c 8d 6d df          	lea    -0x21(%rbp),%r13
  40b09f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40b0a3:	48 89 c7             	mov    %rax,%rdi
  40b0a6:	e8 20 b2 ff ff       	callq  4062cb <_ZSt7forwardISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEOT_RNSt16remove_referenceIS6_E4typeE>
  40b0ab:	49 89 c6             	mov    %rax,%r14
  40b0ae:	4c 8b 65 c0          	mov    -0x40(%rbp),%r12
  40b0b2:	4c 89 e6             	mov    %r12,%rsi
  40b0b5:	bf 38 00 00 00       	mov    $0x38,%edi
  40b0ba:	e8 9e 8a ff ff       	callq  403b5d <_ZnwmPv>
  40b0bf:	48 89 c3             	mov    %rax,%rbx
  40b0c2:	48 85 db             	test   %rbx,%rbx
  40b0c5:	74 0e                	je     40b0d5 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaISA_ELNS_12_Lock_policyE2EEE9constructISD_IKSB_S9_EEEvPT_DpOT0_+0x77>
  40b0c7:	4c 89 f2             	mov    %r14,%rdx
  40b0ca:	4c 89 ee             	mov    %r13,%rsi
  40b0cd:	48 89 df             	mov    %rbx,%rdi
  40b0d0:	e8 77 02 00 00       	callq  40b34c <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaIS8_ELN9__gnu_cxx12_Lock_policyE2EEC1IIS7_EEES9_DpOT_>
  40b0d5:	48 8d 45 df          	lea    -0x21(%rbp),%rax
  40b0d9:	48 89 c7             	mov    %rax,%rdi
  40b0dc:	e8 e1 db ff ff       	callq  408cc2 <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEED1Ev>
  40b0e1:	eb 28                	jmp    40b10b <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaISA_ELNS_12_Lock_policyE2EEE9constructISD_IKSB_S9_EEEvPT_DpOT0_+0xad>
  40b0e3:	49 89 c5             	mov    %rax,%r13
  40b0e6:	4c 89 e6             	mov    %r12,%rsi
  40b0e9:	48 89 df             	mov    %rbx,%rdi
  40b0ec:	e8 7e 8a ff ff       	callq  403b6f <_ZdlPvS_>
  40b0f1:	4c 89 eb             	mov    %r13,%rbx
  40b0f4:	48 8d 45 df          	lea    -0x21(%rbp),%rax
  40b0f8:	48 89 c7             	mov    %rax,%rdi
  40b0fb:	e8 c2 db ff ff       	callq  408cc2 <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEED1Ev>
  40b100:	48 89 d8             	mov    %rbx,%rax
  40b103:	48 89 c7             	mov    %rax,%rdi
  40b106:	e8 15 68 ff ff       	callq  401920 <_Unwind_Resume@plt>
  40b10b:	48 83 c4 30          	add    $0x30,%rsp
  40b10f:	5b                   	pop    %rbx
  40b110:	41 5c                	pop    %r12
  40b112:	41 5d                	pop    %r13
  40b114:	41 5e                	pop    %r14
  40b116:	5d                   	pop    %rbp
  40b117:	c3                   	retq   

000000000040b118 <_ZNKSt13move_iteratorIPSt6threadE4baseEv>:
      template<typename _Iter>
	move_iterator(const move_iterator<_Iter>& __i)
	: _M_current(__i.base()) { }

      iterator_type
      base() const
  40b118:	55                   	push   %rbp
  40b119:	48 89 e5             	mov    %rsp,%rbp
  40b11c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
  40b120:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b124:	48 8b 00             	mov    (%rax),%rax
  40b127:	5d                   	pop    %rbp
  40b128:	c3                   	retq   
  40b129:	90                   	nop

000000000040b12a <_ZNSaISt5tupleIIdddEEEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. std::allocator propagate_on_container_move_assignment
      typedef true_type propagate_on_container_move_assignment;
#endif

      allocator() throw() { }
  40b12a:	55                   	push   %rbp
  40b12b:	48 89 e5             	mov    %rsp,%rbp
  40b12e:	48 83 ec 10          	sub    $0x10,%rsp
  40b132:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b136:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b13a:	48 89 c7             	mov    %rax,%rdi
  40b13d:	e8 d6 02 00 00       	callq  40b418 <_ZN9__gnu_cxx13new_allocatorISt5tupleIIdddEEEC1Ev>
  40b142:	c9                   	leaveq 
  40b143:	c3                   	retq   

000000000040b144 <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EE12_Vector_implC1EOS2_>:
	_Vector_impl(_Tp_alloc_type const& __a)
	: _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
	{ }

#if __cplusplus >= 201103L
	_Vector_impl(_Tp_alloc_type&& __a)
  40b144:	55                   	push   %rbp
  40b145:	48 89 e5             	mov    %rsp,%rbp
  40b148:	48 83 ec 10          	sub    $0x10,%rsp
  40b14c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b150:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(std::move(__a)),
  40b154:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40b158:	48 89 c7             	mov    %rax,%rdi
  40b15b:	e8 27 fd ff ff       	callq  40ae87 <_ZSt4moveIRSaISt5tupleIIdddEEEEONSt16remove_referenceIT_E4typeEOS5_>
  40b160:	48 89 c2             	mov    %rax,%rdx
	  _M_start(0), _M_finish(0), _M_end_of_storage(0)
  40b163:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b167:	48 89 d6             	mov    %rdx,%rsi
  40b16a:	48 89 c7             	mov    %rax,%rdi
  40b16d:	e8 0e fa ff ff       	callq  40ab80 <_ZNSaISt5tupleIIdddEEEC1ERKS1_>
  40b172:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b176:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  40b17d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b181:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  40b188:	00 
  40b189:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b18d:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  40b194:	00 
	{ }
  40b195:	c9                   	leaveq 
  40b196:	c3                   	retq   
  40b197:	90                   	nop

000000000040b198 <_ZNSt12_Vector_baseISt5tupleIIdddEESaIS1_EE12_Vector_impl12_M_swap_dataERS4_>:
#endif

	void _M_swap_data(_Vector_impl& __x)
  40b198:	55                   	push   %rbp
  40b199:	48 89 e5             	mov    %rsp,%rbp
  40b19c:	48 83 ec 10          	sub    $0x10,%rsp
  40b1a0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b1a4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{
	  std::swap(_M_start, __x._M_start);
  40b1a8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40b1ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b1b0:	48 89 d6             	mov    %rdx,%rsi
  40b1b3:	48 89 c7             	mov    %rax,%rdi
  40b1b6:	e8 75 02 00 00       	callq  40b430 <_ZSt4swapIPSt5tupleIIdddEEEvRT_S4_>
	  std::swap(_M_finish, __x._M_finish);
  40b1bb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40b1bf:	48 8d 50 08          	lea    0x8(%rax),%rdx
  40b1c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b1c7:	48 83 c0 08          	add    $0x8,%rax
  40b1cb:	48 89 d6             	mov    %rdx,%rsi
  40b1ce:	48 89 c7             	mov    %rax,%rdi
  40b1d1:	e8 5a 02 00 00       	callq  40b430 <_ZSt4swapIPSt5tupleIIdddEEEvRT_S4_>
	  std::swap(_M_end_of_storage, __x._M_end_of_storage);
  40b1d6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40b1da:	48 8d 50 10          	lea    0x10(%rax),%rdx
  40b1de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b1e2:	48 83 c0 10          	add    $0x10,%rax
  40b1e6:	48 89 d6             	mov    %rdx,%rsi
  40b1e9:	48 89 c7             	mov    %rax,%rdi
  40b1ec:	e8 3f 02 00 00       	callq  40b430 <_ZSt4swapIPSt5tupleIIdddEEEvRT_S4_>
	}
  40b1f1:	c9                   	leaveq 
  40b1f2:	c3                   	retq   

000000000040b1f3 <_ZNSt10_Iter_baseISt13move_iteratorIPmELb1EE7_S_baseES2_>:

  template<typename _Iterator>
    struct _Iter_base<_Iterator, true>
    {
      typedef typename _Iterator::iterator_type iterator_type;
      static iterator_type _S_base(_Iterator __it)
  40b1f3:	55                   	push   %rbp
  40b1f4:	48 89 e5             	mov    %rsp,%rbp
  40b1f7:	48 83 ec 10          	sub    $0x10,%rsp
  40b1fb:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
      { return __it.base(); }
  40b1ff:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  40b203:	48 89 c7             	mov    %rax,%rdi
  40b206:	e8 77 02 00 00       	callq  40b482 <_ZNKSt13move_iteratorIPmE4baseEv>
  40b20b:	c9                   	leaveq 
  40b20c:	c3                   	retq   

000000000040b20d <_ZSt13__copy_move_aILb1EPmS0_ET1_T0_S2_S1_>:
	}
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
  40b20d:	55                   	push   %rbp
  40b20e:	48 89 e5             	mov    %rsp,%rbp
  40b211:	48 83 ec 30          	sub    $0x30,%rsp
  40b215:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40b219:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40b21d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueTypeI)
	                     && __is_pointer<_II>::__value
	                     && __is_pointer<_OI>::__value
			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
  40b221:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)

      return std::__copy_move<_IsMove, __simple,
	                      _Category>::__copy_m(__first, __last, __result);
  40b225:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40b229:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  40b22d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b231:	48 89 ce             	mov    %rcx,%rsi
  40b234:	48 89 c7             	mov    %rax,%rdi
  40b237:	e8 57 02 00 00       	callq  40b493 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
    }
  40b23c:	c9                   	leaveq 
  40b23d:	c3                   	retq   

000000000040b23e <_ZN9__gnu_cxxneIPKSt5tupleIIdddEESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
	       const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
  40b23e:	55                   	push   %rbp
  40b23f:	48 89 e5             	mov    %rsp,%rbp
  40b242:	53                   	push   %rbx
  40b243:	48 83 ec 18          	sub    $0x18,%rsp
  40b247:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40b24b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() != __rhs.base(); }
  40b24f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b253:	48 89 c7             	mov    %rax,%rdi
  40b256:	e8 9d 02 00 00       	callq  40b4f8 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt5tupleIIdddEESt6vectorIS2_SaIS2_EEE4baseEv>
  40b25b:	48 8b 18             	mov    (%rax),%rbx
  40b25e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40b262:	48 89 c7             	mov    %rax,%rdi
  40b265:	e8 8e 02 00 00       	callq  40b4f8 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt5tupleIIdddEESt6vectorIS2_SaIS2_EEE4baseEv>
  40b26a:	48 8b 00             	mov    (%rax),%rax
  40b26d:	48 39 c3             	cmp    %rax,%rbx
  40b270:	0f 95 c0             	setne  %al
  40b273:	48 83 c4 18          	add    $0x18,%rsp
  40b277:	5b                   	pop    %rbx
  40b278:	5d                   	pop    %rbp
  40b279:	c3                   	retq   

000000000040b27a <_ZN9__gnu_cxx17__normal_iteratorIPKSt5tupleIIdddEESt6vectorIS2_SaIS2_EEEppEv>:
      pointer
      operator->() const
      { return _M_current; }

      __normal_iterator&
      operator++()
  40b27a:	55                   	push   %rbp
  40b27b:	48 89 e5             	mov    %rsp,%rbp
  40b27e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	++_M_current;
  40b282:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b286:	48 8b 00             	mov    (%rax),%rax
  40b289:	48 8d 50 18          	lea    0x18(%rax),%rdx
  40b28d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b291:	48 89 10             	mov    %rdx,(%rax)
	return *this;
  40b294:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  40b298:	5d                   	pop    %rbp
  40b299:	c3                   	retq   

000000000040b29a <_ZNK9__gnu_cxx17__normal_iteratorIPKSt5tupleIIdddEESt6vectorIS2_SaIS2_EEEdeEv>:
		      _Container>::__type>& __i)
        : _M_current(__i.base()) { }

      // Forward iterator requirements
      reference
      operator*() const
  40b29a:	55                   	push   %rbp
  40b29b:	48 89 e5             	mov    %rsp,%rbp
  40b29e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
  40b2a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b2a6:	48 8b 00             	mov    (%rax),%rax
  40b2a9:	5d                   	pop    %rbp
  40b2aa:	c3                   	retq   

000000000040b2ab <_ZSt7forwardIRKSt5tupleIIdddEEEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  40b2ab:	55                   	push   %rbp
  40b2ac:	48 89 e5             	mov    %rsp,%rbp
  40b2af:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  40b2b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b2b7:	5d                   	pop    %rbp
  40b2b8:	c3                   	retq   

000000000040b2b9 <_ZSt10_ConstructISt5tupleIIdddEEIRKS1_EEvPT_DpOT0_>:
   * object's constructor with an initializer.
   */
#if __cplusplus >= 201103L
  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
  40b2b9:	55                   	push   %rbp
  40b2ba:	48 89 e5             	mov    %rsp,%rbp
  40b2bd:	53                   	push   %rbx
  40b2be:	48 83 ec 18          	sub    $0x18,%rsp
  40b2c2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40b2c6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  40b2ca:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40b2ce:	48 89 c7             	mov    %rax,%rdi
  40b2d1:	e8 d5 ff ff ff       	callq  40b2ab <_ZSt7forwardIRKSt5tupleIIdddEEEOT_RNSt16remove_referenceIS4_E4typeE>
  40b2d6:	48 89 c3             	mov    %rax,%rbx
  40b2d9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b2dd:	48 89 c6             	mov    %rax,%rsi
  40b2e0:	bf 18 00 00 00       	mov    $0x18,%edi
  40b2e5:	e8 73 88 ff ff       	callq  403b5d <_ZnwmPv>
  40b2ea:	48 85 c0             	test   %rax,%rax
  40b2ed:	74 16                	je     40b305 <_ZSt10_ConstructISt5tupleIIdddEEIRKS1_EEvPT_DpOT0_+0x4c>
  40b2ef:	48 8b 13             	mov    (%rbx),%rdx
  40b2f2:	48 89 10             	mov    %rdx,(%rax)
  40b2f5:	48 8b 53 08          	mov    0x8(%rbx),%rdx
  40b2f9:	48 89 50 08          	mov    %rdx,0x8(%rax)
  40b2fd:	48 8b 53 10          	mov    0x10(%rbx),%rdx
  40b301:	48 89 50 10          	mov    %rdx,0x10(%rax)
  40b305:	48 83 c4 18          	add    $0x18,%rsp
  40b309:	5b                   	pop    %rbx
  40b30a:	5d                   	pop    %rbp
  40b30b:	c3                   	retq   

000000000040b30c <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEEC1ERKS8_>:

      allocator(const allocator& __a) throw()
  40b30c:	55                   	push   %rbp
  40b30d:	48 89 e5             	mov    %rsp,%rbp
  40b310:	48 83 ec 10          	sub    $0x10,%rsp
  40b314:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b318:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
  40b31c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40b320:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b324:	48 89 d6             	mov    %rdx,%rsi
  40b327:	48 89 c7             	mov    %rax,%rdi
  40b32a:	e8 d7 01 00 00       	callq  40b506 <_ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEEC1ERKSA_>
  40b32f:	c9                   	leaveq 
  40b330:	c3                   	retq   
  40b331:	90                   	nop

000000000040b332 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaIS8_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplD1Ev>:
    class _Sp_counted_ptr_inplace final : public _Sp_counted_base<_Lp>
    {
      // Helper class that stores the pointer and also acts as an allocator.
      // Used to dispose of the owned pointer and the internal refcount
      // Requires that copies of _Alloc can free each other's memory.
      struct _Impl
  40b332:	55                   	push   %rbp
  40b333:	48 89 e5             	mov    %rsp,%rbp
  40b336:	48 83 ec 10          	sub    $0x10,%rsp
  40b33a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b33e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b342:	48 89 c7             	mov    %rax,%rdi
  40b345:	e8 78 d9 ff ff       	callq  408cc2 <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEED1Ev>
  40b34a:	c9                   	leaveq 
  40b34b:	c3                   	retq   

000000000040b34c <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaIS8_ELN9__gnu_cxx12_Lock_policyE2EEC1IIS7_EEES9_DpOT_>:
	_Tp* _M_ptr;
      };

    public:
      template<typename... _Args>
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
  40b34c:	55                   	push   %rbp
  40b34d:	48 89 e5             	mov    %rsp,%rbp
  40b350:	53                   	push   %rbx
  40b351:	48 83 ec 38          	sub    $0x38,%rsp
  40b355:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40b359:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40b35d:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	: _M_impl(__a)
  40b361:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40b365:	48 89 c7             	mov    %rax,%rdi
  40b368:	e8 b1 01 00 00       	callq  40b51e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EEC1Ev>
  40b36d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40b371:	48 c7 00 10 c2 40 00 	movq   $0x40c210,(%rax)
  40b378:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40b37c:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
  40b380:	48 89 d6             	mov    %rdx,%rsi
  40b383:	48 89 c7             	mov    %rax,%rdi
  40b386:	e8 81 ff ff ff       	callq  40b30c <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEEC1ERKS8_>
  40b38b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40b38f:	48 8d 50 10          	lea    0x10(%rax),%rdx
  40b393:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
  40b397:	48 89 c6             	mov    %rax,%rsi
  40b39a:	48 89 d7             	mov    %rdx,%rdi
  40b39d:	e8 b8 01 00 00       	callq  40b55a <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaIS8_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplC1ES9_>
  40b3a2:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
  40b3a6:	48 89 c7             	mov    %rax,%rdi
  40b3a9:	e8 14 d9 ff ff       	callq  408cc2 <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEED1Ev>
	{
	  _M_impl._M_ptr = static_cast<_Tp*>(static_cast<void*>(&_M_storage));
  40b3ae:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40b3b2:	48 8d 50 18          	lea    0x18(%rax),%rdx
  40b3b6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40b3ba:	48 89 50 10          	mov    %rdx,0x10(%rax)
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070.  allocate_shared should use allocator_traits<A>::construct
	  allocator_traits<_Alloc>::construct(__a, _M_impl._M_ptr,
	      std::forward<_Args>(__args)...); // might throw
  40b3be:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40b3c2:	48 89 c7             	mov    %rax,%rdi
  40b3c5:	e8 01 af ff ff       	callq  4062cb <_ZSt7forwardISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEOT_RNSt16remove_referenceIS6_E4typeE>
  40b3ca:	48 89 c2             	mov    %rax,%rdx
  40b3cd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40b3d1:	48 8b 48 10          	mov    0x10(%rax),%rcx
	: _M_impl(__a)
	{
	  _M_impl._M_ptr = static_cast<_Tp*>(static_cast<void*>(&_M_storage));
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070.  allocate_shared should use allocator_traits<A>::construct
	  allocator_traits<_Alloc>::construct(__a, _M_impl._M_ptr,
  40b3d5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40b3d9:	48 89 ce             	mov    %rcx,%rsi
  40b3dc:	48 89 c7             	mov    %rax,%rdi
  40b3df:	e8 a6 01 00 00       	callq  40b58a <_ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEEE9constructIS8_IS7_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS9_PT_DpOSC_>
	      std::forward<_Args>(__args)...); // might throw
	}
  40b3e4:	eb 2a                	jmp    40b410 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaIS8_ELN9__gnu_cxx12_Lock_policyE2EEC1IIS7_EEES9_DpOT_+0xc4>
  40b3e6:	48 89 c3             	mov    %rax,%rbx
      };

    public:
      template<typename... _Args>
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
	: _M_impl(__a)
  40b3e9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40b3ed:	48 83 c0 10          	add    $0x10,%rax
  40b3f1:	48 89 c7             	mov    %rax,%rdi
  40b3f4:	e8 39 ff ff ff       	callq  40b332 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaIS8_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplD1Ev>
  40b3f9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40b3fd:	48 89 c7             	mov    %rax,%rdi
  40b400:	e8 81 d6 ff ff       	callq  408a86 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED1Ev>
  40b405:	48 89 d8             	mov    %rbx,%rax
  40b408:	48 89 c7             	mov    %rax,%rdi
  40b40b:	e8 10 65 ff ff       	callq  401920 <_Unwind_Resume@plt>
	  _M_impl._M_ptr = static_cast<_Tp*>(static_cast<void*>(&_M_storage));
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070.  allocate_shared should use allocator_traits<A>::construct
	  allocator_traits<_Alloc>::construct(__a, _M_impl._M_ptr,
	      std::forward<_Args>(__args)...); // might throw
	}
  40b410:	48 83 c4 38          	add    $0x38,%rsp
  40b414:	5b                   	pop    %rbx
  40b415:	5d                   	pop    %rbp
  40b416:	c3                   	retq   
  40b417:	90                   	nop

000000000040b418 <_ZN9__gnu_cxx13new_allocatorISt5tupleIIdddEEEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  40b418:	55                   	push   %rbp
  40b419:	48 89 e5             	mov    %rsp,%rbp
  40b41c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b420:	5d                   	pop    %rbp
  40b421:	c3                   	retq   

000000000040b422 <_ZSt4moveIRPSt5tupleIIdddEEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
  40b422:	55                   	push   %rbp
  40b423:	48 89 e5             	mov    %rsp,%rbp
  40b426:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  40b42a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b42e:	5d                   	pop    %rbp
  40b42f:	c3                   	retq   

000000000040b430 <_ZSt4swapIPSt5tupleIIdddEEEvRT_S4_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
  40b430:	55                   	push   %rbp
  40b431:	48 89 e5             	mov    %rsp,%rbp
  40b434:	48 83 ec 20          	sub    $0x20,%rsp
  40b438:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40b43c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
  40b440:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b444:	48 89 c7             	mov    %rax,%rdi
  40b447:	e8 d6 ff ff ff       	callq  40b422 <_ZSt4moveIRPSt5tupleIIdddEEEONSt16remove_referenceIT_E4typeEOS5_>
  40b44c:	48 8b 00             	mov    (%rax),%rax
  40b44f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      __a = _GLIBCXX_MOVE(__b);
  40b453:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40b457:	48 89 c7             	mov    %rax,%rdi
  40b45a:	e8 c3 ff ff ff       	callq  40b422 <_ZSt4moveIRPSt5tupleIIdddEEEONSt16remove_referenceIT_E4typeEOS5_>
  40b45f:	48 8b 10             	mov    (%rax),%rdx
  40b462:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b466:	48 89 10             	mov    %rdx,(%rax)
      __b = _GLIBCXX_MOVE(__tmp);
  40b469:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
  40b46d:	48 89 c7             	mov    %rax,%rdi
  40b470:	e8 ad ff ff ff       	callq  40b422 <_ZSt4moveIRPSt5tupleIIdddEEEONSt16remove_referenceIT_E4typeEOS5_>
  40b475:	48 8b 10             	mov    (%rax),%rdx
  40b478:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40b47c:	48 89 10             	mov    %rdx,(%rax)
    }
  40b47f:	c9                   	leaveq 
  40b480:	c3                   	retq   
  40b481:	90                   	nop

000000000040b482 <_ZNKSt13move_iteratorIPmE4baseEv>:
      template<typename _Iter>
	move_iterator(const move_iterator<_Iter>& __i)
	: _M_current(__i.base()) { }

      iterator_type
      base() const
  40b482:	55                   	push   %rbp
  40b483:	48 89 e5             	mov    %rsp,%rbp
  40b486:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
  40b48a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b48e:	48 8b 00             	mov    (%rax),%rax
  40b491:	5d                   	pop    %rbp
  40b492:	c3                   	retq   

000000000040b493 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>:
  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
  40b493:	55                   	push   %rbp
  40b494:	48 89 e5             	mov    %rsp,%rbp
  40b497:	48 83 ec 30          	sub    $0x30,%rsp
  40b49b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40b49f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40b4a3:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
        {
	  const ptrdiff_t _Num = __last - __first;
  40b4a7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b4ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b4af:	48 29 c2             	sub    %rax,%rdx
  40b4b2:	48 89 d0             	mov    %rdx,%rax
  40b4b5:	48 c1 f8 03          	sar    $0x3,%rax
  40b4b9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  if (_Num)
  40b4bd:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40b4c2:	74 1f                	je     40b4e3 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_+0x50>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
  40b4c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b4c8:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  40b4cf:	00 
  40b4d0:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b4d4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40b4d8:	48 89 ce             	mov    %rcx,%rsi
  40b4db:	48 89 c7             	mov    %rax,%rdi
  40b4de:	e8 dd 62 ff ff       	callq  4017c0 <memmove@plt>
	  return __result + _Num;
  40b4e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b4e7:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  40b4ee:	00 
  40b4ef:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40b4f3:	48 01 d0             	add    %rdx,%rax
	}
  40b4f6:	c9                   	leaveq 
  40b4f7:	c3                   	retq   

000000000040b4f8 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt5tupleIIdddEESt6vectorIS2_SaIS2_EEE4baseEv>:
      __normal_iterator
      operator-(const difference_type& __n) const
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const
  40b4f8:	55                   	push   %rbp
  40b4f9:	48 89 e5             	mov    %rsp,%rbp
  40b4fc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
  40b500:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b504:	5d                   	pop    %rbp
  40b505:	c3                   	retq   

000000000040b506 <_ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEEC1ERKSA_>:

      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  40b506:	55                   	push   %rbp
  40b507:	48 89 e5             	mov    %rsp,%rbp
  40b50a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b50e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40b512:	5d                   	pop    %rbp
  40b513:	c3                   	retq   

000000000040b514 <_ZNSt11_Mutex_baseILN9__gnu_cxx12_Lock_policyE2EEC1Ev>:
  using __gnu_cxx::_S_mutex;
  using __gnu_cxx::_S_atomic;

  // Empty helper class except when the template argument is _S_mutex.
  template<_Lock_policy _Lp>
    class _Mutex_base
  40b514:	55                   	push   %rbp
  40b515:	48 89 e5             	mov    %rsp,%rbp
  40b518:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b51c:	5d                   	pop    %rbp
  40b51d:	c3                   	retq   

000000000040b51e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EEC1Ev>:
  template<_Lock_policy _Lp = __default_lock_policy>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
  40b51e:	55                   	push   %rbp
  40b51f:	48 89 e5             	mov    %rsp,%rbp
  40b522:	48 83 ec 10          	sub    $0x10,%rsp
  40b526:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_use_count(1), _M_weak_count(1) { }
  40b52a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b52e:	48 89 c7             	mov    %rax,%rdi
  40b531:	e8 de ff ff ff       	callq  40b514 <_ZNSt11_Mutex_baseILN9__gnu_cxx12_Lock_policyE2EEC1Ev>
  40b536:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b53a:	48 c7 00 d0 c2 40 00 	movq   $0x40c2d0,(%rax)
  40b541:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b545:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%rax)
  40b54c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b550:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%rax)
  40b557:	c9                   	leaveq 
  40b558:	c3                   	retq   
  40b559:	90                   	nop

000000000040b55a <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaIS8_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplC1ES9_>:
      // Used to dispose of the owned pointer and the internal refcount
      // Requires that copies of _Alloc can free each other's memory.
      struct _Impl
      : public _Alloc           // copy constructor must not throw
      {
	_Impl(_Alloc __a) : _Alloc(__a), _M_ptr() { }
  40b55a:	55                   	push   %rbp
  40b55b:	48 89 e5             	mov    %rsp,%rbp
  40b55e:	48 83 ec 10          	sub    $0x10,%rsp
  40b562:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b566:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40b56a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40b56e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b572:	48 89 d6             	mov    %rdx,%rsi
  40b575:	48 89 c7             	mov    %rax,%rdi
  40b578:	e8 8f fd ff ff       	callq  40b30c <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEEC1ERKS8_>
  40b57d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b581:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  40b588:	c9                   	leaveq 
  40b589:	c3                   	retq   

000000000040b58a <_ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEEE9constructIS8_IS7_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS9_PT_DpOSC_>:
       *  if that expression is well-formed, otherwise uses placement-new
       *  to construct an object of type @a _Tp at location @a __p from the
       *  arguments @a __args...
      */
      template<typename _Tp, typename... _Args>
	static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
  40b58a:	55                   	push   %rbp
  40b58b:	48 89 e5             	mov    %rsp,%rbp
  40b58e:	48 83 ec 20          	sub    $0x20,%rsp
  40b592:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b596:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40b59a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	-> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
  40b59e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b5a2:	48 89 c7             	mov    %rax,%rdi
  40b5a5:	e8 21 ad ff ff       	callq  4062cb <_ZSt7forwardISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEOT_RNSt16remove_referenceIS6_E4typeE>
  40b5aa:	48 89 c2             	mov    %rax,%rdx
  40b5ad:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40b5b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b5b5:	48 89 ce             	mov    %rcx,%rsi
  40b5b8:	48 89 c7             	mov    %rax,%rdi
  40b5bb:	e8 02 00 00 00       	callq  40b5c2 <_ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEEE12_S_constructIS8_IS7_EEENSt9enable_ifIXsrNSA_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS9_PSE_DpOSF_>
  40b5c0:	c9                   	leaveq 
  40b5c1:	c3                   	retq   

000000000040b5c2 <_ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEEE12_S_constructIS8_IS7_EEENSt9enable_ifIXsrNSA_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS9_PSE_DpOSF_>:
	};

      template<typename _Tp, typename... _Args>
	static typename
       	enable_if<__construct_helper<_Tp, _Args...>::value, void>::type
       	_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
  40b5c2:	55                   	push   %rbp
  40b5c3:	48 89 e5             	mov    %rsp,%rbp
  40b5c6:	48 83 ec 20          	sub    $0x20,%rsp
  40b5ca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b5ce:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40b5d2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
  40b5d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b5da:	48 89 c7             	mov    %rax,%rdi
  40b5dd:	e8 e9 ac ff ff       	callq  4062cb <_ZSt7forwardISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEOT_RNSt16remove_referenceIS6_E4typeE>
  40b5e2:	48 89 c2             	mov    %rax,%rdx
  40b5e5:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40b5e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b5ed:	48 89 ce             	mov    %rcx,%rsi
  40b5f0:	48 89 c7             	mov    %rax,%rdi
  40b5f3:	e8 02 00 00 00       	callq  40b5fa <_ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEE9constructIS9_IS8_EEEvPT_DpOT0_>
  40b5f8:	c9                   	leaveq 
  40b5f9:	c3                   	retq   

000000000040b5fa <_ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEE9constructIS9_IS8_EEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
  40b5fa:	55                   	push   %rbp
  40b5fb:	48 89 e5             	mov    %rsp,%rbp
  40b5fe:	53                   	push   %rbx
  40b5ff:	48 83 ec 28          	sub    $0x28,%rsp
  40b603:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40b607:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40b60b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  40b60f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40b613:	48 89 c7             	mov    %rax,%rdi
  40b616:	e8 b0 ac ff ff       	callq  4062cb <_ZSt7forwardISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEOT_RNSt16remove_referenceIS6_E4typeE>
  40b61b:	48 89 c3             	mov    %rax,%rbx
  40b61e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40b622:	48 89 c6             	mov    %rax,%rsi
  40b625:	bf 20 00 00 00       	mov    $0x20,%edi
  40b62a:	e8 2e 85 ff ff       	callq  403b5d <_ZnwmPv>
  40b62f:	48 85 c0             	test   %rax,%rax
  40b632:	74 0b                	je     40b63f <_ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEE9constructIS9_IS8_EEEvPT_DpOT0_+0x45>
  40b634:	48 89 de             	mov    %rbx,%rsi
  40b637:	48 89 c7             	mov    %rax,%rdi
  40b63a:	e8 35 00 00 00       	callq  40b674 <_ZNSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEC1EOS6_>
  40b63f:	48 83 c4 28          	add    $0x28,%rsp
  40b643:	5b                   	pop    %rbx
  40b644:	5d                   	pop    %rbp
  40b645:	c3                   	retq   

000000000040b646 <_ZNSt6thread10_Impl_baseC1Ev>:
	operator<<(basic_ostream<_CharT, _Traits>& __out, thread::id __id);
    };

    // Simple base type that the templatized, derived class containing
    // an arbitrary functor can be converted to and called.
    struct _Impl_base
  40b646:	55                   	push   %rbp
  40b647:	48 89 e5             	mov    %rsp,%rbp
  40b64a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b64e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b652:	48 c7 00 90 c2 40 00 	movq   $0x40c290,(%rax)
  40b659:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b65d:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  40b664:	00 
  40b665:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b669:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  40b670:	00 
  40b671:	5d                   	pop    %rbp
  40b672:	c3                   	retq   
  40b673:	90                   	nop

000000000040b674 <_ZNSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEC1EOS6_>:
    template<typename _Callable>
      struct _Impl : public _Impl_base
      {
	_Callable		_M_func;

	_Impl(_Callable&& __f) : _M_func(std::forward<_Callable>(__f))
  40b674:	55                   	push   %rbp
  40b675:	48 89 e5             	mov    %rsp,%rbp
  40b678:	48 83 ec 10          	sub    $0x10,%rsp
  40b67c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b680:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40b684:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b688:	48 89 c7             	mov    %rax,%rdi
  40b68b:	e8 b6 ff ff ff       	callq  40b646 <_ZNSt6thread10_Impl_baseC1Ev>
  40b690:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b694:	48 c7 00 50 c2 40 00 	movq   $0x40c250,(%rax)
  40b69b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40b69f:	48 89 c7             	mov    %rax,%rdi
  40b6a2:	e8 24 ac ff ff       	callq  4062cb <_ZSt7forwardISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEOT_RNSt16remove_referenceIS6_E4typeE>
  40b6a7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40b6ab:	48 83 c2 18          	add    $0x18,%rdx
  40b6af:	48 89 c6             	mov    %rax,%rsi
  40b6b2:	48 89 d7             	mov    %rdx,%rdi
  40b6b5:	e8 94 ab ff ff       	callq  40624e <_ZNSt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEC1EOS4_>
	{ }
  40b6ba:	c9                   	leaveq 
  40b6bb:	c3                   	retq   

000000000040b6bc <_ZNSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEED1Ev>:

      virtual void _M_run() = 0;
    };

    template<typename _Callable>
      struct _Impl : public _Impl_base
  40b6bc:	55                   	push   %rbp
  40b6bd:	48 89 e5             	mov    %rsp,%rbp
  40b6c0:	48 83 ec 10          	sub    $0x10,%rsp
  40b6c4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b6c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b6cc:	48 c7 00 50 c2 40 00 	movq   $0x40c250,(%rax)
  40b6d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b6d7:	48 89 c7             	mov    %rax,%rdi
  40b6da:	e8 79 86 ff ff       	callq  403d58 <_ZNSt6thread10_Impl_baseD1Ev>
  40b6df:	b8 00 00 00 00       	mov    $0x0,%eax
  40b6e4:	85 c0                	test   %eax,%eax
  40b6e6:	74 0c                	je     40b6f4 <_ZNSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEED1Ev+0x38>
  40b6e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b6ec:	48 89 c7             	mov    %rax,%rdi
  40b6ef:	e8 6c 5f ff ff       	callq  401660 <_ZdlPv@plt>
  40b6f4:	c9                   	leaveq 
  40b6f5:	c3                   	retq   

000000000040b6f6 <_ZNSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEED0Ev>:
  40b6f6:	55                   	push   %rbp
  40b6f7:	48 89 e5             	mov    %rsp,%rbp
  40b6fa:	48 83 ec 10          	sub    $0x10,%rsp
  40b6fe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b702:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b706:	48 89 c7             	mov    %rax,%rdi
  40b709:	e8 ae ff ff ff       	callq  40b6bc <_ZNSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEED1Ev>
  40b70e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b712:	48 89 c7             	mov    %rax,%rdi
  40b715:	e8 46 5f ff ff       	callq  401660 <_ZdlPv@plt>
  40b71a:	c9                   	leaveq 
  40b71b:	c3                   	retq   

000000000040b71c <_ZTWN7barrier35centralized_sense_reversing_barrier11local_senseE>:
  40b71c:	55                   	push   %rbp
  40b71d:	48 89 e5             	mov    %rsp,%rbp
  40b720:	64 48 8b 14 25 00 00 	mov    %fs:0x0,%rdx
  40b727:	00 00 
  40b729:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  40b730:	48 01 d0             	add    %rdx,%rax
  40b733:	5d                   	pop    %rbp
  40b734:	c3                   	retq   
  40b735:	90                   	nop

000000000040b736 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaIS8_ELN9__gnu_cxx12_Lock_policyE2EED1Ev>:
	  // 2070.  allocate_shared should use allocator_traits<A>::construct
	  allocator_traits<_Alloc>::construct(__a, _M_impl._M_ptr,
	      std::forward<_Args>(__args)...); // might throw
	}

      ~_Sp_counted_ptr_inplace() noexcept { }
  40b736:	55                   	push   %rbp
  40b737:	48 89 e5             	mov    %rsp,%rbp
  40b73a:	48 83 ec 10          	sub    $0x10,%rsp
  40b73e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b742:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b746:	48 c7 00 10 c2 40 00 	movq   $0x40c210,(%rax)
  40b74d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b751:	48 83 c0 10          	add    $0x10,%rax
  40b755:	48 89 c7             	mov    %rax,%rdi
  40b758:	e8 d5 fb ff ff       	callq  40b332 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaIS8_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplD1Ev>
  40b75d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b761:	48 89 c7             	mov    %rax,%rdi
  40b764:	e8 1d d3 ff ff       	callq  408a86 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED1Ev>
  40b769:	b8 00 00 00 00       	mov    $0x0,%eax
  40b76e:	85 c0                	test   %eax,%eax
  40b770:	74 0c                	je     40b77e <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaIS8_ELN9__gnu_cxx12_Lock_policyE2EED1Ev+0x48>
  40b772:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b776:	48 89 c7             	mov    %rax,%rdi
  40b779:	e8 e2 5e ff ff       	callq  401660 <_ZdlPv@plt>
  40b77e:	c9                   	leaveq 
  40b77f:	c3                   	retq   

000000000040b780 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaIS8_ELN9__gnu_cxx12_Lock_policyE2EED0Ev>:
  40b780:	55                   	push   %rbp
  40b781:	48 89 e5             	mov    %rsp,%rbp
  40b784:	48 83 ec 10          	sub    $0x10,%rsp
  40b788:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b78c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b790:	48 89 c7             	mov    %rax,%rdi
  40b793:	e8 9e ff ff ff       	callq  40b736 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaIS8_ELN9__gnu_cxx12_Lock_policyE2EED1Ev>
  40b798:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b79c:	48 89 c7             	mov    %rax,%rdi
  40b79f:	e8 bc 5e ff ff       	callq  401660 <_ZdlPv@plt>
  40b7a4:	c9                   	leaveq 
  40b7a5:	c3                   	retq   

000000000040b7a6 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaIS8_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv>:

      virtual void
      _M_dispose() noexcept
  40b7a6:	55                   	push   %rbp
  40b7a7:	48 89 e5             	mov    %rsp,%rbp
  40b7aa:	48 83 ec 10          	sub    $0x10,%rsp
  40b7ae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { allocator_traits<_Alloc>::destroy(_M_impl, _M_impl._M_ptr); }
  40b7b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b7b6:	48 8b 40 10          	mov    0x10(%rax),%rax
  40b7ba:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40b7be:	48 83 c2 10          	add    $0x10,%rdx
  40b7c2:	48 89 c6             	mov    %rax,%rsi
  40b7c5:	48 89 d7             	mov    %rdx,%rdi
  40b7c8:	e8 b3 00 00 00       	callq  40b880 <_ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEEE7destroyIS8_EEvRS9_PT_>
  40b7cd:	c9                   	leaveq 
  40b7ce:	c3                   	retq   
  40b7cf:	90                   	nop

000000000040b7d0 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaIS8_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv>:

      // Override because the allocator needs to know the dynamic type
      virtual void
      _M_destroy() noexcept
  40b7d0:	55                   	push   %rbp
  40b7d1:	48 89 e5             	mov    %rsp,%rbp
  40b7d4:	48 83 ec 20          	sub    $0x20,%rsp
  40b7d8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      {
	typedef typename allocator_traits<_Alloc>::template
	  rebind_traits<_Sp_counted_ptr_inplace> _Alloc_traits;
	typename _Alloc_traits::allocator_type __a(_M_impl);
  40b7dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b7e0:	48 8d 50 10          	lea    0x10(%rax),%rdx
  40b7e4:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  40b7e8:	48 89 d6             	mov    %rdx,%rsi
  40b7eb:	48 89 c7             	mov    %rax,%rdi
  40b7ee:	e8 d3 f0 ff ff       	callq  40a8c6 <_ZNSaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaIS8_ELN9__gnu_cxx12_Lock_policyE2EEEC1IS8_EERKSaIT_E>
	_Alloc_traits::destroy(__a, this);
  40b7f3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40b7f7:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  40b7fb:	48 89 d6             	mov    %rdx,%rsi
  40b7fe:	48 89 c7             	mov    %rax,%rdi
  40b801:	e8 9f 00 00 00       	callq  40b8a5 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaIS9_ELN9__gnu_cxx12_Lock_policyE2EEEE7destroyISD_EEvRSE_PT_>
	_Alloc_traits::deallocate(__a, this, 1);
  40b806:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b80a:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  40b80e:	ba 01 00 00 00       	mov    $0x1,%edx
  40b813:	48 89 ce             	mov    %rcx,%rsi
  40b816:	48 89 c7             	mov    %rax,%rdi
  40b819:	e8 5b f1 ff ff       	callq  40a979 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaIS9_ELN9__gnu_cxx12_Lock_policyE2EEEE10deallocateERSE_PSD_m>
  40b81e:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  40b822:	48 89 c7             	mov    %rax,%rdi
  40b825:	e8 ba f0 ff ff       	callq  40a8e4 <_ZNSaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaIS8_ELN9__gnu_cxx12_Lock_policyE2EEED1Ev>
      }
  40b82a:	c9                   	leaveq 
  40b82b:	c3                   	retq   

000000000040b82c <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaIS8_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info>:

      // Sneaky trick so __shared_ptr can get the managed pointer
      virtual void*
      _M_get_deleter(const std::type_info& __ti) noexcept
  40b82c:	55                   	push   %rbp
  40b82d:	48 89 e5             	mov    %rsp,%rbp
  40b830:	48 83 ec 10          	sub    $0x10,%rsp
  40b834:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b838:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      {
#ifdef __GXX_RTTI
	return __ti == typeid(_Sp_make_shared_tag)
  40b83c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40b840:	be d0 c3 40 00       	mov    $0x40c3d0,%esi
  40b845:	48 89 c7             	mov    %rax,%rdi
  40b848:	e8 73 83 ff ff       	callq  403bc0 <_ZNKSt9type_infoeqERKS_>
	       ? static_cast<void*>(&_M_storage)
	       : 0;
  40b84d:	84 c0                	test   %al,%al
  40b84f:	74 0a                	je     40b85b <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaIS8_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info+0x2f>
  40b851:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b855:	48 83 c0 18          	add    $0x18,%rax
  40b859:	eb 05                	jmp    40b860 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaIS8_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info+0x34>
  40b85b:	b8 00 00 00 00       	mov    $0x0,%eax
#else
        return 0;
#endif
      }
  40b860:	c9                   	leaveq 
  40b861:	c3                   	retq   

000000000040b862 <_ZNSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEE6_M_runEv>:

	_Impl(_Callable&& __f) : _M_func(std::forward<_Callable>(__f))
	{ }

	void
	_M_run() { _M_func(); }
  40b862:	55                   	push   %rbp
  40b863:	48 89 e5             	mov    %rsp,%rbp
  40b866:	48 83 ec 10          	sub    $0x10,%rsp
  40b86a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b86e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b872:	48 83 c0 18          	add    $0x18,%rax
  40b876:	48 89 c7             	mov    %rax,%rdi
  40b879:	e8 4c 00 00 00       	callq  40b8ca <_ZNSt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEclEv>
  40b87e:	c9                   	leaveq 
  40b87f:	c3                   	retq   

000000000040b880 <_ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEEE7destroyIS8_EEvRS9_PT_>:
       *
       *  Calls @c __a.destroy(__p) if that expression is well-formed,
       *  otherwise calls @c __p->~_Tp()
      */
      template <class _Tp>
	static void destroy(_Alloc& __a, _Tp* __p)
  40b880:	55                   	push   %rbp
  40b881:	48 89 e5             	mov    %rsp,%rbp
  40b884:	48 83 ec 10          	sub    $0x10,%rsp
  40b888:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b88c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ _S_destroy(__a, __p); }
  40b890:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40b894:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b898:	48 89 d6             	mov    %rdx,%rsi
  40b89b:	48 89 c7             	mov    %rax,%rdi
  40b89e:	e8 44 00 00 00       	callq  40b8e7 <_ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEEE10_S_destroyIS8_EENSt9enable_ifIXsrNSA_16__destroy_helperIT_EE5valueEvE4typeERS9_PSE_>
  40b8a3:	c9                   	leaveq 
  40b8a4:	c3                   	retq   

000000000040b8a5 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaIS9_ELN9__gnu_cxx12_Lock_policyE2EEEE7destroyISD_EEvRSE_PT_>:
       *
       *  Calls @c __a.destroy(__p) if that expression is well-formed,
       *  otherwise calls @c __p->~_Tp()
      */
      template <class _Tp>
	static void destroy(_Alloc& __a, _Tp* __p)
  40b8a5:	55                   	push   %rbp
  40b8a6:	48 89 e5             	mov    %rsp,%rbp
  40b8a9:	48 83 ec 10          	sub    $0x10,%rsp
  40b8ad:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b8b1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ _S_destroy(__a, __p); }
  40b8b5:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40b8b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b8bd:	48 89 d6             	mov    %rdx,%rsi
  40b8c0:	48 89 c7             	mov    %rax,%rdi
  40b8c3:	e8 44 00 00 00       	callq  40b90c <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaIS9_ELN9__gnu_cxx12_Lock_policyE2EEEE10_S_destroyISD_EENSt9enable_ifIXsrNSF_16__destroy_helperIT_EE5valueEvE4typeERSE_PSJ_>
  40b8c8:	c9                   	leaveq 
  40b8c9:	c3                   	retq   

000000000040b8ca <_ZNSt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEclEv>:

      _Bind_simple(const _Bind_simple&) = default;
      _Bind_simple(_Bind_simple&&) = default;

      result_type
      operator()()
  40b8ca:	55                   	push   %rbp
  40b8cb:	48 89 e5             	mov    %rsp,%rbp
  40b8ce:	48 83 ec 20          	sub    $0x20,%rsp
  40b8d2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      {
        typedef typename _Build_index_tuple<sizeof...(_Args)>::__type _Indices;
        return _M_invoke(_Indices());
  40b8d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b8da:	88 14 24             	mov    %dl,(%rsp)
  40b8dd:	48 89 c7             	mov    %rax,%rdi
  40b8e0:	e8 1d 01 00 00       	callq  40ba02 <_ZNSt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEE9_M_invokeIILm0EEEEvSt12_Index_tupleIIXspT_EEE>
      }
  40b8e5:	c9                   	leaveq 
  40b8e6:	c3                   	retq   

000000000040b8e7 <_ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEEE10_S_destroyIS8_EENSt9enable_ifIXsrNSA_16__destroy_helperIT_EE5valueEvE4typeERS9_PSE_>:
	  static const bool value = type::value;
	};

      template<typename _Tp>
	static typename enable_if<__destroy_helper<_Tp>::value, void>::type
       	_S_destroy(_Alloc& __a, _Tp* __p)
  40b8e7:	55                   	push   %rbp
  40b8e8:	48 89 e5             	mov    %rsp,%rbp
  40b8eb:	48 83 ec 10          	sub    $0x10,%rsp
  40b8ef:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b8f3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ __a.destroy(__p); }
  40b8f7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40b8fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b8ff:	48 89 d6             	mov    %rdx,%rsi
  40b902:	48 89 c7             	mov    %rax,%rdi
  40b905:	e8 42 01 00 00       	callq  40ba4c <_ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEE7destroyIS9_EEvPT_>
  40b90a:	c9                   	leaveq 
  40b90b:	c3                   	retq   

000000000040b90c <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaIS9_ELN9__gnu_cxx12_Lock_policyE2EEEE10_S_destroyISD_EENSt9enable_ifIXsrNSF_16__destroy_helperIT_EE5valueEvE4typeERSE_PSJ_>:
	  static const bool value = type::value;
	};

      template<typename _Tp>
	static typename enable_if<__destroy_helper<_Tp>::value, void>::type
       	_S_destroy(_Alloc& __a, _Tp* __p)
  40b90c:	55                   	push   %rbp
  40b90d:	48 89 e5             	mov    %rsp,%rbp
  40b910:	48 83 ec 10          	sub    $0x10,%rsp
  40b914:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b918:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ __a.destroy(__p); }
  40b91c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40b920:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b924:	48 89 d6             	mov    %rdx,%rsi
  40b927:	48 89 c7             	mov    %rax,%rdi
  40b92a:	e8 43 01 00 00       	callq  40ba72 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaISA_ELNS_12_Lock_policyE2EEE7destroyISD_EEvPT_>
  40b92f:	c9                   	leaveq 
  40b930:	c3                   	retq   

000000000040b931 <_ZSt12__get_helperILm1ESt17reference_wrapperIN7barrier35centralized_sense_reversing_barrierEEImmS0_ISt6atomicIbEEEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EIS8_DpT1_EE>:
    struct tuple_size<tuple<_Elements...>>
    : public integral_constant<std::size_t, sizeof...(_Elements)> { };

  template<std::size_t __i, typename _Head, typename... _Tail>
    constexpr typename __add_ref<_Head>::type
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
  40b931:	55                   	push   %rbp
  40b932:	48 89 e5             	mov    %rsp,%rbp
  40b935:	48 83 ec 10          	sub    $0x10,%rsp
  40b939:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
  40b93d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b941:	48 89 c7             	mov    %rax,%rdi
  40b944:	e8 a0 bb ff ff       	callq  4074e9 <_ZNSt11_Tuple_implILm1EISt17reference_wrapperIN7barrier35centralized_sense_reversing_barrierEEmmS0_ISt6atomicIbEEEE7_M_headERS7_>
  40b949:	c9                   	leaveq 
  40b94a:	c3                   	retq   

000000000040b94b <_ZSt12__get_helperILm2EmImSt17reference_wrapperISt6atomicIbEEEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EIS5_DpT1_EE>:
    struct tuple_size<tuple<_Elements...>>
    : public integral_constant<std::size_t, sizeof...(_Elements)> { };

  template<std::size_t __i, typename _Head, typename... _Tail>
    constexpr typename __add_ref<_Head>::type
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
  40b94b:	55                   	push   %rbp
  40b94c:	48 89 e5             	mov    %rsp,%rbp
  40b94f:	48 83 ec 10          	sub    $0x10,%rsp
  40b953:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
  40b957:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b95b:	48 89 c7             	mov    %rax,%rdi
  40b95e:	e8 b6 ba ff ff       	callq  407419 <_ZNSt11_Tuple_implILm2EImmSt17reference_wrapperISt6atomicIbEEEE7_M_headERS4_>
  40b963:	c9                   	leaveq 
  40b964:	c3                   	retq   

000000000040b965 <_ZSt12__get_helperILm3EmISt17reference_wrapperISt6atomicIbEEEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EIS5_DpT1_EE>:
    struct tuple_size<tuple<_Elements...>>
    : public integral_constant<std::size_t, sizeof...(_Elements)> { };

  template<std::size_t __i, typename _Head, typename... _Tail>
    constexpr typename __add_ref<_Head>::type
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
  40b965:	55                   	push   %rbp
  40b966:	48 89 e5             	mov    %rsp,%rbp
  40b969:	48 83 ec 10          	sub    $0x10,%rsp
  40b96d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
  40b971:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b975:	48 89 c7             	mov    %rax,%rdi
  40b978:	e8 cd b9 ff ff       	callq  40734a <_ZNSt11_Tuple_implILm3EImSt17reference_wrapperISt6atomicIbEEEE7_M_headERS4_>
  40b97d:	c9                   	leaveq 
  40b97e:	c3                   	retq   

000000000040b97f <_ZSt12__get_helperILm4ESt17reference_wrapperISt6atomicIbEEIEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EIS5_DpT1_EE>:
    struct tuple_size<tuple<_Elements...>>
    : public integral_constant<std::size_t, sizeof...(_Elements)> { };

  template<std::size_t __i, typename _Head, typename... _Tail>
    constexpr typename __add_ref<_Head>::type
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
  40b97f:	55                   	push   %rbp
  40b980:	48 89 e5             	mov    %rsp,%rbp
  40b983:	48 83 ec 10          	sub    $0x10,%rsp
  40b987:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
  40b98b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b98f:	48 89 c7             	mov    %rax,%rdi
  40b992:	e8 f3 b8 ff ff       	callq  40728a <_ZNSt11_Tuple_implILm4EISt17reference_wrapperISt6atomicIbEEEE7_M_headERS4_>
  40b997:	c9                   	leaveq 
  40b998:	c3                   	retq   

000000000040b999 <_ZSt12__get_helperILm0EN7barrier8internal11cache_wiperEIjEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EIS4_DpT1_EE>:
    struct tuple_size<tuple<_Elements...>>
    : public integral_constant<std::size_t, sizeof...(_Elements)> { };

  template<std::size_t __i, typename _Head, typename... _Tail>
    constexpr typename __add_ref<_Head>::type
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
  40b999:	55                   	push   %rbp
  40b99a:	48 89 e5             	mov    %rsp,%rbp
  40b99d:	48 83 ec 10          	sub    $0x10,%rsp
  40b9a1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
  40b9a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b9a9:	48 89 c7             	mov    %rax,%rdi
  40b9ac:	e8 e1 a7 ff ff       	callq  406192 <_ZNSt11_Tuple_implILm0EIN7barrier8internal11cache_wiperEjEE7_M_headERS3_>
  40b9b1:	c9                   	leaveq 
  40b9b2:	c3                   	retq   

000000000040b9b3 <_ZSt3getILm0EIN7barrier8internal11cache_wiperEjEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERS8_>:
  // original type.
  template<std::size_t __i, typename... _Elements>
    constexpr typename __add_ref<
                      typename tuple_element<__i, tuple<_Elements...>>::type
                    >::type
    get(tuple<_Elements...>& __t) noexcept
  40b9b3:	55                   	push   %rbp
  40b9b4:	48 89 e5             	mov    %rsp,%rbp
  40b9b7:	48 83 ec 10          	sub    $0x10,%rsp
  40b9bb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __get_helper<__i>(__t); }
  40b9bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b9c3:	48 89 c7             	mov    %rax,%rdi
  40b9c6:	e8 ce ff ff ff       	callq  40b999 <_ZSt12__get_helperILm0EN7barrier8internal11cache_wiperEIjEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EIS4_DpT1_EE>
  40b9cb:	c9                   	leaveq 
  40b9cc:	c3                   	retq   

000000000040b9cd <_ZSt12__get_helperILm1EjIEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EIS1_DpT1_EE>:
    struct tuple_size<tuple<_Elements...>>
    : public integral_constant<std::size_t, sizeof...(_Elements)> { };

  template<std::size_t __i, typename _Head, typename... _Tail>
    constexpr typename __add_ref<_Head>::type
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
  40b9cd:	55                   	push   %rbp
  40b9ce:	48 89 e5             	mov    %rsp,%rbp
  40b9d1:	48 83 ec 10          	sub    $0x10,%rsp
  40b9d5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
  40b9d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b9dd:	48 89 c7             	mov    %rax,%rdi
  40b9e0:	e8 e8 a6 ff ff       	callq  4060cd <_ZNSt11_Tuple_implILm1EIjEE7_M_headERS0_>
  40b9e5:	c9                   	leaveq 
  40b9e6:	c3                   	retq   

000000000040b9e7 <_ZSt3getILm1EIN7barrier8internal11cache_wiperEjEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERS8_>:
  // original type.
  template<std::size_t __i, typename... _Elements>
    constexpr typename __add_ref<
                      typename tuple_element<__i, tuple<_Elements...>>::type
                    >::type
    get(tuple<_Elements...>& __t) noexcept
  40b9e7:	55                   	push   %rbp
  40b9e8:	48 89 e5             	mov    %rsp,%rbp
  40b9eb:	48 83 ec 10          	sub    $0x10,%rsp
  40b9ef:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __get_helper<__i>(__t); }
  40b9f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b9f7:	48 89 c7             	mov    %rax,%rdi
  40b9fa:	e8 ce ff ff ff       	callq  40b9cd <_ZSt12__get_helperILm1EjIEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EIS1_DpT1_EE>
  40b9ff:	c9                   	leaveq 
  40ba00:	c3                   	retq   
  40ba01:	90                   	nop

000000000040ba02 <_ZNSt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEE9_M_invokeIILm0EEEEvSt12_Index_tupleIIXspT_EEE>:

    private:

      template<std::size_t... _Indices>
        typename result_of<_Callable(_Args...)>::type
        _M_invoke(_Index_tuple<_Indices...>)
  40ba02:	55                   	push   %rbp
  40ba03:	48 89 e5             	mov    %rsp,%rbp
  40ba06:	53                   	push   %rbx
  40ba07:	48 83 ec 18          	sub    $0x18,%rsp
  40ba0b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
        {
	  // std::bind always forwards bound arguments as lvalues,
	  // but this type can call functions which only accept rvalues.
          return std::forward<_Callable>(std::get<0>(_M_bound))(
              std::forward<_Args>(std::get<_Indices+1>(_M_bound))...);
  40ba0f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ba13:	48 89 c7             	mov    %rax,%rdi
  40ba16:	e8 cc ff ff ff       	callq  40b9e7 <_ZSt3getILm1EIN7barrier8internal11cache_wiperEjEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERS8_>
  40ba1b:	48 89 c7             	mov    %rax,%rdi
  40ba1e:	e8 c4 a6 ff ff       	callq  4060e7 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
        typename result_of<_Callable(_Args...)>::type
        _M_invoke(_Index_tuple<_Indices...>)
        {
	  // std::bind always forwards bound arguments as lvalues,
	  // but this type can call functions which only accept rvalues.
          return std::forward<_Callable>(std::get<0>(_M_bound))(
  40ba23:	8b 00                	mov    (%rax),%eax
  40ba25:	89 c3                	mov    %eax,%ebx
  40ba27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ba2b:	48 89 c7             	mov    %rax,%rdi
  40ba2e:	e8 80 ff ff ff       	callq  40b9b3 <_ZSt3getILm0EIN7barrier8internal11cache_wiperEjEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERS8_>
  40ba33:	48 89 c7             	mov    %rax,%rdi
  40ba36:	e8 fe 97 ff ff       	callq  405239 <_ZSt7forwardIN7barrier8internal11cache_wiperEEOT_RNSt16remove_referenceIS3_E4typeE>
              std::forward<_Args>(std::get<_Indices+1>(_M_bound))...);
  40ba3b:	89 de                	mov    %ebx,%esi
  40ba3d:	48 89 c7             	mov    %rax,%rdi
  40ba40:	e8 37 8b ff ff       	callq  40457c <_ZNK7barrier8internal11cache_wiperclEi>
        }
  40ba45:	48 83 c4 18          	add    $0x18,%rsp
  40ba49:	5b                   	pop    %rbx
  40ba4a:	5d                   	pop    %rbp
  40ba4b:	c3                   	retq   

000000000040ba4c <_ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEEE7destroyIS9_EEvPT_>:

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
  40ba4c:	55                   	push   %rbp
  40ba4d:	48 89 e5             	mov    %rsp,%rbp
  40ba50:	48 83 ec 10          	sub    $0x10,%rsp
  40ba54:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40ba58:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40ba5c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40ba60:	48 8b 00             	mov    (%rax),%rax
  40ba63:	48 8b 00             	mov    (%rax),%rax
  40ba66:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40ba6a:	48 89 d7             	mov    %rdx,%rdi
  40ba6d:	ff d0                	callq  *%rax
  40ba6f:	c9                   	leaveq 
  40ba70:	c3                   	retq   
  40ba71:	90                   	nop

000000000040ba72 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaISA_ELNS_12_Lock_policyE2EEE7destroyISD_EEvPT_>:
  40ba72:	55                   	push   %rbp
  40ba73:	48 89 e5             	mov    %rsp,%rbp
  40ba76:	48 83 ec 10          	sub    $0x10,%rsp
  40ba7a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40ba7e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40ba82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40ba86:	48 89 c7             	mov    %rax,%rdi
  40ba89:	e8 a8 fc ff ff       	callq  40b736 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFN7barrier8internal11cache_wiperEjEEEESaIS8_ELN9__gnu_cxx12_Lock_policyE2EED1Ev>
  40ba8e:	c9                   	leaveq 
  40ba8f:	c3                   	retq   

000000000040ba90 <_ZNKSt17reference_wrapperIN7barrier35centralized_sense_reversing_barrierEEcvRS1_Ev>:
      {
	_M_data = __inref._M_data;
	return *this;
      }

      operator _Tp&() const noexcept
  40ba90:	55                   	push   %rbp
  40ba91:	48 89 e5             	mov    %rsp,%rbp
  40ba94:	48 83 ec 10          	sub    $0x10,%rsp
  40ba98:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->get(); }
  40ba9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40baa0:	48 89 c7             	mov    %rax,%rdi
  40baa3:	e8 1c 00 00 00       	callq  40bac4 <_ZNKSt17reference_wrapperIN7barrier35centralized_sense_reversing_barrierEE3getEv>
  40baa8:	c9                   	leaveq 
  40baa9:	c3                   	retq   

000000000040baaa <_ZNKSt17reference_wrapperISt6atomicIbEEcvRS1_Ev>:
      {
	_M_data = __inref._M_data;
	return *this;
      }

      operator _Tp&() const noexcept
  40baaa:	55                   	push   %rbp
  40baab:	48 89 e5             	mov    %rsp,%rbp
  40baae:	48 83 ec 10          	sub    $0x10,%rsp
  40bab2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->get(); }
  40bab6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40baba:	48 89 c7             	mov    %rax,%rdi
  40babd:	e8 14 00 00 00       	callq  40bad6 <_ZNKSt17reference_wrapperISt6atomicIbEE3getEv>
  40bac2:	c9                   	leaveq 
  40bac3:	c3                   	retq   

000000000040bac4 <_ZNKSt17reference_wrapperIN7barrier35centralized_sense_reversing_barrierEE3getEv>:

      _Tp&
      get() const noexcept
  40bac4:	55                   	push   %rbp
  40bac5:	48 89 e5             	mov    %rsp,%rbp
  40bac8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_data; }
  40bacc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40bad0:	48 8b 00             	mov    (%rax),%rax
  40bad3:	5d                   	pop    %rbp
  40bad4:	c3                   	retq   
  40bad5:	90                   	nop

000000000040bad6 <_ZNKSt17reference_wrapperISt6atomicIbEE3getEv>:

      operator _Tp&() const noexcept
      { return this->get(); }

      _Tp&
      get() const noexcept
  40bad6:	55                   	push   %rbp
  40bad7:	48 89 e5             	mov    %rsp,%rbp
  40bada:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_data; }
  40bade:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40bae2:	48 8b 00             	mov    (%rax),%rax
  40bae5:	5d                   	pop    %rbp
  40bae6:	c3                   	retq   
  40bae7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40baee:	00 00 

000000000040baf0 <__libc_csu_init>:
  40baf0:	41 57                	push   %r15
  40baf2:	41 89 ff             	mov    %edi,%r15d
  40baf5:	41 56                	push   %r14
  40baf7:	49 89 f6             	mov    %rsi,%r14
  40bafa:	41 55                	push   %r13
  40bafc:	49 89 d5             	mov    %rdx,%r13
  40baff:	41 54                	push   %r12
  40bb01:	4c 8d 25 b0 82 20 00 	lea    0x2082b0(%rip),%r12        # 613db8 <__frame_dummy_init_array_entry>
  40bb08:	55                   	push   %rbp
  40bb09:	48 8d 2d b8 82 20 00 	lea    0x2082b8(%rip),%rbp        # 613dc8 <__init_array_end>
  40bb10:	53                   	push   %rbx
  40bb11:	4c 29 e5             	sub    %r12,%rbp
  40bb14:	31 db                	xor    %ebx,%ebx
  40bb16:	48 c1 fd 03          	sar    $0x3,%rbp
  40bb1a:	48 83 ec 08          	sub    $0x8,%rsp
  40bb1e:	e8 bd 5a ff ff       	callq  4015e0 <_init>
  40bb23:	48 85 ed             	test   %rbp,%rbp
  40bb26:	74 1e                	je     40bb46 <__libc_csu_init+0x56>
  40bb28:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40bb2f:	00 
  40bb30:	4c 89 ea             	mov    %r13,%rdx
  40bb33:	4c 89 f6             	mov    %r14,%rsi
  40bb36:	44 89 ff             	mov    %r15d,%edi
  40bb39:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
  40bb3d:	48 83 c3 01          	add    $0x1,%rbx
  40bb41:	48 39 eb             	cmp    %rbp,%rbx
  40bb44:	75 ea                	jne    40bb30 <__libc_csu_init+0x40>
  40bb46:	48 83 c4 08          	add    $0x8,%rsp
  40bb4a:	5b                   	pop    %rbx
  40bb4b:	5d                   	pop    %rbp
  40bb4c:	41 5c                	pop    %r12
  40bb4e:	41 5d                	pop    %r13
  40bb50:	41 5e                	pop    %r14
  40bb52:	41 5f                	pop    %r15
  40bb54:	c3                   	retq   
  40bb55:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%rax,%rax,1)
  40bb5c:	00 00 00 00 

000000000040bb60 <__libc_csu_fini>:
  40bb60:	f3 c3                	repz retq 

Disassembly of section .fini:

000000000040bb64 <_fini>:
  40bb64:	48 83 ec 08          	sub    $0x8,%rsp
  40bb68:	48 83 c4 08          	add    $0x8,%rsp
  40bb6c:	c3                   	retq   
